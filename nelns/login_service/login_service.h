/** \file login_service.h
 * <File description>
 *
 * $Id: login_service.h,v 1.10 2002/09/16 14:50:07 lecroart Exp $
 */

/* Copyright, 2001 Nevrax Ltd.
 *
 * This file is part of NEVRAX NeL Network Services.
 * NEVRAX NeL Network Services is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.

 * NEVRAX NeL Network Services is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with NEVRAX NeL Network Services; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
 * MA 02111-1307, USA.
 */

#ifndef NL_LOGIN_SERVICE_H
#define NL_LOGIN_SERVICE_H

#include <mysql.h>

#include "nel/misc/types_nl.h"

#include "nel/misc/debug.h"
#include "nel/misc/config_file.h"
#include "nel/misc/displayer.h"
#include "nel/misc/log.h"

#include "nel/net/service.h"
#include "nel/net/net_manager.h"

using namespace std;
using namespace NLMISC;
using namespace NLNET;

// Constantes


/// Set the version of the server. you have to increase it each time the client-server protocol changes.
/// You have to increment the client too (the server and client version must be the same)
extern uint32 ServerVersion;

// true is you want to store password in crypted format, 0 for plain text
extern bool CryptPassword;



// Structures

struct CShard
{
	CShard (uint32 shardId, TSockId	sockId) : ShardId(shardId), SockId(sockId), NbPlayer(0) {}
	
	uint32	ShardId;	// uniq shard id generated by the database, used to identify a WS
	uint32	NbPlayer;	// number of player for *this* LS, the total number of player for a shard is in the database
	TSockId	SockId;		// used to communicate with this shard
};


// Variables

extern CFileDisplayer	Fd;
extern CLog				Output;

extern MYSQL *DatabaseConnection;

extern std::vector<CShard> Shards;

// Functions

void displayShards ();
void displayUsers ();
sint findUser (uint32 Id);
void beep (uint freq = 400, uint nb = 2, uint beepDuration = 100, uint pauseDuration = 100);

/*
 * disconnectClient is true if we need to disconnect the client on connected on the login system (during the login process)
 * disconnectShard is true if we need to send a message to the shard to disconnect the client from the shard
 */
//void disconnectClient (CUser &user, bool disconnectClient, bool disconnectShard);



#endif // NL_LOGIN_SERVICE_H

/* End of login_service.h */
