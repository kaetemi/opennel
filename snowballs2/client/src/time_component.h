/** \file time_component.h
 * CTimeComponent
 * 
 * This file is part of NEVRAX SNOWBALLS.
 * NEVRAX SNOWBALLS is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * NEVRAX SNOWBALLS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with NEVRAX SNOWBALLS; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * $Id$
 */

#ifndef SBCLIENT_TIME_COMPONENT_H
#define SBCLIENT_TIME_COMPONENT_H
#include <nel/misc/types_nl.h>
#include "component.h"

#include <nel/misc/time_nl.h>

namespace SBCLIENT {

class CComponentManager;

/**
 * what time is it?
 * \date 2008
 * k, thanks.
 */
class CTimeComponent : public IComponent
{
public:
	NLMISC::TLocalTime LocalTime; // use for differences only
	NLMISC::TLocalTime ServerTime; // use for differences only
	NLMISC::TGameTime GameTime;
	NLMISC::TGameCycle GameCycle;
	NLMISC::TLocalTime LocalTimeDelta;
	NLMISC::TLocalTime ServerTimeDelta;
	NLMISC::TGameTime GameTimeDelta;
	float FramesPerSecond;
protected:
	// pointers
	// ...
	
	// instances
	NLMISC::TTime _Time;
	NLMISC::TLocalTime _SecondsPerCycle; // changes with update
	NLMISC::TGameTime _GameTimePerCycle; // stays the same
	NLMISC::TGameTime _GameTimePerSecond; // stays the same
	NLMISC::TGameCycle _CyclesPerUpdate; // stays the same
	NLMISC::TLocalTime _LastCycleUpdate; // updated when update detects cycle up
	double _GameCycle; // goes up as long as it's not too high
	NLMISC::TGameCycle _NewGameCycle; // set by updateGameCycle
public:	
	/// Basic constructor of a component.
	/// Requires a pointer to the componentmanager and a unique name.
	CTimeComponent(CComponentManager *manager, const std::string &instanceId, NLMISC::IProgressCallback &progressCallback);
	~CTimeComponent();

	void update();
	void render();
	void config(const std::string &varName, NLMISC::CConfigFile::CVar &var);

	/// Set the game cycle configuration.
	/// This is done by the online or offline component.
	void setGameCycle(NLMISC::TGameCycle gameCycle, NLMISC::TLocalTime secondsPerCycle = 0.1, NLMISC::TGameTime gameTimePerSecond = 60.0, NLMISC::TGameCycle cyclesPerUpdate = 2);
	
	/// Update the game cycle. This needs to be called every time it goes up.
	/// New cycle is sent by server trough network or generated by offline.
	void updateGameCycle(NLMISC::TGameCycle gameCycle);
};

}

#endif /* #ifndef SBCLIENT_TIME_COMPONENT_H */
