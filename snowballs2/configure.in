dnl ==========================================================================
dnl Configuration script for Snowballs
dnl ==========================================================================
dnl
dnl $Id: configure.in,v 1.3 2001/07/23 13:30:41 valignat Exp $
dnl 


dnl ==========================================================================
dnl Process this file with autoconf to produce a configure script.

AC_INIT(client/src/client.cpp)

MAJOR_VERSION=0
MINOR_VERSION=1
PICO_VERSION=0

AM_INIT_AUTOMAKE(snowballs, $MAJOR_VERSION.$MINOR_VERSION.$PICO_VERSION)

AM_CONFIG_HEADER(config.h)


dnl The following hack should ensure that configure doesn't add optimizing
dnl or debugging flags to CFLAGS or CXXFLAGS
CFLAGS="$CFLAGS "
CXXFLAGS="$CXXFLAGS "


dnl ==========================================================================
dnl Checks Snowballs modules (Client / Server) to install / Disable

SNO_SUBDIRS=""

dnl Client
AC_ARG_ENABLE( client,
    [  --disable-client        disable compilation and install of Snowballs Client.],
    [ AC_MSG_RESULT(disable Snowballs Client.) ],
    [ SNO_SUBDIRS="$SNO_SUBDIRS client" ] )

dnl Server
AC_ARG_ENABLE( server,
    [  --disable-server        disable compilation and install of Snowballs Server.],
    [ AC_MSG_RESULT(disable Snowballs Server.) ],
    [ SNO_SUBDIRS="$SNO_SUBDIRS server" ] )

AC_SUBST(SNO_SUBDIRS)


dnl ==========================================================================
dnl Checks for programs.
dnl ==========================================================================

AC_PROG_MAKE_SET

AC_PROG_CC
AC_PROG_CXX

AM_SANITY_CHECK

AC_PROG_INSTALL


dnl ==========================================================================
dnl Configure Settings
dnl ==========================================================================

dnl Set the C++ compiler as the default compiler for the configure script
dnl compilation tests
AC_LANG_CPLUSPLUS


dnl ==========================================================================
dnl Checks for typedefs, structures, and compiler characteristics.
dnl ==========================================================================


dnl ==========================================================================
dnl Checks for header files.
dnl ==========================================================================

AC_STDC_HEADERS
AC_CHECK_HEADERS(fcntl.h unistd.h)


dnl ==========================================================================
dnl X11

AC_PATH_X

if test ! "$no_x" = "yes" ; then
    if test ! X"$x_libraries" = X ; then
        LIBS="$LIBS -L$x_libraries"
    fi
    if test ! X"$x_includes" = X ; then
        CXXFLAGS="$CXXFLAGS -I$x_includes"
    fi
else
    AC_MSG_ERROR(X11 must be installed.)
fi


dnl ==========================================================================
dnl STLPort

dnl Ask user for path to the STLport header files
AC_ARG_WITH( stlport,
    [  --with-stlport=<path>   path to the STLPort header files directory.
                          e.g. /usr/local/include/stlport ],
    [ STLPORT_DIR=$with_stlport
      AC_MSG_RESULT(using STLPort header files located in $with_stlport) ],
      AC_MSG_ERROR([You must call configure with the --with-stlport option.
    This tells configure where to find the STLPort header files.
    e.g. --with-stlport=/usr/local/include/stlport])
)

if test X"$STLPORT_DIR" != X"";
then
    CXXFLAGS="-I$STLPORT_DIR $CXXFLAGS"
fi

dnl Ask user for path to the STLPort library files
AC_ARG_WITH( stllib,
    [  --with-stllib=<path>    path to the STLPort installation directory.
                          e.g. /usr/local/lib/stlport],
    [ STLLIB_DIR=$with_stllib
      AC_MSG_RESULT(using STLPort library located in $with_stllib) ]
)

if test X"$STLLIB_DIR" != X"";
then
    LIBS="-L$STLLIB_DIR $LIBS"
fi

LIBS="$LIBS -lstlport_gcc"

_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CXXFLAGS"

AC_MSG_CHECKING(for STLPort)
AC_EGREP_CPP( yo_stlport,
[#include <algorithm>
#ifdef __SGI_STL_PORT
   yo_stlport
#endif],
[ AC_MSG_RESULT(yes)],
  AC_MSG_ERROR([STLPort is needed to compile the client (www.stlport.org)])
)

CPPFLAGS="$_CPPFLAGS"


dnl ==========================================================================
dnl NeL

dnl Check for NeL library files
AC_PATH_PROG(NEL_CONFIG, nel-config, no)

if test "$NEL_CONFIG" = "no"; then
    AC_MSG_ERROR([Cannot find nel-config: check your path.
    NeL library is needed to compile Snowballs (www.nevrax.org).])
else
    NEL_CFLAGS=`nel-config --cflags`
    NEL_LIBS=`nel-config --libs`
fi

AC_SUBST(NEL_CFLAGS)
AC_SUBST(NEL_LIBS)

dnl Checking NeL instalation
_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CXXFLAGS ${NEL_CFLAGS}"


dnl ==========================================================================
dnl FreeType 2

dnl Check for the FreeType 2 library files
AC_PATH_PROG(FREETYPE_CONFIG, freetype-config, no)

if test "$FREETYPE_CONFIG" = "no"; then
    AC_MSG_ERROR([Cannot find freetype-config: check your path.
    FreeType 2 library is needed to compile NeL (freetype.sourceforge.net).])
else
    FREETYPE_CFLAGS=`freetype-config --cflags`
    FREETYPE_LIBS=`freetype-config --libs`
fi

AC_SUBST(FREETYPE_CFLAGS)
AC_SUBST(FREETYPE_LIBS)

dnl Checking the FreeType 2 instalation
_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CXXFLAGS ${FREETYPE_CFLAGS}"

AC_MSG_CHECKING(for FreeType 2 installation)
AC_EGREP_CPP( yo_freetype2,
[#include <freetype/freetype.h>
#if FREETYPE_MAJOR == 2
   yo_freetype2
#endif],
[ AC_MSG_RESULT(yes)],
  AC_MSG_ERROR([Freetype 2 library is needed to compile NeL (freetype.sourceforge.net).])
)

CPPFLAGS="$_CPPFLAGS"


dnl ==========================================================================
dnl Debug/optimized compilation mode

MAX_C_OPTIMIZE="-O6"

dnl Build optimized or debug version ?
dnl First check for gcc and g++
if test "$ac_cv_prog_gcc" = "yes"
then
    DEBUG_CFLAGS="-g"
    DEBUG_OPTIMIZE_CC="-O"
    OPTIMIZE_CFLAGS="$MAX_C_OPTIMIZE"
else
    DEBUG_CFLAGS="-g"
    DEBUG_OPTIMIZE_CC=""
    OPTIMIZE_CFLAGS="-O"
fi

if test "$ac_cv_prog_cxx_g" = "yes"
then
    DEBUG_CXXFLAGS="-g"
    DEBUG_OPTIMIZE_CXX="-O"
    OPTIMIZE_CXXFLAGS="-O3"
else
  DEBUG_CXXFLAGS="-g"
  DEBUG_OPTIMIZE_CXX=""
  OPTIMIZE_CXXFLAGS="-O"
fi

AC_ARG_WITH(debug,
    [  --with-debug[=full]     Build a debug version (huge libraries)
  --without-debug         Build withoug debugging code (default)],
    [ with_debug=$withval ],
    [ with_debug=no ] )

if test "$with_debug" = "yes"
then
    dnl Medium debug.
    CFLAGS="$DEBUG_CFLAGS $DEBUG_OPTIMIZE_CC $CFLAGS"
    CXXFLAGS="$DEBUG_CXXFLAGS $DEBUG_OPTIMIZE_CXX $CXXFLAGS"
elif test "$with_debug" = "full"
then
    dnl Full debug. Very slow in some cases
    CFLAGS="$DEBUG_CFLAGS $CFLAGS"
    CXXFLAGS="$DEBUG_CXXFLAGS $CXXFLAGS"
else
    dnl Optimized version. No debug
    CFLAGS="$OPTIMIZE_CFLAGS $CFLAGS"
    CXXFLAGS="$OPTIMIZE_CXXFLAGS $CXXFLAGS"
fi


dnl ==========================================================================
dnl Checks for libraries.


dnl ==========================================================================
dnl Checks for library functions.


dnl ==========================================================================
dnl Output files to generate.

AC_OUTPUT( Makefile                                         \
           client/Makefile                                  \
           client/src/Makefile                              \
           server/Makefile                                  \
           server/frontend/Makefile                         \
           server/frontend/src/Makefile                     \
           server/chat/Makefile                             \
           server/chat/src/Makefile                         \
           server/position/Makefile                         \
           server/position/src/Makefile                     \
)


dnl End of configure.in

