

	sint32 CActorScript::getMethodIndexSize() const
	{
		return CAgentScript::getBaseMethodCount() + fid_switch;
	}

//	virtual IObjectIA::CProcessResult runMethodBase(int heritance, int index,IObjectIA *);


	IObjectIA::CProcessResult CActorScript::runMethodBase(int index,int heritance, IObjectIA *params)
	{		
		IObjectIA::CProcessResult r;

		if ( index == fid_activate )
		{
			activate();
			IObjectIA::CProcessResult r;
			r.ResultState =  NLAIAGENT::processIdle;
			r.Result = NULL;
		}

		if ( index == fid_onActivate )
		{
			onActivate();
			IObjectIA::CProcessResult r;
			r.ResultState =  NLAIAGENT::processIdle;
			r.Result = NULL;
		}

		if ( index == fid_unActivate )
		{
			unActivate();
			IObjectIA::CProcessResult r;
			r.ResultState =  NLAIAGENT::processIdle;
			r.Result = NULL;
		}

		if ( index == fid_onUnActivate )
		{
			onUnActivate();
			IObjectIA::CProcessResult r;
			r.ResultState =  NLAIAGENT::processIdle;
			r.Result = NULL;
		}

		if ( index == fid_switch )
		{
			std::vector<CStringType *> handles;
			if ( ( (NLAIAGENT::IBaseGroupType *) params)->size() )
			{
				IBaseGroupType *fw = (IBaseGroupType *) ( ((NLAIAGENT::IBaseGroupType *)params) )->getFront();
				( ((NLAIAGENT::IBaseGroupType *)params))->popFront();
				while ( fw->size() )
				{
					handles.push_back( (CStringType *) fw->getFront() );
					fw->popFront();
				}
				std::vector<CComponentHandle *> switched;
				for ( int i = 0; i < (int) handles.size(); i++)
					switched.push_back( new CComponentHandle(  handles[ i ]->getStr() , (IAgent *) getParent() ) );

				switchActor( switched, false );
			}
			IObjectIA::CProcessResult r;
			r.ResultState =  NLAIAGENT::processIdle;
			r.Result = NULL;
		}
		return CAgentScript::runMethodeMember(heritance,index,params);
	}



	IObjectIA::CProcessResult CActorScript::runMethodBase(int index,IObjectIA *params)
	{	

		index = index - IAgent::getMethodIndexSize();
/*

		if ( index < getBaseMethodCount() )
			return CAgentScript::runMethodeMember(index, params);
*/
		IObjectIA::CProcessResult r;

		char buf[1024];
		getDebugString(buf);

//		index = index - getBaseMethodCount();
		
		if ( index == fid_activate )
		{
			activate();
			IObjectIA::CProcessResult r;
			r.ResultState =  NLAIAGENT::processIdle;
			r.Result = NULL;
		}

		if ( index == fid_onActivate )
		{
			onActivate();
			IObjectIA::CProcessResult r;
			r.ResultState =  NLAIAGENT::processIdle;
			r.Result = NULL;
		}

		if ( index == fid_unActivate )
		{
			unActivate();
			IObjectIA::CProcessResult r;
			r.ResultState =  NLAIAGENT::processIdle;
			r.Result = NULL;
		}

		if ( index == fid_onUnActivate )
		{
			onUnActivate();
			IObjectIA::CProcessResult r;
			r.ResultState =  NLAIAGENT::processIdle;
			r.Result = NULL;
		}

		if ( index == fid_switch )
		{
			std::vector<CStringType *> handles;
			if ( ( (NLAIAGENT::IBaseGroupType *) params)->size() )
			{
#ifdef _DEBUG
				const char *dbg_param_type = (const char *) params->getType();
				char dbg_param_string[1024 * 8];
				params->getDebugString(dbg_param_string);
#endif
				const IObjectIA *fw = ( ((NLAIAGENT::IBaseGroupType *)params) )->getFront();
#ifdef _DEBUG
				const char *dbg_param_front_type = (const char *) fw->getType();
#endif

				( ((NLAIAGENT::IBaseGroupType *)params))->popFront();
//				while ( fw->size() )
//				{
					handles.push_back( (CStringType *) fw);
//					fw->popFront();
//				}

				std::vector<CComponentHandle *> switched;
				for ( int i = 0; i < (int) handles.size(); i++)
					switched.push_back( new CComponentHandle( handles[ i ]->getStr(), (IAgent *) getParent() ) );
				switchActor( switched, false );
			}
			IObjectIA::CProcessResult r;
			r.ResultState =  NLAIAGENT::processIdle;
			r.Result = NULL;
		}
		return r;
	}

	int CActorScript::getBaseMethodCount() const
	{
		return CAgentScript::getBaseMethodCount() + fid_last;
	}


	tQueue CActorScript::isMember(const IVarName *className,const IVarName *name,const IObjectIA &param) const
	{		

		const char *txt = name->getString();

		tQueue result = CAgentScript::isMember( className, name, param);

		if ( result.size() )
			return result;

		if ( *name == CStringVarName("activate") )
		{
			NLAIAGENT::CObjectType *r_type = new NLAIAGENT::CObjectType( new NLAIC::CIdentType( NLAIC::CIdentType::VoidType ) );
			result.push( NLAIAGENT::CIdMethod(  IAgent::getMethodIndexSize() + fid_activate, 0.0,NULL, r_type ) );
		}

		if ( *name == CStringVarName("onActivate") )
		{
			NLAIAGENT::CObjectType *r_type = new NLAIAGENT::CObjectType( new NLAIC::CIdentType( NLAIC::CIdentType::VoidType ) );
			result.push( NLAIAGENT::CIdMethod( IAgent::getMethodIndexSize() + fid_onActivate , 0.0,NULL, r_type ) );
		}


		if ( *name == CStringVarName("unActivate") )
		{
			CObjectType *r_type = new CObjectType( new NLAIC::CIdentType( NLAIC::CIdentType::VoidType ) );
			result.push( NLAIAGENT::CIdMethod( IAgent::getMethodIndexSize() + fid_onUnActivate, 0.0,NULL, r_type ) );
		}

		if ( *name == CStringVarName("onUnActivate") )
		{
			CObjectType *r_type = new CObjectType( new NLAIC::CIdentType( NLAIC::CIdentType::VoidType ) );
			result.push( NLAIAGENT::CIdMethod( IAgent::getMethodIndexSize() + fid_unActivate, 0.0,NULL, r_type ) );
		}

		if ( *name == CStringVarName("switch") )
		{
			CObjectType *r_type = new CObjectType( new NLAIC::CIdentType( NLAIC::CIdentType::VoidType ) );
			result.push( NLAIAGENT::CIdMethod( IAgent::getMethodIndexSize() + fid_switch, 0.0, NULL, r_type ) );
		}

		if(_AgentClass != NULL)
		{
			tQueue r = _AgentClass->isMember(className, name, param);
			if(r.size() != 0) return r;
		}
		return result;
	}