
/*  A Bison parser, made from grammar.yacc
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FIN	258
#define	NOMBRE	259
#define	IDENT	260
#define	PAR_G	261
#define	PAR_D	262
#define	ACCOL_G	263
#define	ACCOL_D	264
#define	CROCHER_G	265
#define	CROCHER_D	266
#define	EG_MATH	267
#define	VIRGULE	268
#define	EG_LOG	269
#define	SUP	270
#define	INF	271
#define	SUP_EG	272
#define	INF_EG	273
#define	DIFF	274
#define	OR_LOG	275
#define	AND_LOG	276
#define	NON_BIN	277
#define	OR_BIN	278
#define	AND_BIN	279
#define	XOR_BIN	280
#define	SCOP	281
#define	PLUS	282
#define	MOINS	283
#define	FOIS	284
#define	DIV	285
#define	POWER	286
#define	POINT_VI	287
#define	LEPOINT	288
#define	POINT_DEUX	289
#define	INTERROGATION	290
#define	CHAINE	291
#define	NILL	292
#define	EXEC	293
#define	ACHIEVE	294
#define	ASK	295
#define	BREAK	296
#define	TELL	297
#define	KILL	298
#define	PERROR	299
#define	EVEN	300
#define	BEGIN_GRAMMAR	301
#define	FROM	302
#define	DEFINE	303
#define	GROUP	304
#define	COMPONENT	305
#define	CONSTRUCTION	306
#define	DESTRUCTION	307
#define	MESSAGE_MANAGER	308
#define	MAESSAGELOOP	309
#define	TRIGGER	310
#define	PRECONDITION	311
#define	POSTCONDITION	312
#define	GOAL	313
#define	RETURN	314
#define	COS	315
#define	SIN	316
#define	TAN	317
#define	POW	318
#define	LN	319
#define	LOG	320
#define	FACT	321
#define	AS	322
#define	DIGITAL	323
#define	COLLECTOR	324
#define	WITH	325
#define	DO	326
#define	END	327
#define	IF	328
#define	THEN	329
#define	BEGINING	330
#define	END_GRAMMAR	331
#define	LOGICVAR	332
#define	RULE	333
#define	IA_ASSERT	334
#define	FUZZYRULE	335
#define	FUZZYRULESET	336
#define	SETS	337
#define	FUZZYVAR	338
#define	FIS	339
#define	OR	340
#define	COMMENT	341
#define	NEW	342
#define	AND	343
#define	LOCAL	344

#line 1 "grammar.yacc"

#include <malloc.h>
#include <list>
#define PARSER_NO_REDEF_YYTABLE_H_
#include "nel/ai/script/compilateur.h"
#include "nel/ai/script/constraint.h"
#include "nel/ai/script/type_def.h"
#include "nel/ai/script/object_unknown.h"
#include "nel/ai/logic/logic.h"
#include "nel/ai/fuzzy/fuzzy.h"
#include "nel/ai/logic/interpret_object_operator.h"

using  namespace NLAISCRIPT;
using  namespace NLAILOGIC;
using  namespace NLAIFUZZY;
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		368
#define	YYFLAG		-32768
#define	YYNTBASE	90

#define YYTRANSLATE(x) ((unsigned)(x) <= 344 ? yytranslate[x] : 229)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,    10,    14,    16,    21,    22,    29,    31,
    34,    35,    40,    43,    46,    47,    55,    57,    61,    63,
    65,    67,    70,    72,    74,    76,    78,    83,    87,    89,
    92,    94,    96,    98,   100,   104,   105,   106,   113,   114,
   115,   123,   124,   125,   132,   134,   135,   139,   140,   144,
   145,   149,   151,   154,   155,   162,   164,   165,   169,   172,
   174,   177,   178,   184,   188,   190,   192,   194,   196,   197,
   201,   202,   207,   209,   213,   215,   219,   222,   224,   225,
   226,   233,   235,   239,   241,   243,   245,   248,   251,   253,
   256,   259,   262,   265,   266,   267,   277,   278,   283,   285,
   286,   291,   292,   298,   299,   304,   306,   308,   310,   314,
   317,   319,   321,   322,   328,   329,   330,   340,   342,   345,
   348,   352,   354,   356,   359,   360,   366,   367,   372,   377,
   384,   386,   390,   392,   394,   399,   401,   403,   406,   407,
   412,   413,   418,   421,   422,   427,   428,   433,   434,   439,
   440,   445,   446,   451,   452,   457,   459,   460,   465,   466,
   471,   473,   475,   477,   479,   481,   483,   485,   487,   489,
   491,   493,   495,   499,   501,   503,   505,   507,   509,   511,
   513,   515,   517,   521,   525,   529,   530,   535,   537,   539,
   542,   543,   544,   551,   554,   556,   558,   559,   560,   567,
   569,   570,   574,   576,   577,   582,   586,   589,   592,   593,
   600,   603,   605,   606,   610,   613,   614,   619,   620,   624,
   625,   629,   630,   631,   638,   639,   643,   645,   646,   651,
   652,   653,   661,   662,   663,   664,   672,   674,   675,   679
};

static const short yyrhs[] = {    91,
     0,    90,    91,     0,    95,     8,   102,     9,     0,    95,
     8,     9,     0,    92,     0,    94,     6,     7,    72,     0,
     0,    94,     6,     7,    93,   146,    72,     0,    53,     0,
    96,    98,     0,     0,    47,     5,    97,    34,     0,    48,
    99,     0,    48,     5,     0,     0,    49,    16,   178,   100,
    13,   101,    15,     0,     5,     0,   101,    13,     5,     0,
   103,     0,   102,     0,   104,     0,   104,   103,     0,   105,
     0,   130,     0,   107,     0,   106,     0,    50,    34,   168,
    72,     0,    50,    34,    72,     0,   108,     0,   108,   107,
     0,   109,     0,   110,     0,   116,     0,   113,     0,    86,
    34,    36,     0,     0,     0,    56,    34,   111,   119,   112,
    72,     0,     0,     0,    58,   114,    34,     5,   115,    32,
    72,     0,     0,     0,    57,    34,   117,   119,   118,    72,
     0,   121,     0,     0,   121,   120,   119,     0,     0,   124,
   122,    32,     0,     0,   125,   123,    32,     0,   146,     0,
    35,     5,     0,     0,    35,     6,     5,   126,   127,     7,
     0,   129,     0,     0,   129,   128,   127,     0,    35,     5,
     0,   131,     0,   130,   131,     0,     0,   133,   134,   146,
   132,    72,     0,   133,   134,    72,     0,     5,     0,    52,
     0,   135,     0,   137,     0,     0,     6,   136,     7,     0,
     0,     6,   138,   139,     7,     0,   140,     0,   139,    13,
   101,     0,   101,     0,   140,    32,   101,     0,   141,   144,
     0,     5,     0,     0,     0,     5,   142,    16,     5,   143,
    15,     0,   145,     0,   144,    13,   145,     0,     5,     0,
   147,     0,   162,     0,   146,   147,     0,   146,   162,     0,
    32,     0,   151,    32,     0,   148,    32,     0,   153,    32,
     0,   161,    32,     0,     0,     0,     5,   149,    28,    15,
    67,     6,     5,   150,     7,     0,     0,   192,   152,    12,
   179,     0,   155,     0,     0,   153,    33,   154,   155,     0,
     0,   158,     6,   156,   160,   159,     0,     0,   158,     6,
   157,   159,     0,   192,     0,     7,     0,   179,     0,   160,
    13,   179,     0,    59,   179,     0,   165,     0,   163,     0,
     0,   179,    35,   164,   146,    72,     0,     0,     0,    73,
   179,    35,   166,   146,    34,   167,   146,    72,     0,    32,
     0,   169,    32,     0,   168,    32,     0,   168,   169,    32,
     0,   170,     0,   174,     0,   172,    15,     0,     0,   172,
    13,    89,   171,    15,     0,     0,     5,   173,    16,    36,
     0,    69,    16,   178,    15,     0,    69,    16,   178,    13,
   175,    15,     0,   176,     0,   175,    13,   176,     0,     5,
     0,   177,     0,   191,    33,    33,   191,     0,    36,     0,
   188,     0,    28,   188,     0,     0,   179,   180,    27,   188,
     0,     0,   179,   181,    28,   188,     0,    22,   188,     0,
     0,   179,   182,    19,   188,     0,     0,   179,   183,    16,
   188,     0,     0,   179,   184,    15,   188,     0,     0,   179,
   185,    17,   188,     0,     0,   179,   186,    18,   188,     0,
     0,   179,   187,    14,   188,     0,   191,     0,     0,   188,
   189,    29,   191,     0,     0,   188,   190,    30,   191,     0,
    38,     0,    39,     0,    40,     0,    41,     0,    44,     0,
    42,     0,    43,     0,    45,     0,    37,     0,     4,     0,
   192,     0,   153,     0,     6,   179,     7,     0,   193,     0,
   197,     0,   195,     0,   213,     0,   209,     0,   202,     0,
   219,     0,   214,     0,     5,     0,   153,    33,     5,     0,
   191,    33,     5,     0,   192,    33,     5,     0,     0,    10,
   194,   196,    11,     0,    36,     0,   179,     0,   196,   179,
     0,     0,     0,    87,   198,   201,     6,   199,   200,     0,
   160,     7,     0,     7,     0,     5,     0,     0,     0,    78,
   205,   203,    74,   204,   207,     0,   205,     0,     0,    73,
   206,   207,     0,   209,     0,     0,   209,   208,    88,   207,
     0,   209,    85,   207,     0,    79,   209,     0,    31,     5,
     0,     0,    35,     6,     5,   210,   211,     7,     0,    35,
     5,     0,   179,     0,     0,   179,   212,   211,     0,    35,
     5,     0,     0,    81,     8,   215,   216,     0,     0,   219,
   217,     9,     0,     0,   219,   218,   216,     0,     0,     0,
    80,   222,   220,    74,   221,   224,     0,     0,    73,   223,
   224,     0,   226,     0,     0,   226,   225,    88,   224,     0,
     0,     0,     6,     5,   227,    84,     5,   228,     7,     0,
     0,     0,     0,    83,     0,     5,     0,    82,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   179,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    50,    54,    57,    65,    71,    74,    78,    84,    90,   100,
   103,   119,   121,   122,   141,   144,   147,   148,   150,   151,
   154,   155,   158,   159,   160,   170,   173,   174,   177,   178,
   182,   183,   184,   185,   189,   199,   204,   224,   227,   233,
   248,   252,   257,   278,   280,   284,   289,   295,   300,   300,
   305,   305,   366,   374,   381,   388,   392,   397,   399,   407,
   408,   411,   470,   470,   531,   539,   549,   550,   553,   558,
   563,   567,   573,   574,   577,   578,   581,   585,   590,   595,
   602,   605,   606,   609,   616,   617,   618,   619,   622,   623,
   624,   625,   632,   639,   644,   652,   654,   664,   676,   677,
   682,   685,   692,   693,   701,   703,   710,   725,   729,   737,
   744,   745,   748,   754,   760,   767,   772,   778,   779,   780,
   781,   784,   785,   789,   790,   796,   798,   804,   819,   820,
   823,   824,   827,   828,   831,   833,   836,   844,   850,   862,
   867,   878,   883,   894,   904,   910,   921,   926,   936,   941,
   951,   956,   966,   971,   976,   984,   988,   999,  1005,  1017,
  1025,  1031,  1036,  1041,  1046,  1051,  1056,  1061,  1066,  1071,
  1077,  1087,  1092,  1096,  1100,  1104,  1108,  1112,  1116,  1120,
  1124,  1131,  1140,  1152,  1160,  1178,  1183,  1186,  1192,  1196,
  1202,  1207,  1212,  1213,  1217,  1224,  1231,  1237,  1241,  1252,
  1255,  1260,  1271,  1275,  1279,  1283,  1290,  1296,  1308,  1317,
  1327,  1334,  1340,  1347,  1349,  1359,  1364,  1366,  1371,  1374,
  1379,  1384,  1390,  1394,  1401,  1406,  1411,  1415,  1419,  1422,
  1440,  1445,  1451,  1456,  1461,  1465,  1471,  1475,  1480,  1482
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FIN","NOMBRE",
"IDENT","PAR_G","PAR_D","ACCOL_G","ACCOL_D","CROCHER_G","CROCHER_D","EG_MATH",
"VIRGULE","EG_LOG","SUP","INF","SUP_EG","INF_EG","DIFF","OR_LOG","AND_LOG","NON_BIN",
"OR_BIN","AND_BIN","XOR_BIN","SCOP","PLUS","MOINS","FOIS","DIV","POWER","POINT_VI",
"LEPOINT","POINT_DEUX","INTERROGATION","CHAINE","NILL","EXEC","ACHIEVE","ASK",
"BREAK","TELL","KILL","PERROR","EVEN","BEGIN_GRAMMAR","FROM","DEFINE","GROUP",
"COMPONENT","CONSTRUCTION","DESTRUCTION","MESSAGE_MANAGER","MAESSAGELOOP","TRIGGER",
"PRECONDITION","POSTCONDITION","GOAL","RETURN","COS","SIN","TAN","POW","LN",
"LOG","FACT","AS","DIGITAL","COLLECTOR","WITH","DO","END","IF","THEN","BEGINING",
"END_GRAMMAR","LOGICVAR","RULE","IA_ASSERT","FUZZYRULE","FUZZYRULESET","SETS",
"FUZZYVAR","FIS","OR","COMMENT","NEW","AND","LOCAL","program","DefinitionClass",
"MessageRun","@1","MessageManager","CorpDeDefinition","HeritageDeType","@2",
"EnteteDeDefinition","DefinitionDeGroup","@3","CParam","DefinitionDeProgram",
"BlocDeDefinition","UnBloc","Register","RegistDesAttributs","RegisterOperator",
"OpBloc","OpComment","PreCondition","@4","@5","Goal","@6","@7","PostCondition",
"@8","@9","OperatorCond","@10","SingleOpCond","@11","@12","BooleanCond","FirstOrderPattern",
"@13","OpLogicVarSet","@14","OpLogicVar","BlocPourLesCode","BlocAvecCode","@15",
"Methode","Argument","ArgumentVide","@16","ArgumentListe","@17","ListesDeVariables",
"DesParams","TypeOfParam","@18","@19","DeclarationVariables","NonDeVariable",
"DuCode","Code","StaticCast","@20","@21","Affectation","@22","AppelleDeFonction",
"@23","AppelleDeFoncDirect","@24","@25","NonDeFonction","CallFunction","Prametre",
"RetourDeFonction","Evaluation","EvaluationSimpleState","@26","EvaluationState",
"@27","@28","TypeDeDeclaration","RegisterAnyVar","RegisterTypeDef","@29","TypeDeComp",
"@30","RegisterCollector","MessageType","DefMessage","Borne","Nom","Expression",
"@31","@32","@33","@34","@35","@36","@37","@38","Term","@39","@40","Facteur",
"Variable","List","@41","ChaineDeCaractaire","ElementList","NewObject","@42",
"@43","PrametreNew","NewObjectName","Rule","@44","@45","RuleCondition","@46",
"Clause","@47","FactPattern","@48","LogicVarSet","@49","LogicVar","FuzzyRuleSet",
"@50","ListFuzzyRule","@51","@52","FuzzyRule","@53","@54","FuzzyCondition","@55",
"FuzzyClause","@56","FuzzyFactPattern","@57","@58", NULL
};
#endif

static const short yyr1[] = {     0,
    90,    90,    91,    91,    91,    92,    93,    92,    94,    95,
    97,    96,    98,    98,   100,    99,   101,   101,   102,   102,
   103,   103,   104,   104,   104,   105,   106,   106,   107,   107,
   108,   108,   108,   108,   109,   111,   112,   110,   114,   115,
   113,   117,   118,   116,   119,   120,   119,   122,   121,   123,
   121,   121,   124,   126,   125,   127,   128,   127,   129,   130,
   130,   132,   131,   131,   133,   133,   134,   134,   136,   135,
   138,   137,   139,   139,   140,   140,   101,   141,   142,   143,
   141,   144,   144,   145,   146,   146,   146,   146,   147,   147,
   147,   147,   147,   149,   150,   148,   152,   151,   153,   154,
   153,   156,   155,   157,   155,   158,   159,   160,   160,   161,
   162,   162,   164,   163,   166,   167,   165,   168,   168,   168,
   168,   169,   169,   170,   171,   170,   173,   172,   174,   174,
   175,   175,   176,   176,   177,   178,   179,   179,   180,   179,
   181,   179,   179,   182,   179,   183,   179,   184,   179,   185,
   179,   186,   179,   187,   179,   188,   189,   188,   190,   188,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   192,   192,   192,   192,   194,   193,   195,   196,   196,
   198,   199,   197,   200,   200,   201,   203,   204,   202,    -1,
   206,   205,   207,   208,   207,   207,    -1,    -1,   210,   209,
   209,   211,   212,   211,   213,   215,   214,   217,   216,   218,
   216,   220,   221,   219,   223,   222,   224,   225,   224,   227,
   228,   226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1
};

static const short yyr2[] = {     0,
     1,     2,     4,     3,     1,     4,     0,     6,     1,     2,
     0,     4,     2,     2,     0,     7,     1,     3,     1,     1,
     1,     2,     1,     1,     1,     1,     4,     3,     1,     2,
     1,     1,     1,     1,     3,     0,     0,     6,     0,     0,
     7,     0,     0,     6,     1,     0,     3,     0,     3,     0,
     3,     1,     2,     0,     6,     1,     0,     3,     2,     1,
     2,     0,     5,     3,     1,     1,     1,     1,     0,     3,
     0,     4,     1,     3,     1,     3,     2,     1,     0,     0,
     6,     1,     3,     1,     1,     1,     2,     2,     1,     2,
     2,     2,     2,     0,     0,     9,     0,     4,     1,     0,
     4,     0,     5,     0,     4,     1,     1,     1,     3,     2,
     1,     1,     0,     5,     0,     0,     9,     1,     2,     2,
     3,     1,     1,     2,     0,     5,     0,     4,     4,     6,
     1,     3,     1,     1,     4,     1,     1,     2,     0,     4,
     0,     4,     2,     0,     4,     0,     4,     0,     4,     0,
     4,     0,     4,     0,     4,     1,     0,     4,     0,     4,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     3,     3,     0,     4,     1,     1,     2,
     0,     0,     6,     2,     1,     1,     0,     0,     6,     1,
     0,     3,     1,     0,     4,     3,     2,     2,     0,     6,
     2,     1,     0,     3,     2,     0,     4,     0,     3,     0,
     3,     0,     0,     6,     0,     3,     1,     0,     4,     0,
     0,     7,     0,     0,     0,     7,     1,     0,     3,     1
};

static const short yydefact[] = {     0,
     0,     9,     0,     1,     5,     0,     0,     0,    11,     2,
     0,     0,     0,    10,     0,     7,    65,     4,     0,    66,
     0,     0,    39,     0,     0,    19,    21,    23,    26,    25,
    29,    31,    32,    34,    33,    24,    60,     0,    14,     0,
    13,    12,     6,     0,     0,    36,    42,     0,     0,     3,
    22,    30,    61,    69,     0,    67,    68,     0,   170,   182,
     0,   186,     0,     0,    89,     0,   188,   169,   161,   162,
   163,   164,   166,   167,   165,   168,     0,     0,     0,     0,
     0,   191,     0,    85,     0,     0,   172,    99,     0,     0,
    86,   112,   111,   139,   137,   156,   171,   174,   176,   175,
   179,   178,   177,   181,   180,   127,   118,     0,    28,     0,
     0,   122,     0,   123,     0,     0,     0,    35,     0,     0,
    64,    62,   136,    15,     0,   182,   172,   139,   171,     0,
   143,   138,   211,     0,   110,   139,   201,   197,   225,   222,
   216,     0,     8,    87,    88,    91,    90,    92,   100,   102,
    93,   113,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   120,    27,     0,
   119,     0,   124,     0,    37,    46,    48,    50,    52,    43,
    40,    70,    17,    75,     0,    73,     0,     0,     0,     0,
   173,   189,     0,   209,   115,     0,     0,     0,     0,     0,
   196,     0,   183,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   184,   185,     0,
     0,     0,   121,   125,   211,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    72,     0,     0,    84,    77,    82,
    63,     0,     0,   187,   190,     0,     0,     0,   202,   203,
   198,     0,   226,   227,   223,   217,   218,   192,   101,     0,
     0,   108,   107,   105,     0,   140,   142,   145,   147,   149,
   151,   153,   155,   158,   160,    98,   128,     0,   129,     0,
   209,    38,    47,    49,    51,    44,     0,     0,    18,    74,
    76,     0,     0,     0,   213,     0,     0,   211,     0,     0,
     0,   230,     0,     0,     0,     0,     0,     0,   103,   114,
   133,     0,   131,   134,     0,   126,     0,    41,    80,    83,
    16,     0,     0,   210,   116,   206,     0,   199,     0,     0,
   224,   219,   221,   195,     0,   193,   109,     0,   130,     0,
     0,     0,    56,     0,    95,   214,     0,   205,     0,   229,
   194,   132,     0,    59,    55,     0,    81,     0,     0,   231,
   135,    58,    96,   117,     0,   232,     0,     0
};

static const short yydefgoto[] = {     3,
     4,     5,    44,     6,     7,     8,    15,    14,    41,   189,
   184,    25,    26,    27,    28,    29,    30,    31,    32,    33,
   115,   227,    34,    48,   232,    35,   116,   231,   175,   228,
   176,   229,   230,   177,   178,   317,   342,   356,   343,    36,
    37,   188,    38,    55,    56,   119,    57,   120,   185,   186,
   187,   233,   344,   239,   240,   179,    84,    85,   125,   358,
    86,   165,   127,   204,    88,   205,   206,    89,   264,   261,
    90,    91,    92,   207,    93,   247,   347,   110,   111,   112,
   280,   113,   166,   114,   312,   313,   314,   124,    94,   153,
   154,   155,   156,   157,   158,   159,   160,    95,   161,   162,
    96,   129,    98,   130,    99,   193,   100,   142,   307,   336,
   202,   101,   197,   301,   138,   196,   249,   300,   102,   246,
   296,   323,   103,   104,   200,   256,   305,   306,   105,   199,
   304,   140,   198,   253,   303,   254,   329,   365
};

static const short yypact[] = {   -15,
    26,-32768,    15,-32768,-32768,    41,    46,    70,-32768,-32768,
    91,     9,    11,-32768,    96,    72,-32768,-32768,   121,-32768,
   123,   126,-32768,   134,   144,-32768,    50,-32768,-32768,-32768,
   -23,-32768,-32768,-32768,-32768,     4,-32768,   166,-32768,   167,
-32768,-32768,-32768,   514,    45,-32768,-32768,   147,   146,-32768,
-32768,-32768,-32768,   189,   202,-32768,-32768,   160,-32768,   169,
   682,-32768,   693,   693,-32768,   127,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   682,   682,   125,   128,
   191,-32768,   286,-32768,   168,   178,   119,-32768,   205,   181,
-32768,-32768,-32768,   174,   132,   182,    31,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   198,-32768,    71,
   184,-32768,    81,-32768,   571,   571,   213,-32768,   215,   220,
-32768,   514,-32768,-32768,   192,-32768,   193,   785,    64,   682,
   132,   132,-32768,   222,   283,   249,-32768,-32768,-32768,-32768,
-32768,   223,-32768,-32768,-32768,-32768,-32768,-32768,   224,   225,
-32768,-32768,   204,   207,   214,   232,   221,   233,   231,   237,
   229,   230,   247,   254,   242,   246,   160,-32768,-32768,   238,
-32768,   180,-32768,   161,-32768,   199,-32768,-32768,   514,-32768,
-32768,-32768,    20,   260,    17,   244,   273,   216,   272,   271,
-32768,   283,    47,-32768,-32768,   252,   219,   288,   235,   226,
-32768,   289,-32768,   693,   682,   300,   514,   693,   693,   693,
   693,   693,   693,   693,   693,   693,   693,-32768,-32768,   682,
   276,   108,-32768,-32768,   281,   311,   248,   571,   287,   301,
   262,   303,   316,   331,-32768,   220,   220,-32768,   324,-32768,
-32768,   220,   274,-32768,   283,   682,   514,   165,-32768,    34,
-32768,   333,-32768,   251,-32768,-32768,   263,-32768,   307,   182,
    33,   283,-32768,-32768,   343,   132,   132,   132,   132,   132,
   132,   132,   132,   182,   182,   283,-32768,   746,-32768,   327,
   309,-32768,-32768,-32768,-32768,-32768,   278,   341,-32768,   260,
   260,   273,   111,   345,   131,   347,   400,-32768,   252,   264,
   252,-32768,   267,   288,   348,   226,   628,   682,-32768,-32768,
    87,   116,-32768,-32768,   323,-32768,   325,-32768,-32768,-32768,
-32768,   356,   682,-32768,-32768,-32768,   252,-32768,   279,   288,
-32768,-32768,-32768,-32768,   102,-32768,   283,   746,-32768,    12,
   357,   361,   334,   355,-32768,-32768,   514,-32768,   367,-32768,
-32768,-32768,   693,-32768,-32768,   325,-32768,   369,   457,-32768,
   182,-32768,-32768,-32768,   370,-32768,   374,-32768
};

static const short yypgoto[] = {-32768,
   386,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -132,-32768,   363,-32768,-32768,-32768,   360,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -112,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,    36,-32768,-32768,-32768,
   358,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   101,   -43,   -80,-32768,-32768,-32768,
-32768,-32768,   -44,-32768,   194,-32768,-32768,-32768,   135,    88,
-32768,   -78,-32768,-32768,-32768,-32768,-32768,-32768,   290,-32768,
-32768,-32768,-32768,-32768,-32768,    59,-32768,   234,   -51,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -35,-32768,-32768,
  -197,   -42,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -278,-32768,  -188,-32768,
    76,-32768,-32768,-32768,-32768,    97,-32768,-32768,  -194,-32768,
-32768,-32768,-32768,  -282,-32768,-32768,-32768,-32768
};


#define	YYLAST		833


static const short yytable[] = {    87,
    83,    97,   144,   180,   145,   257,   260,   250,    17,   128,
    87,   122,    97,    17,   367,    39,   218,    18,   274,   275,
   326,   331,   328,   235,   -78,   135,   136,   131,   132,   236,
     9,     1,    21,    22,    23,   -79,  -106,     2,    87,   263,
    97,   144,   -97,   145,   353,   308,    11,   350,   348,   106,
    59,   126,    61,    12,    17,    20,    62,   244,    19,    40,
    20,     1,    24,   164,    21,    22,    23,     2,    63,  -106,
    87,    87,    97,    97,    64,   106,   107,    87,   192,    97,
   315,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,  -182,   172,    24,   173,   164,    16,   144,    19,
   145,    20,   168,   290,   291,    21,    22,    23,   351,   293,
   250,   257,   250,   108,   308,   283,   109,    13,   299,  -182,
   278,  -204,   279,   234,    79,   321,    80,    81,   338,    42,
   339,   133,   134,    82,    87,    24,    97,  -212,   250,   108,
   315,   245,   169,    43,  -154,  -148,  -146,  -150,  -152,  -144,
   148,   149,    50,   262,    45,   361,    46,  -139,  -141,    47,
  -157,  -159,    87,   265,    97,   225,   226,    49,   276,   298,
   134,    54,   266,   267,   268,   269,   270,   271,   272,   273,
   117,   118,    58,    87,   144,    97,   145,  -154,  -148,  -146,
  -150,  -152,  -144,   -71,   295,   123,   -94,   137,   141,   146,
   139,  -141,    87,   297,    97,    59,    60,    61,   152,   147,
   150,    62,   151,   167,   163,   171,   144,   181,   145,   190,
    87,   182,    97,    63,   183,   149,   194,   201,   203,    64,
   208,  -104,   210,    65,   209,   212,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,   211,   214,   213,
   215,   218,    87,   220,    97,   262,   337,   216,   219,   217,
    77,   221,  -154,  -148,  -146,  -150,  -152,  -144,   224,   223,
   -45,   295,   234,   121,    78,   237,  -141,   238,   144,    79,
   145,    80,    81,   195,   242,   243,   248,   241,    82,    59,
    60,    61,   251,   252,   258,    62,  -154,  -148,  -146,  -150,
  -152,  -144,    87,   359,    97,    80,   263,    63,   255,  -139,
  -141,   277,   -53,    64,    87,   281,    97,    65,   284,   282,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,   288,   285,   286,   287,   289,   292,   302,  -228,   -99,
   294,   316,  -220,   -54,    77,   319,    59,    60,    61,   318,
   322,   327,    62,   324,   330,   340,   332,   143,    78,   341,
   345,   354,   349,    79,    63,    80,    81,   355,   -57,   357,
    64,   360,    82,   368,    65,   363,   366,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    10,    51,
    52,   362,   320,    53,   335,   309,   352,   259,   346,   170,
   222,    77,   333,    59,    60,    61,     0,     0,     0,    62,
     0,     0,     0,     0,   310,    78,     0,     0,     0,     0,
    79,    63,    80,    81,     0,     0,     0,    64,     0,    82,
     0,    65,     0,   325,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    77,     0,
    59,    60,    61,     0,     0,     0,    62,     0,     0,     0,
     0,     0,    78,     0,     0,     0,     0,    79,    63,    80,
    81,     0,     0,     0,    64,     0,    82,     0,    65,     0,
     0,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    77,     0,    59,    60,    61,
     0,     0,     0,    62,     0,     0,     0,     0,   364,    78,
     0,     0,     0,     0,    79,    63,    80,    81,     0,     0,
     0,    64,     0,    82,     0,    65,     0,     0,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    77,     0,    59,    60,    61,     0,     0,     0,
    62,     0,     0,     0,     0,     0,    78,     0,     0,     0,
     0,    79,    63,    80,    81,     0,     0,     0,    64,     0,
    82,     0,    65,     0,     0,   174,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    77,
     0,    59,   126,    61,   334,     0,     0,    62,     0,     0,
     0,     0,     0,    78,     0,     0,     0,     0,    79,    63,
    80,    81,     0,     0,     0,    64,     0,    82,     0,     0,
     0,     0,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    59,   126,    61,     0,     0,
     0,    62,     0,     0,     0,     0,    59,   126,    61,     0,
     0,     0,    62,    63,     0,    79,     0,    80,    81,    64,
     0,     0,     0,     0,    82,     0,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    59,
   311,    61,     0,     0,     0,    62,     0,     0,     0,    79,
     0,    80,    81,     0,     0,     0,     0,     0,    82,     0,
    79,     0,    80,    81,     0,     0,     0,     0,     0,    82,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,   191,     0,     0,     0,     0,     0,     0,  -154,  -148,
  -146,  -150,  -152,  -144,     0,     0,     0,     0,     0,     0,
     0,     0,  -141,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    79,     0,    80,    81,     0,     0,     0,
     0,     0,    82
};

static const short yycheck[] = {    44,
    44,    44,    83,   116,    83,   200,   204,   196,     5,    61,
    55,    55,    55,     5,     0,     5,     5,     9,   216,   217,
   299,   304,   301,     7,     5,    77,    78,    63,    64,    13,
     5,    47,    56,    57,    58,    16,     6,    53,    83,     7,
    83,   122,    12,   122,    33,    13,     6,   330,   327,     5,
     4,     5,     6,     8,     5,    52,    10,    11,    50,    49,
    52,    47,    86,    33,    56,    57,    58,    53,    22,     6,
   115,   116,   115,   116,    28,     5,    32,   122,   130,   122,
   278,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,     6,    13,    86,    15,    33,     7,   179,    50,
   179,    52,    32,   236,   237,    56,    57,    58,     7,   242,
   299,   306,   301,    69,    13,   228,    72,    48,    85,    33,
    13,    88,    15,    13,    78,    15,    80,    81,    13,    34,
    15,     5,     6,    87,   179,    86,   179,     7,   327,    69,
   338,   193,    72,    72,    14,    15,    16,    17,    18,    19,
    32,    33,     9,   205,    34,   353,    34,    27,    28,    34,
    29,    30,   207,   207,   207,     5,     6,    34,   220,     5,
     6,     6,   208,   209,   210,   211,   212,   213,   214,   215,
    34,    36,    16,   228,   265,   228,   265,    14,    15,    16,
    17,    18,    19,     5,   246,    36,    28,    73,     8,    32,
    73,    28,   247,   247,   247,     4,     5,     6,    35,    32,
     6,    10,    32,    16,    33,    32,   297,     5,   297,    28,
   265,     7,   265,    22,     5,    33,     5,     5,     5,    28,
    27,     7,    19,    32,    28,    15,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    16,    18,    17,
    14,     5,   297,    12,   297,   307,   308,    29,     5,    30,
    59,    16,    14,    15,    16,    17,    18,    19,    89,    32,
    72,   323,    13,    72,    73,    32,    28,     5,   359,    78,
   359,    80,    81,    35,    13,    15,    35,    72,    87,     4,
     5,     6,    74,     6,     6,    10,    14,    15,    16,    17,
    18,    19,   347,   347,   347,    80,     7,    22,    74,    27,
    28,    36,    32,    28,   359,     5,   359,    32,    32,    72,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    16,    32,    72,    32,     5,    13,     5,    88,    33,
    67,    15,    80,    35,    59,     5,     4,     5,     6,    72,
     6,    88,    10,     7,    88,    33,     9,    72,    73,    35,
     5,     5,    84,    78,    22,    80,    81,     7,    35,    15,
    28,     5,    87,     0,    32,     7,     7,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,     3,    27,
    31,   356,   292,    36,   307,   261,   338,   204,   323,   110,
   167,    59,   306,     4,     5,     6,    -1,    -1,    -1,    10,
    -1,    -1,    -1,    -1,    72,    73,    -1,    -1,    -1,    -1,
    78,    22,    80,    81,    -1,    -1,    -1,    28,    -1,    87,
    -1,    32,    -1,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
     4,     5,     6,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,    -1,    73,    -1,    -1,    -1,    -1,    78,    22,    80,
    81,    -1,    -1,    -1,    28,    -1,    87,    -1,    32,    -1,
    -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    -1,     4,     5,     6,
    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    72,    73,
    -1,    -1,    -1,    -1,    78,    22,    80,    81,    -1,    -1,
    -1,    28,    -1,    87,    -1,    32,    -1,    -1,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    59,    -1,     4,     5,     6,    -1,    -1,    -1,
    10,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
    -1,    78,    22,    80,    81,    -1,    -1,    -1,    28,    -1,
    87,    -1,    32,    -1,    -1,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
    -1,     4,     5,     6,     7,    -1,    -1,    10,    -1,    -1,
    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    78,    22,
    80,    81,    -1,    -1,    -1,    28,    -1,    87,    -1,    -1,
    -1,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     4,     5,     6,    -1,    -1,
    -1,    10,    -1,    -1,    -1,    -1,     4,     5,     6,    -1,
    -1,    -1,    10,    22,    -1,    78,    -1,    80,    81,    28,
    -1,    -1,    -1,    -1,    87,    -1,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,
     5,     6,    -1,    -1,    -1,    10,    -1,    -1,    -1,    78,
    -1,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,    -1,
    78,    -1,    80,    81,    -1,    -1,    -1,    -1,    -1,    87,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,     7,    -1,    -1,    -1,    -1,    -1,    -1,    14,    15,
    16,    17,    18,    19,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    78,    -1,    80,    81,    -1,    -1,    -1,
    -1,    -1,    87
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
CCompilateur::yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 51 "grammar.yacc"
{
								
							;
    break;}
case 3:
#line 61 "grammar.yacc"
{						
								if(!computContraint()) return false;
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 4:
#line 68 "grammar.yacc"
{
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 7:
#line 80 "grammar.yacc"
{
								initMessageManager();
							;
    break;}
case 8:
#line 85 "grammar.yacc"
{
								if(!endMessageManager()) return 0;
							;
    break;}
case 9:
#line 91 "grammar.yacc"
{
								if(_ResultCompile != NULL) 
								{
									yyerror("an MessageManager block had all ready declared");
									return 0;
								}								
							;
    break;}
case 11:
#line 104 "grammar.yacc"
{
								NLAIAGENT::CStringVarName interfName(LastyyText[1]);																																
								try
								{	
									NLAIC::CIdentType id = getTypeOfClass(interfName);
									_SelfClass.push((IClassInterpret *)(((CClassInterpretFactory *)id.getFactory())->getClass()->newInstance()));
									((IClassInterpret *)_SelfClass.get())->setInheritanceName(interfName);
								}
								catch(NLAIE::IException &a)
								{									
									yyerror((char *)a.what());
									return 0;
								}
							;
    break;}
case 14:
#line 123 "grammar.yacc"
{
								try
								{
									NLAIC::CIdentType id(LastyyText[1]);
									char text[1024*4];
									sprintf(text,"class '%s' all ready exist",LastyyText[1]);
									yyerror(text);
									return 0;
								}
								catch(NLAIE::IException &)
								{
									( (IClassInterpret *) _SelfClass.get() )->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
									( (IClassInterpret *) _SelfClass.get() )->buildVTable();
									RegisterClass();
								}
							;
    break;}
case 15:
#line 142 "grammar.yacc"
{
								((IClassInterpret *)_SelfClass.get())->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
							;
    break;}
case 25:
#line 161 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->buildLogicTables();
								}
							;
    break;}
case 35:
#line 192 "grammar.yacc"
{
								char *txt1 = LastyyText[0];
								char *txt2 = LastyyText[1];
							;
    break;}
case 36:
#line 200 "grammar.yacc"
{
								initParam()
							;
    break;}
case 37:
#line 204 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderCond( _LastAsserts.front(), _LastLogicParams.front() );
										_LastAsserts.pop_front();
										_LastLogicParams.pop_front();
									}

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
							;
    break;}
case 39:
#line 228 "grammar.yacc"
{
								if ( !classIsAnOperator() )
								 	return 0;
							;
    break;}
case 40:
#line 234 "grammar.yacc"
{
								if ( _Goal ) 
								{
									_Goal->release();
									_Goal = NULL;
								}
								
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setGoal( NLAIAGENT::CStringVarName( LastyyText[1] ) );
								}
							;
    break;}
case 42:
#line 253 "grammar.yacc"
{
								initParam()
							;
    break;}
case 43:
#line 257 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderConc( _LastAsserts.front(), _LastLogicParams.front() );
										_LastAsserts.pop_front();
										_LastLogicParams.pop_front();
									}

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
							;
    break;}
case 45:
#line 281 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 46:
#line 285 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 47:
#line 289 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 48:
#line 296 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 50:
#line 301 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 52:
#line 306 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
//										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_LastCodeBranche.push_back( (IOpCode *) listCode );
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}							

/*								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}				
*/				

							;
    break;}
case 53:
#line 367 "grammar.yacc"
{
							char *param_name = LastyyText[1];
							_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
						;
    break;}
case 54:
#line 376 "grammar.yacc"
{
							const char *assert_name = LastyyText[1];
							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );
						;
    break;}
case 55:
#line 382 "grammar.yacc"
{
								for (int i = 0; i < 20; i++); // To put breakpoints for debugging...
						;
    break;}
case 56:
#line 389 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 57:
#line 393 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 59:
#line 400 "grammar.yacc"
{
							char *var_name = LastyyText[1];
							_LastLogicParams.back().push_back( new NLAIAGENT::CStringVarName( var_name ) );
						;
    break;}
case 62:
#line 413 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}

								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}								
								if(!caseRunMsg()) return false;
							;
    break;}
case 64:
#line 472 "grammar.yacc"
{	
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}
								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}
								if(!caseRunMsg()) return false;

							;
    break;}
case 65:
#line 532 "grammar.yacc"
{				
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 66:
#line 540 "grammar.yacc"
{
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 69:
#line 554 "grammar.yacc"
{								
								initParam();
							;
    break;}
case 70:
#line 558 "grammar.yacc"
{
								if(!registerMethod()) return false;
							;
    break;}
case 71:
#line 564 "grammar.yacc"
{
								initParam();
							;
    break;}
case 72:
#line 568 "grammar.yacc"
{
								registerMethod();
							;
    break;}
case 78:
#line 586 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[0]);
								_BaseObjectDef = false;
							;
    break;}
case 79:
#line 591 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 80:
#line 596 "grammar.yacc"
{
								_LastBaseObjectDef = NLAIAGENT::CStringVarName(LastyyText[1]);
								_BaseObjectDef = true;

							;
    break;}
case 84:
#line 610 "grammar.yacc"
{
								if(!setParamVarName()) return 0;
							;
    break;}
case 92:
#line 626 "grammar.yacc"
{
								_LastStringParam.back()->release();
								_LastStringParam.pop_back();
								_Param.back()->release();
								_Param.pop_back();								
							;
    break;}
case 93:
#line 634 "grammar.yacc"
{
								_LastBloc->addCode((new CHaltOpCode));
							;
    break;}
case 94:
#line 640 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 95:
#line 648 "grammar.yacc"
{					
								NLAIAGENT::CStringVarName x(LastyyText[1]);			
								if(!castVariable(_LastString,x)) return false;
							;
    break;}
case 97:
#line 655 "grammar.yacc"
{								
								std::list<NLAISCRIPT::CStringType>::iterator i = _LasVarStr.begin();
								_LasAffectationVarStr.clear();
								while(i != _LasVarStr.end())
								{
									_LasAffectationVarStr.push_back(*i++);
								}												
							;
    break;}
case 98:
#line 665 "grammar.yacc"
{
								if(!affectation()) 
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 100:
#line 678 "grammar.yacc"
{
								
							;
    break;}
case 102:
#line 686 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 104:
#line 694 "grammar.yacc"
{								
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 106:
#line 704 "grammar.yacc"
{
								nameMethodeProcessing();
							;
    break;}
case 107:
#line 711 "grammar.yacc"
{	
								_ExpressionType = _ExpressionTypeTmp.back();
								_ExpressionTypeTmp.pop_back();								
								if(!callFunction())
								{
									_FromStack.pop_back();
									return 0;	
								}
								_FromStack.pop_back();
							;
    break;}
case 108:
#line 726 "grammar.yacc"
{
								pushParamExpression();								
							;
    break;}
case 109:
#line 731 "grammar.yacc"
{
								pushParamExpression();
							;
    break;}
case 110:
#line 739 "grammar.yacc"
{
								if(!typeOfMethod()) return false;
							;
    break;}
case 113:
#line 750 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 114:
#line 755 "grammar.yacc"
{
								interrogationEnd();
							;
    break;}
case 115:
#line 763 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 116:
#line 768 "grammar.yacc"
{								
								ifInterrogationPoint()
							;
    break;}
case 117:
#line 773 "grammar.yacc"
{
								ifInterrogationEnd();
							;
    break;}
case 125:
#line 791 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Local = true;								
							;
    break;}
case 127:
#line 799 "grammar.yacc"
{								
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
								_LastRegistered = ((IClassInterpret *)_SelfClass.get())->registerComponent(_LastString);
							;
    break;}
case 128:
#line 805 "grammar.yacc"
{
								if(((IClassInterpret *)_SelfClass.get())->getComponent(NLAIAGENT::CStringVarName(LastyyText[1])) == NULL)
								{
									CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);
									c->ObjectName = new NLAIAGENT::CStringVarName(LastyyText[1]);									
								}
								else
								{
									yyerror("variable all ready declared in the Register components");
									return 0;			
								}
							;
    break;}
case 137:
#line 837 "grammar.yacc"
{	
								if(_FacteurEval)
								{								
									allocExpression(NULL);
									setTypeExpression();
								}
							;
    break;}
case 138:
#line 845 "grammar.yacc"
{								
								allocExpression(new CNegOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opAdd,"(-)");
								
							;
    break;}
case 139:
#line 851 "grammar.yacc"
{	
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opAdd))
								{
									yyerror("erreur sémantique l'operateur + n'est pas supporté par cette expression");
									return 0;
								}*/								
								setTypeExpressionG();
								allocExpression(NULL);
								
								
							;
    break;}
case 140:
#line 863 "grammar.yacc"
{									
								allocExpression(new CAddOpCode,true);		
								setTypeExpressionD(NLAIC::CTypeOfOperator::opAdd,"+");	
							;
    break;}
case 141:
#line 868 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSub))
								{
									yyerror("erreur sémantique l'operateur - n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);
								
							;
    break;}
case 142:
#line 879 "grammar.yacc"
{								
								allocExpression(new CSubOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSub,"-");							
							;
    break;}
case 143:
#line 884 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opNot))
								{
									yyerror("erreur sémantique l'operateur ! n'est pas supporté par cette expression");
									return 0;
								}*/								
								allocExpression(new CNotOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opNot,"!");
								
							;
    break;}
case 144:
#line 895 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiff))
								{
									yyerror("erreur sémantique l'operateur != n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 145:
#line 905 "grammar.yacc"
{								
								allocExpression(new CDiffOpCode,true);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiff,"!=");
								
							;
    break;}
case 146:
#line 911 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInf))
								{
									yyerror("erreur sémantique l'operateur < n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
								
							;
    break;}
case 147:
#line 922 "grammar.yacc"
{								
								allocExpression(new CInfOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInf,"<");							
							;
    break;}
case 148:
#line 927 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSup))
								{
									yyerror("erreur sémantique l'operateur > n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);								
							;
    break;}
case 149:
#line 937 "grammar.yacc"
{								
								allocExpression(new CSupOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSup,">");							
							;
    break;}
case 150:
#line 942 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSupEq))
								{
									yyerror("erreur sémantique l'operateur >= n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
							;
    break;}
case 151:
#line 952 "grammar.yacc"
{								
								allocExpression(new CSupEqOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSupEq,">=");
							;
    break;}
case 152:
#line 957 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInfEq))
								{
									yyerror("erreur sémantique l'operateur <= n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 153:
#line 967 "grammar.yacc"
{								
								allocExpression(new CInfEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInfEq,"<=");
							;
    break;}
case 154:
#line 972 "grammar.yacc"
{
								setTypeExpressionG();	
								allocExpression(NULL);														
							;
    break;}
case 155:
#line 977 "grammar.yacc"
{								
								allocExpression(new CEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opEq,"==");

							;
    break;}
case 156:
#line 985 "grammar.yacc"
{
								_FacteurEval = true;	
							;
    break;}
case 157:
#line 989 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opMul))
								{
									yyerror("erreur sémantique l'operateur * n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();								
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 158:
#line 1000 "grammar.yacc"
{									
								setTypeExpressionD(NLAIC::CTypeOfOperator::opMul,"+");
								allocExpression(new CMulOpCode,false);
								_FacteurEval = false;
							;
    break;}
case 159:
#line 1006 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiv))
								{
									yyerror("erreur sémantique l'operateur / n'est pas supporté par cette expression");
									return 0;
								}*/
											
								setTypeExpressionG();
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 160:
#line 1018 "grammar.yacc"
{																
								allocExpression(new CDivOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiv,"/");
								_FacteurEval = false;	
							;
    break;}
case 161:
#line 1027 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PExec);
							;
    break;}
case 162:
#line 1032 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAchieve);
							;
    break;}
case 163:
#line 1037 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAsk);
							;
    break;}
case 164:
#line 1042 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PBreak);
							;
    break;}
case 165:
#line 1047 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PError);
							;
    break;}
case 166:
#line 1052 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PTell);
							;
    break;}
case 167:
#line 1057 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PKill);
							;
    break;}
case 168:
#line 1062 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PEven);
							;
    break;}
case 169:
#line 1067 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVarNill();
							;
    break;}
case 170:
#line 1073 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVar();
							;
    break;}
case 171:
#line 1078 "grammar.yacc"
{								
								_IsFacteurIsExpression = false;
								if(!processingVar())
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 172:
#line 1088 "grammar.yacc"
{								
								_IsFacteurIsExpression = true;								
								setMethodVar();
							;
    break;}
case 173:
#line 1093 "grammar.yacc"
{							
								_IsFacteurIsExpression = true;
							;
    break;}
case 174:
#line 1097 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 175:
#line 1101 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 176:
#line 1105 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 177:
#line 1109 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 178:
#line 1113 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 179:
#line 1117 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 180:
#line 1121 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 181:
#line 1125 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 182:
#line 1132 "grammar.yacc"
{
								_LasVarStr.clear();
								_LasVarStr.push_back(NLAISCRIPT::CStringType(LastyyText[1]));
								_LastFact.VarType = varTypeUndef;
								_IsFacteurIsExpression = false;	
								_FromStack.push_back(false);							
							;
    break;}
case 183:
#line 1141 "grammar.yacc"
{
								_LasVarStr.clear();
								cleanTypeList();
								_LasVarStr.push_back(LastyyText[1]);
								setMethodVar();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);

							;
    break;}
case 184:
#line 1153 "grammar.yacc"
{	
								cleanTypeList();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);
							;
    break;}
case 185:
#line 1162 "grammar.yacc"
{									
								if(_IsFacteurIsExpression)
								{
									IOpType *c = _TypeList.back();
									_TypeList.pop_back();
									c->release();
									_TypeList.push_back(_FlotingExpressionType);
									_FlotingExpressionType->incRef();
									_LasVarStr.clear();
									_FromStack.pop_back();
								}
								_LasVarStr.push_back(LastyyText[1]);
							;
    break;}
case 186:
#line 1179 "grammar.yacc"
{									
								setListVar();
							;
    break;}
case 188:
#line 1187 "grammar.yacc"
{									
								setChaineVar();
							;
    break;}
case 189:
#line 1193 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));								
							;
    break;}
case 190:
#line 1197 "grammar.yacc"
{								
								_LastBloc->addCode((new CAddOpCode));
							;
    break;}
case 191:
#line 1203 "grammar.yacc"
{
								_LastStringParam.push_back(new NLAIAGENT::CGroupType());								

							;
    break;}
case 192:
#line 1208 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
							;
    break;}
case 194:
#line 1214 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 195:
#line 1218 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 196:
#line 1225 "grammar.yacc"
{							
								_LastStringParam.back()->cpy(NLAIAGENT::CStringType(NLAIAGENT::CStringVarName(LastyyText[1])));
								_Param.push_back(new CParam);								
							;
    break;}
case 197:
#line 1232 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );				
						;
    break;}
case 198:
#line 1237 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 199:
#line 1241 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
//							_LastBloc->addCode( new CLdbNewOpCode(CRule()) );		
							setStackVar( CVar::IdVar );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tUndef);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::Rule::idRule;
						;
    break;}
case 201:
#line 1256 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 202:
#line 1260 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbNewOpCode( CClause() ) );
							//_LastBloc->addCode( new CAddOpCode() );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::CClause::idCClause;
						;
    break;}
case 203:
#line 1272 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 204:
#line 1276 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 205:
#line 1280 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );							
						;
    break;}
case 206:
#line 1285 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );													
						;
    break;}
case 207:
#line 1291 "grammar.yacc"
{
							_LastBloc->addCode( new CTellOpCode() );
						;
    break;}
case 208:
#line 1297 "grammar.yacc"
{
							/*char buf[256];
							strcpy(buf, LastyyText[1]);
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CBoolType( NLAIAGENT::CStringVarName(LastyyText[1]) ) ) );
							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
							_LastFact.varType = varForFunc;
							_LastFact.isUsed = false;
							_lastIdentType = NLAIAGENT::CVar::idBoolType;
							*/
						;
    break;}
case 209:
#line 1310 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
							char *txt = LastyyText[1];
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode(new CAddOpCode() );
							//_LastAssert = NLAIAGENT::CStringVarName(LastyyText[1]);
						;
    break;}
case 210:
#line 1318 "grammar.yacc"
{
/*							setStackVar( CFactPattern::IdFactPattern );
							IBaseAssert *my_assert = _FactBase->addAssert( _LastAssert, _NbLogicParams );
							_NbLogicParams = 0;
							_LastBloc->addCode(new CLdbNewOpCode( CFactPattern( my_assert ) ) );
							*/
						;
    break;}
case 211:
#line 1328 "grammar.yacc"
{
						;
    break;}
case 212:
#line 1335 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 213:
#line 1341 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 215:
#line 1350 "grammar.yacc"
{
							char buf[256];
							strcpy(buf, LastyyText[1]);
							setStackVar( CVar::IdVar );
							_LastBloc->addCode( new CLdbOpCode(CVar( LastyyText[1] )) );
						;
    break;}
case 216:
#line 1360 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
						;
    break;}
case 218:
#line 1367 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 219:
#line 1371 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 220:
#line 1375 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 221:
#line 1379 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 222:
#line 1385 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );
						;
    break;}
case 223:
#line 1390 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 224:
#line 1394 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyRule() ) );		
							setStackVar(CFuzzyRule::IdFuzzyRule);
						;
    break;}
case 225:
#line 1402 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 226:
#line 1406 "grammar.yacc"
{
							
						;
    break;}
case 227:
#line 1412 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 228:
#line 1416 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 230:
#line 1423 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							// Composant?
							char *txt = LastyyText[0];
/*							_lastFVarIndex = ((IClassInterpret *)_selfClass.get())->getComponentIndex(NLAIAGENT::CStringVarName(LastyyText[1]));
							if (_lastFVarIndex != -1 )
							{
								_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CDigitalType(_lastFVarIndex) ) );
								_LastBloc->addCode( new CAddOpCode() );
							}
							else
							{
								// Variable locale?
							}
							*/

						;
    break;}
case 231:
#line 1441 "grammar.yacc"
{
							_LastString = NLAIAGENT::CStringVarName( LastyyText[0] );
						;
    break;}
case 232:
#line 1445 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++ );
							_LastBloc->addCode(new CLdbNewOpCode( CSimpleFuzzyCond(NULL, NULL) ) );
						;
    break;}
case 233:
#line 1452 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 234:
#line 1456 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 235:
#line 1461 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 236:
#line 1465 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyVar(NLAIAGENT::CStringVarName("Inst"),0,1) ) );
						;
    break;}
case 237:
#line 1472 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 238:
#line 1476 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 240:
#line 1483 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1487 "grammar.yacc"

