
/*  A Bison parser, made from grammar.yacc
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FIN	258
#define	NOMBRE	259
#define	IDENT	260
#define	PAR_G	261
#define	PAR_D	262
#define	ACCOL_G	263
#define	ACCOL_D	264
#define	CROCHER_G	265
#define	CROCHER_D	266
#define	EG_MATH	267
#define	VIRGULE	268
#define	EG_LOG	269
#define	SUP	270
#define	INF	271
#define	SUP_EG	272
#define	INF_EG	273
#define	DIFF	274
#define	OR_LOG	275
#define	AND_LOG	276
#define	NON_BIN	277
#define	OR_BIN	278
#define	AND_BIN	279
#define	XOR_BIN	280
#define	SCOP	281
#define	PLUS	282
#define	MOINS	283
#define	FOIS	284
#define	DIV	285
#define	POWER	286
#define	POINT_VI	287
#define	LEPOINT	288
#define	POINT_DEUX	289
#define	INTERROGATION	290
#define	CHAINE	291
#define	NILL	292
#define	EXEC	293
#define	ACHIEVE	294
#define	ASK	295
#define	BREAK	296
#define	TELL	297
#define	KILL	298
#define	PERROR	299
#define	EVEN	300
#define	BEGIN_GRAMMAR	301
#define	FROM	302
#define	DEFINE	303
#define	GROUP	304
#define	COMPONENT	305
#define	CONSTRUCTION	306
#define	DESTRUCTION	307
#define	MESSAGE_MANAGER	308
#define	MAESSAGELOOP	309
#define	LOCAL	310
#define	STATIC	311
#define	AS	312
#define	DIGITAL	313
#define	COLLECTOR	314
#define	WITH	315
#define	DO	316
#define	END	317
#define	IF	318
#define	THEN	319
#define	BEGINING	320
#define	END_GRAMMAR	321
#define	NEW	322
#define	TRIGGER	323
#define	PRECONDITION	324
#define	POSTCONDITION	325
#define	GOAL	326
#define	RETURN	327
#define	COMMENT	328
#define	STEPS	329
#define	UPDATEEVERY	330
#define	PRIORITY	331
#define	LOGICVAR	332
#define	RULE	333
#define	IA_ASSERT	334
#define	OR	335
#define	AND	336
#define	FUZZY	337
#define	FUZZYRULE	338
#define	FUZZYRULESET	339
#define	SETS	340
#define	FUZZYVAR	341
#define	FIS	342
#define	COS	343
#define	SIN	344
#define	TAN	345
#define	POW	346
#define	LN	347
#define	LOG	348
#define	FACT	349

#line 1 "grammar.yacc"

#include <malloc.h>
#include <list>
#define PARSER_NO_REDEF_YYTABLE_H_
#include "nel/ai/script/compilateur.h"
#include "nel/ai/script/constraint.h"
#include "nel/ai/script/type_def.h"
#include "nel/ai/script/object_unknown.h"
#include "nel/ai/logic/logic.h"
#include "nel/ai/fuzzy/fuzzy.h"
#include "nel/ai/logic/interpret_object_operator.h"
#include "nel/ai/script/interpret_fsm.h"

using  namespace NLAISCRIPT;
using  namespace NLAILOGIC;
using  namespace NLAIFUZZY;
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		407
#define	YYFLAG		-32768
#define	YYNTBASE	95

#define YYTRANSLATE(x) ((unsigned)(x) <= 349 ? yytranslate[x] : 249)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,    10,    14,    16,    21,    22,    29,    31,
    34,    35,    40,    43,    46,    47,    55,    57,    61,    63,
    65,    67,    70,    72,    74,    76,    78,    80,    85,    89,
    91,    94,    98,    99,   103,   104,   108,   110,   112,   114,
   116,   118,   120,   124,   125,   126,   133,   134,   135,   142,
   143,   149,   150,   156,   157,   158,   165,   167,   168,   172,
   173,   177,   179,   182,   183,   184,   190,   193,   194,   195,
   196,   207,   208,   215,   217,   218,   222,   225,   227,   230,
   231,   237,   241,   243,   245,   247,   249,   250,   254,   255,
   260,   262,   266,   268,   272,   275,   277,   278,   279,   286,
   288,   292,   294,   296,   298,   301,   304,   306,   309,   312,
   315,   318,   319,   320,   330,   331,   336,   338,   339,   344,
   345,   351,   352,   357,   359,   361,   363,   367,   370,   372,
   374,   375,   381,   382,   383,   393,   395,   398,   401,   405,
   407,   409,   412,   413,   419,   421,   422,   428,   429,   434,
   439,   446,   448,   452,   454,   456,   461,   463,   465,   468,
   469,   474,   475,   480,   483,   484,   489,   490,   495,   496,
   501,   502,   507,   508,   513,   514,   519,   521,   522,   527,
   528,   533,   535,   537,   539,   541,   543,   545,   547,   549,
   551,   553,   555,   557,   561,   563,   565,   567,   569,   571,
   573,   575,   577,   579,   583,   587,   591,   592,   597,   599,
   601,   604,   605,   606,   613,   616,   618,   620,   621,   622,
   629,   631,   632,   636,   638,   639,   644,   648,   651,   654,
   655,   662,   665,   667,   668,   672,   675,   676,   681,   682,
   686,   687,   691,   692,   693,   700,   701,   705,   707,   708,
   713,   714,   715,   723,   724,   725,   726,   734,   736,   737,
   741
};

static const short yyrhs[] = {    96,
     0,    95,    96,     0,   100,     8,   107,     9,     0,   100,
     8,     9,     0,    97,     0,    99,     6,     7,    62,     0,
     0,    99,     6,     7,    98,   164,    62,     0,    53,     0,
   101,   103,     0,     0,    47,     5,   102,    34,     0,    48,
   104,     0,    48,     5,     0,     0,    49,    16,   198,   105,
    13,   106,    15,     0,     5,     0,   106,    13,     5,     0,
   108,     0,   107,     0,   109,     0,   109,   108,     0,   110,
     0,   148,     0,   112,     0,   113,     0,   111,     0,    50,
    34,   186,    62,     0,    50,    34,    62,     0,   117,     0,
   117,   112,     0,    74,    34,   114,     0,     0,     5,   115,
    32,     0,     0,     5,   116,   114,     0,   118,     0,   119,
     0,   129,     0,   122,     0,   125,     0,   127,     0,    73,
    34,    36,     0,     0,     0,    69,    34,   120,   132,   121,
    62,     0,     0,     0,    71,   123,    34,   143,   124,    32,
     0,     0,    75,    34,     4,   126,    32,     0,     0,    76,
    34,     4,   128,    32,     0,     0,     0,    70,    34,   130,
   132,   131,    62,     0,   134,     0,     0,   134,   133,   132,
     0,     0,   138,   135,    32,     0,   139,     0,   143,    32,
     0,     0,     0,     8,   136,   164,   137,     9,     0,    35,
     5,     0,     0,     0,     0,    82,     6,     5,   140,    87,
   141,     5,   142,     7,    32,     0,     0,    35,     6,     5,
   144,   145,     7,     0,   147,     0,     0,   147,   146,   145,
     0,    35,     5,     0,   149,     0,   148,   149,     0,     0,
   151,   152,   164,   150,    62,     0,   151,   152,    62,     0,
     5,     0,    52,     0,   153,     0,   155,     0,     0,     6,
   154,     7,     0,     0,     6,   156,   157,     7,     0,   158,
     0,   157,    13,   106,     0,   106,     0,   158,    32,   106,
     0,   159,   162,     0,     5,     0,     0,     0,     5,   160,
    16,     5,   161,    15,     0,   163,     0,   162,    13,   163,
     0,     5,     0,   165,     0,   180,     0,   164,   165,     0,
   164,   180,     0,    32,     0,   169,    32,     0,   166,    32,
     0,   171,    32,     0,   179,    32,     0,     0,     0,     5,
   167,    28,    15,    57,     6,     5,   168,     7,     0,     0,
   212,   170,    12,   199,     0,   173,     0,     0,   171,    33,
   172,   173,     0,     0,   176,     6,   174,   178,   177,     0,
     0,   176,     6,   175,   177,     0,   212,     0,     7,     0,
   199,     0,   178,    13,   199,     0,    72,   199,     0,   183,
     0,   181,     0,     0,   199,    35,   182,   164,    62,     0,
     0,     0,    63,   199,    35,   184,   164,    34,   185,   164,
    62,     0,    32,     0,   187,    32,     0,   186,    32,     0,
   186,   187,    32,     0,   188,     0,   194,     0,   192,    15,
     0,     0,   192,    13,    55,   189,    15,     0,   190,     0,
     0,   192,    13,    56,   191,    15,     0,     0,     5,   193,
    16,    36,     0,    59,    16,   198,    15,     0,    59,    16,
   198,    13,   195,    15,     0,   196,     0,   195,    13,   196,
     0,     5,     0,   197,     0,   211,    33,    33,   211,     0,
    36,     0,   208,     0,    28,   208,     0,     0,   199,   200,
    27,   208,     0,     0,   199,   201,    28,   208,     0,    22,
   208,     0,     0,   199,   202,    19,   208,     0,     0,   199,
   203,    16,   208,     0,     0,   199,   204,    15,   208,     0,
     0,   199,   205,    17,   208,     0,     0,   199,   206,    18,
   208,     0,     0,   199,   207,    14,   208,     0,   211,     0,
     0,   208,   209,    29,   211,     0,     0,   208,   210,    30,
   211,     0,    38,     0,    39,     0,    40,     0,    41,     0,
    44,     0,    42,     0,    43,     0,    45,     0,    37,     0,
     4,     0,   212,     0,   171,     0,     6,   199,     7,     0,
   213,     0,   217,     0,   215,     0,   233,     0,   229,     0,
   222,     0,   239,     0,   234,     0,     5,     0,   171,    33,
     5,     0,   211,    33,     5,     0,   212,    33,     5,     0,
     0,    10,   214,   216,    11,     0,    36,     0,   199,     0,
   216,   199,     0,     0,     0,    67,   218,   221,     6,   219,
   220,     0,   178,     7,     0,     7,     0,     5,     0,     0,
     0,    78,   225,   223,    64,   224,   227,     0,   225,     0,
     0,    63,   226,   227,     0,   229,     0,     0,   229,   228,
    81,   227,     0,   229,    80,   227,     0,    79,   229,     0,
    31,     5,     0,     0,    35,     6,     5,   230,   231,     7,
     0,    35,     5,     0,   199,     0,     0,   199,   232,   231,
     0,    35,     5,     0,     0,    84,     8,   235,   236,     0,
     0,   239,   237,     9,     0,     0,   239,   238,   236,     0,
     0,     0,    83,   242,   240,    64,   241,   244,     0,     0,
    63,   243,   244,     0,   246,     0,     0,   246,   245,    81,
   244,     0,     0,     0,     6,     5,   247,    87,     5,   248,
     7,     0,     0,     0,     0,    86,     0,     5,     0,    85,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   199,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    67,    71,    74,    82,    88,    91,    95,   101,   107,   117,
   120,   136,   138,   139,   151,   154,   157,   158,   160,   161,
   164,   165,   168,   169,   170,   178,   181,   184,   185,   188,
   189,   192,   196,   206,   206,   216,   218,   219,   220,   221,
   222,   223,   228,   244,   251,   265,   268,   274,   294,   296,
   317,   319,   340,   345,   352,   375,   377,   383,   390,   398,
   405,   405,   420,   435,   446,   504,   506,   514,   521,   525,
   529,   532,   541,   545,   549,   554,   556,   564,   565,   568,
   627,   627,   688,   696,   706,   707,   710,   715,   720,   724,
   730,   731,   734,   735,   738,   742,   747,   752,   759,   762,
   763,   766,   773,   774,   775,   776,   779,   780,   781,   782,
   789,   816,   821,   829,   831,   841,   853,   854,   859,   862,
   869,   870,   878,   880,   887,   900,   904,   911,   919,   920,
   923,   929,   935,   942,   947,   953,   954,   955,   956,   959,
   960,   964,   965,   971,   971,   975,   981,   983,   989,  1004,
  1005,  1008,  1009,  1012,  1013,  1016,  1018,  1021,  1029,  1035,
  1047,  1052,  1063,  1068,  1079,  1089,  1095,  1106,  1111,  1121,
  1126,  1136,  1141,  1151,  1156,  1161,  1169,  1173,  1184,  1190,
  1202,  1210,  1216,  1221,  1226,  1231,  1236,  1241,  1246,  1251,
  1256,  1262,  1272,  1277,  1281,  1285,  1289,  1293,  1297,  1301,
  1305,  1309,  1316,  1325,  1337,  1345,  1363,  1368,  1371,  1377,
  1381,  1387,  1392,  1397,  1398,  1402,  1409,  1416,  1422,  1426,
  1437,  1440,  1445,  1456,  1460,  1464,  1468,  1475,  1481,  1493,
  1502,  1512,  1519,  1525,  1532,  1534,  1544,  1549,  1551,  1556,
  1559,  1564,  1569,  1575,  1579,  1586,  1591,  1596,  1600,  1604,
  1607,  1625,  1630,  1636,  1641,  1646,  1650,  1656,  1660,  1665,
  1667
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FIN","NOMBRE",
"IDENT","PAR_G","PAR_D","ACCOL_G","ACCOL_D","CROCHER_G","CROCHER_D","EG_MATH",
"VIRGULE","EG_LOG","SUP","INF","SUP_EG","INF_EG","DIFF","OR_LOG","AND_LOG","NON_BIN",
"OR_BIN","AND_BIN","XOR_BIN","SCOP","PLUS","MOINS","FOIS","DIV","POWER","POINT_VI",
"LEPOINT","POINT_DEUX","INTERROGATION","CHAINE","NILL","EXEC","ACHIEVE","ASK",
"BREAK","TELL","KILL","PERROR","EVEN","BEGIN_GRAMMAR","FROM","DEFINE","GROUP",
"COMPONENT","CONSTRUCTION","DESTRUCTION","MESSAGE_MANAGER","MAESSAGELOOP","LOCAL",
"STATIC","AS","DIGITAL","COLLECTOR","WITH","DO","END","IF","THEN","BEGINING",
"END_GRAMMAR","NEW","TRIGGER","PRECONDITION","POSTCONDITION","GOAL","RETURN",
"COMMENT","STEPS","UPDATEEVERY","PRIORITY","LOGICVAR","RULE","IA_ASSERT","OR",
"AND","FUZZY","FUZZYRULE","FUZZYRULESET","SETS","FUZZYVAR","FIS","COS","SIN",
"TAN","POW","LN","LOG","FACT","program","DefinitionClass","MessageRun","@1",
"MessageManager","CorpDeDefinition","HeritageDeType","@2","EnteteDeDefinition",
"DefinitionDeGroup","@3","CParam","DefinitionDeProgram","BlocDeDefinition","UnBloc",
"Register","RegistDesAttributs","RegisterOperator","RegisterSteps","Steps","@4",
"@5","OpBloc","OpComment","PreCondition","@6","@7","Goal","@8","@9","UpdateCycles",
"@10","Priority","@11","PostCondition","@12","@13","OperatorCond","@14","SingleOpCond",
"@15","@16","@17","BooleanCond","FuzzyCond","@18","@19","@20","FirstOrderPattern",
"@21","OpLogicVarSet","@22","OpLogicVar","BlocPourLesCode","BlocAvecCode","@23",
"Methode","Argument","ArgumentVide","@24","ArgumentListe","@25","ListesDeVariables",
"DesParams","TypeOfParam","@26","@27","DeclarationVariables","NonDeVariable",
"DuCode","Code","StaticCast","@28","@29","Affectation","@30","AppelleDeFonction",
"@31","AppelleDeFoncDirect","@32","@33","NonDeFonction","CallFunction","Prametre",
"RetourDeFonction","Evaluation","EvaluationSimpleState","@34","EvaluationState",
"@35","@36","TypeDeDeclaration","RegisterAnyVar","RegisterTypeDef","@37","StaticDef",
"@38","TypeDeComp","@39","RegisterCollector","MessageType","DefMessage","Borne",
"Nom","Expression","@40","@41","@42","@43","@44","@45","@46","@47","Term","@48",
"@49","Facteur","Variable","List","@50","ChaineDeCaractaire","ElementList","NewObject",
"@51","@52","PrametreNew","NewObjectName","Rule","@53","@54","RuleCondition",
"@55","Clause","@56","FactPattern","@57","LogicVarSet","@58","LogicVar","FuzzyRuleSet",
"@59","ListFuzzyRule","@60","@61","FuzzyRule","@62","@63","FuzzyCondition","@64",
"FuzzyClause","@65","FuzzyFactPattern","@66","@67", NULL
};
#endif

static const short yyr1[] = {     0,
    95,    95,    96,    96,    96,    97,    98,    97,    99,   100,
   102,   101,   103,   103,   105,   104,   106,   106,   107,   107,
   108,   108,   109,   109,   109,   109,   110,   111,   111,   112,
   112,   113,   115,   114,   116,   114,   117,   117,   117,   117,
   117,   117,   118,   120,   121,   119,   123,   124,   122,   126,
   125,   128,   127,   130,   131,   129,   132,   133,   132,   135,
   134,   134,   134,   136,   137,   134,   138,   140,   141,   142,
   139,   144,   143,   145,   146,   145,   147,   148,   148,   150,
   149,   149,   151,   151,   152,   152,   154,   153,   156,   155,
   157,   157,   158,   158,   106,   159,   160,   161,   159,   162,
   162,   163,   164,   164,   164,   164,   165,   165,   165,   165,
   165,   167,   168,   166,   170,   169,   171,   172,   171,   174,
   173,   175,   173,   176,   177,   178,   178,   179,   180,   180,
   182,   181,   184,   185,   183,   186,   186,   186,   186,   187,
   187,   188,   189,   188,   188,   191,   190,   193,   192,   194,
   194,   195,   195,   196,   196,   197,   198,   199,   199,   200,
   199,   201,   199,   199,   202,   199,   203,   199,   204,   199,
   205,   199,   206,   199,   207,   199,   208,   209,   208,   210,
   208,   211,   211,   211,   211,   211,   211,   211,   211,   211,
   211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
   211,   211,   212,   212,   212,   212,   214,   213,   215,   216,
   216,   218,   219,   217,   220,   220,   221,   223,   224,   222,
    -1,   226,   225,   227,   228,   227,   227,    -1,    -1,   230,
   229,   229,   231,   232,   231,   233,   235,   234,   237,   236,
   238,   236,   240,   241,   239,   243,   242,   244,   245,   244,
   247,   248,   246,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1
};

static const short yyr2[] = {     0,
     1,     2,     4,     3,     1,     4,     0,     6,     1,     2,
     0,     4,     2,     2,     0,     7,     1,     3,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     4,     3,     1,
     2,     3,     0,     3,     0,     3,     1,     1,     1,     1,
     1,     1,     3,     0,     0,     6,     0,     0,     6,     0,
     5,     0,     5,     0,     0,     6,     1,     0,     3,     0,
     3,     1,     2,     0,     0,     5,     2,     0,     0,     0,
    10,     0,     6,     1,     0,     3,     2,     1,     2,     0,
     5,     3,     1,     1,     1,     1,     0,     3,     0,     4,
     1,     3,     1,     3,     2,     1,     0,     0,     6,     1,
     3,     1,     1,     1,     2,     2,     1,     2,     2,     2,
     2,     0,     0,     9,     0,     4,     1,     0,     4,     0,
     5,     0,     4,     1,     1,     1,     3,     2,     1,     1,
     0,     5,     0,     0,     9,     1,     2,     2,     3,     1,
     1,     2,     0,     5,     1,     0,     5,     0,     4,     4,
     6,     1,     3,     1,     1,     4,     1,     1,     2,     0,
     4,     0,     4,     2,     0,     4,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     4,     1,     0,     4,     0,
     4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     3,     3,     0,     4,     1,     1,
     2,     0,     0,     6,     2,     1,     1,     0,     0,     6,
     1,     0,     3,     1,     0,     4,     3,     2,     2,     0,
     6,     2,     1,     0,     3,     2,     0,     4,     0,     3,
     0,     3,     0,     0,     6,     0,     3,     1,     0,     4,
     0,     0,     7,     0,     0,     0,     7,     1,     0,     3,
     1
};

static const short yydefact[] = {     0,
     0,     9,     0,     1,     5,     0,     0,     0,    11,     2,
     0,     0,     0,    10,     0,     7,    83,     4,     0,    84,
     0,     0,    47,     0,     0,     0,     0,     0,    19,    21,
    23,    27,    25,    26,    30,    37,    38,    40,    41,    42,
    39,    24,    78,     0,    14,     0,    13,    12,     6,     0,
     0,    44,    54,     0,     0,     0,     0,     0,     3,    22,
    31,    79,    87,     0,    85,    86,     0,   191,   203,     0,
   207,     0,     0,   107,     0,   209,   190,   182,   183,   184,
   185,   187,   188,   186,   189,     0,   212,     0,     0,     0,
     0,     0,   103,     0,     0,   193,   117,     0,     0,   104,
   130,   129,   160,   158,   177,   192,   195,   197,   196,   200,
   199,   198,   202,   201,   148,   136,     0,    29,     0,     0,
   140,   145,     0,   141,     0,     0,     0,    43,    33,    32,
    50,    52,     0,     0,    82,    80,   157,    15,     0,   203,
   193,   160,   192,     0,   164,   159,   232,     0,   160,     0,
   128,   222,   218,   246,   243,   237,     8,   105,   106,   109,
   108,   110,   118,   120,   111,   131,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   138,    28,     0,   137,     0,   142,    64,     0,     0,
    45,    58,    60,    62,     0,    55,     0,    48,     0,     0,
     0,     0,    88,    17,    93,     0,    91,     0,     0,     0,
     0,   194,   210,     0,   230,   133,   217,     0,     0,     0,
     0,     0,     0,   204,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   205,   206,
     0,     0,     0,   139,   143,   146,     0,    67,     0,     0,
     0,     0,     0,    63,     0,     0,    34,    36,    51,    53,
     0,     0,    90,     0,     0,   102,    95,   100,    81,     0,
     0,   208,   211,     0,     0,   213,     0,   223,   224,   219,
     0,   247,   248,   244,   238,   239,   119,     0,     0,   126,
   125,   123,     0,   161,   163,   166,   168,   170,   172,   174,
   176,   179,   181,   116,   149,     0,   150,     0,     0,    65,
    72,    68,    46,    59,    61,    56,    49,     0,    18,    92,
    94,     0,     0,     0,   234,     0,     0,     0,   232,     0,
     0,     0,   251,     0,     0,     0,     0,     0,   121,   132,
   154,     0,   152,   155,     0,   144,   147,     0,     0,     0,
    98,   101,    16,     0,     0,   231,   134,   216,     0,   214,
   227,     0,   220,     0,     0,   245,   240,   242,   127,     0,
   151,     0,    66,     0,     0,    74,    69,     0,   113,   235,
     0,   215,   226,     0,   250,   153,     0,    77,    73,     0,
     0,    99,     0,     0,   252,   156,    76,    70,   114,   135,
     0,     0,   253,     0,    71,     0,     0
};

static const short yydefgoto[] = {     3,
     4,     5,    50,     6,     7,     8,    15,    14,    47,   210,
   205,    28,    29,    30,    31,    32,    33,    34,   130,   199,
   200,    35,    36,    37,   125,   251,    38,    54,   256,    39,
   201,    40,   202,    41,   126,   255,   191,   252,   192,   253,
   247,   348,   193,   194,   350,   391,   402,   195,   349,   375,
   390,   376,    42,    43,   209,    44,    64,    65,   133,    66,
   134,   206,   207,   208,   261,   378,   267,   268,    92,    93,
    94,   139,   393,    95,   179,   141,   225,    97,   226,   227,
    98,   292,   289,    99,   100,   101,   228,   102,   275,   381,
   119,   120,   121,   308,   122,   309,   123,   180,   124,   342,
   343,   344,   138,   103,   167,   168,   169,   170,   171,   172,
   173,   174,   104,   175,   176,   105,   143,   107,   144,   108,
   214,   109,   150,   328,   360,   218,   110,   220,   332,   153,
   219,   278,   331,   111,   274,   326,   355,   112,   113,   223,
   285,   336,   337,   114,   222,   335,   155,   221,   282,   334,
   283,   364,   401
};

static const short yypact[] = {    21,
    12,-32768,    35,-32768,-32768,    33,    26,   -28,-32768,-32768,
    45,    40,    28,-32768,    37,    13,-32768,-32768,    59,-32768,
    78,   114,-32768,   124,   126,   128,   133,   115,-32768,    67,
-32768,-32768,-32768,-32768,   158,-32768,-32768,-32768,-32768,-32768,
-32768,    17,-32768,   176,-32768,   168,-32768,-32768,-32768,   460,
    14,-32768,-32768,   162,   165,   198,   204,   208,-32768,-32768,
-32768,-32768,   209,    22,-32768,-32768,   179,-32768,   188,   613,
-32768,   626,   626,-32768,   102,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   613,-32768,   613,   157,   161,
   222,   213,-32768,   200,   205,   154,-32768,   230,   210,-32768,
-32768,-32768,   111,   105,   207,     4,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   231,-32768,    19,   214,
-32768,-32768,   108,-32768,     1,     1,   224,-32768,   257,-32768,
-32768,-32768,   264,   259,-32768,   460,-32768,-32768,   244,-32768,
   241,   174,    23,   613,   105,   105,-32768,   276,   251,   277,
   295,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   278,   280,-32768,-32768,   261,   256,   270,   279,
   283,   275,   281,   286,   265,   263,   296,   302,   303,   300,
   179,-32768,-32768,   285,-32768,   139,-32768,-32768,   194,   312,
-32768,   262,-32768,-32768,   289,-32768,   319,-32768,   297,   198,
   314,   315,-32768,    86,   335,    90,   317,   322,   266,   337,
   336,-32768,   295,   511,-32768,-32768,-32768,   346,   318,   290,
   349,   299,   284,-32768,   626,   613,   357,   460,   626,   626,
   626,   626,   626,   626,   626,   626,   626,   626,-32768,-32768,
   613,   323,   118,-32768,-32768,-32768,   460,-32768,   361,   363,
   307,     1,   339,-32768,   310,   341,-32768,-32768,-32768,-32768,
   359,   372,-32768,   259,   259,-32768,   365,-32768,-32768,   259,
   326,-32768,   295,   613,   460,-32768,   201,-32768,   130,-32768,
   374,-32768,   304,-32768,-32768,   316,   367,   207,    91,   295,
-32768,-32768,   298,   105,   105,   105,   105,   105,   105,   105,
   105,   207,   207,   295,-32768,   677,-32768,   383,   386,   460,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   397,-32768,   335,
   335,   322,   132,   398,   137,   396,   352,   562,-32768,   318,
   324,   318,-32768,   325,   349,   399,   284,   613,-32768,-32768,
    47,   144,-32768,-32768,   376,-32768,-32768,   404,   379,   320,
-32768,-32768,-32768,   412,   613,-32768,-32768,-32768,   170,-32768,
-32768,   318,-32768,   331,   349,-32768,-32768,-32768,   295,   677,
-32768,     8,-32768,   415,   414,   387,-32768,   408,-32768,-32768,
   460,-32768,-32768,   420,-32768,-32768,   626,-32768,-32768,   379,
   421,-32768,   422,   406,-32768,   207,-32768,-32768,-32768,-32768,
   424,   425,-32768,   395,-32768,   433,-32768
};

static const short yypgoto[] = {-32768,
   434,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -169,-32768,   409,-32768,-32768,-32768,   405,-32768,   252,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -120,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   327,-32768,    63,
-32768,-32768,-32768,   413,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   134,   -62,   -89,
-32768,-32768,-32768,-32768,-32768,   -50,-32768,   232,-32768,-32768,
-32768,   169,   131,-32768,   -88,-32768,-32768,-32768,-32768,-32768,
-32768,   342,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    92,-32768,   282,   -65,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   -61,-32768,-32768,  -207,   -49,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -292,-32768,  -212,-32768,   112,-32768,-32768,-32768,-32768,
   123,-32768,-32768,  -215,-32768,-32768,-32768,-32768,  -310,-32768,
-32768,-32768,-32768
};


#define	YYLAST		761


static const short yytable[] = {    96,
   106,   136,   158,   159,   142,   196,   279,   286,   188,  -124,
   145,   146,   239,    96,   106,  -115,     9,   288,   115,    13,
   149,    17,   151,   115,   366,    68,    69,    70,  -124,   302,
   303,    71,    45,    12,   406,   189,   178,   361,    11,   363,
   387,    96,   106,    72,    17,   116,   158,   159,    18,    73,
   182,    16,  -203,    74,   385,   178,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,     1,    20,   383,
    48,    17,   117,     2,    49,   118,    46,   117,   213,  -203,
   183,     1,   190,   135,    86,    96,   106,     2,    87,    19,
   -96,    20,    51,    88,   320,   321,   263,   291,   345,    89,
   323,   -97,   264,   338,    90,    91,   147,   148,    21,    22,
    23,    52,    24,    25,    26,    27,    19,   279,    20,   279,
   186,   286,   187,    59,  -175,  -169,  -167,  -171,  -173,  -165,
   306,   314,   307,  -178,  -180,    21,    22,    23,  -162,    24,
    25,    26,    27,  -233,   262,   166,   353,    53,   273,   279,
  -175,  -169,  -167,  -171,  -173,  -165,   370,    55,   371,    56,
   290,    57,   345,  -160,  -162,   293,    58,   294,   295,   296,
   297,   298,   299,   300,   301,   304,   382,    96,   106,   396,
   212,    63,   338,    67,   310,   162,   163,  -175,  -169,  -167,
  -171,  -173,  -165,   245,   246,   127,    96,   106,   248,   249,
   128,  -162,   129,   158,   159,   329,   148,   131,   325,   330,
  -225,   132,   327,   -89,   137,  -112,    68,    69,    70,   152,
   158,   159,    71,   154,    96,   106,    21,    22,    23,   156,
    24,   160,    26,    27,    72,   164,   161,   158,   159,   177,
    73,   165,    96,   106,    74,   185,   181,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,   197,    96,
   106,   -35,   290,   204,  -175,  -169,  -167,  -171,  -173,  -165,
   203,   211,   369,   163,   157,    86,    96,   106,  -162,    87,
   215,   217,   224,   230,    88,   216,  -122,   229,   231,   325,
    89,   234,   238,   237,   232,    90,    91,   233,   235,   236,
   239,    68,    69,    70,   158,   159,   240,    71,  -175,  -169,
  -167,  -171,  -173,  -165,   241,   242,   244,   250,   394,    72,
   254,  -160,  -162,   -57,   249,    73,   266,   269,   257,    74,
    96,   106,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    96,   106,   259,   260,   262,   265,   270,
   271,   276,   277,   280,   281,    68,    69,    70,   305,   340,
    86,    71,   284,   291,    87,   311,    90,   312,   313,    88,
   315,   316,   317,    72,   318,    89,   319,   322,   333,    73,
    90,    91,   324,    74,  -249,   357,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,   346,  -241,  -117,
   347,   351,   356,   354,   362,   365,   377,   367,   372,    68,
    69,    70,   373,   374,    86,    71,   379,   384,    87,   388,
   389,   -75,   392,    88,   395,   398,   405,    72,   399,    89,
   403,   404,   407,    73,    90,    91,    10,    74,    60,    61,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,   258,   397,   198,    62,   352,   287,   339,   359,   368,
   184,   386,   243,    68,    69,    70,   380,   400,    86,    71,
     0,     0,    87,     0,     0,     0,     0,    88,     0,     0,
     0,    72,     0,    89,     0,     0,     0,    73,    90,    91,
     0,    74,     0,     0,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    68,   140,    70,     0,     0,     0,
    71,   272,    86,     0,     0,     0,    87,     0,     0,     0,
     0,    88,    72,     0,     0,     0,     0,    89,    73,     0,
     0,     0,    90,    91,     0,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    68,   140,    70,   358,     0,
     0,    71,     0,     0,     0,     0,     0,    87,     0,     0,
     0,     0,     0,    72,     0,     0,     0,     0,    89,    73,
     0,     0,     0,    90,    91,     0,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    68,   140,    70,     0,
     0,     0,    71,     0,     0,     0,     0,     0,    87,    68,
   140,    70,     0,     0,    72,    71,     0,     0,     0,    89,
    73,     0,     0,     0,    90,    91,     0,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,     0,     0,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,     0,     0,     0,     0,     0,     0,     0,     0,    87,
    68,   341,    70,     0,     0,     0,    71,     0,     0,     0,
    89,     0,    87,     0,     0,    90,    91,     0,     0,     0,
     0,     0,     0,    89,     0,     0,     0,     0,    90,    91,
     0,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    87,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    89,     0,     0,     0,     0,    90,
    91
};

static const short yycheck[] = {    50,
    50,    64,    92,    92,    70,   126,   219,   223,     8,     6,
    72,    73,     5,    64,    64,    12,     5,   225,     5,    48,
    86,     5,    88,     5,   335,     4,     5,     6,     6,   237,
   238,    10,     5,     8,     0,    35,    33,   330,     6,   332,
    33,    92,    92,    22,     5,    32,   136,   136,     9,    28,
    32,     7,     6,    32,   365,    33,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    47,    52,   362,
    34,     5,    59,    53,    62,    62,    49,    59,   144,    33,
    62,    47,    82,    62,    63,   136,   136,    53,    67,    50,
     5,    52,    34,    72,   264,   265,     7,     7,   306,    78,
   270,    16,    13,    13,    83,    84,     5,     6,    69,    70,
    71,    34,    73,    74,    75,    76,    50,   330,    52,   332,
    13,   337,    15,     9,    14,    15,    16,    17,    18,    19,
    13,   252,    15,    29,    30,    69,    70,    71,    28,    73,
    74,    75,    76,     7,    13,    35,    15,    34,   214,   362,
    14,    15,    16,    17,    18,    19,    13,    34,    15,    34,
   226,    34,   370,    27,    28,   228,    34,   229,   230,   231,
   232,   233,   234,   235,   236,   241,     7,   228,   228,   387,
     7,     6,    13,    16,   247,    32,    33,    14,    15,    16,
    17,    18,    19,    55,    56,    34,   247,   247,     5,     6,
    36,    28,     5,   293,   293,     5,     6,     4,   274,    80,
    81,     4,   275,     5,    36,    28,     4,     5,     6,    63,
   310,   310,    10,    63,   275,   275,    69,    70,    71,     8,
    73,    32,    75,    76,    22,     6,    32,   327,   327,    33,
    28,    32,   293,   293,    32,    32,    16,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    35,   310,
   310,     5,   328,     5,    14,    15,    16,    17,    18,    19,
     7,    28,   338,    33,    62,    63,   327,   327,    28,    67,
     5,     5,     5,    28,    72,    35,     7,    27,    19,   355,
    78,    17,    30,    29,    16,    83,    84,    15,    18,    14,
     5,     4,     5,     6,   394,   394,     5,    10,    14,    15,
    16,    17,    18,    19,    12,    16,    32,     6,   381,    22,
    32,    27,    28,    62,     6,    28,     5,    62,    32,    32,
   381,   381,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,   394,   394,    32,    32,    13,    32,    13,
    15,     6,    35,    64,     6,     4,     5,     6,    36,    62,
    63,    10,    64,     7,    67,     5,    83,     5,    62,    72,
    32,    62,    32,    22,    16,    78,     5,    13,     5,    28,
    83,    84,    57,    32,    81,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    15,    83,    33,
    15,     5,     7,     6,    81,    81,    87,     9,    33,     4,
     5,     6,     9,    35,    63,    10,     5,    87,    67,     5,
     7,    35,    15,    72,     5,     5,    32,    22,     7,    78,
     7,     7,     0,    28,    83,    84,     3,    32,    30,    35,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,   200,   390,   127,    42,   322,   225,   289,   328,   337,
   119,   370,   181,     4,     5,     6,   355,    62,    63,    10,
    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    -1,    -1,
    -1,    22,    -1,    78,    -1,    -1,    -1,    28,    83,    84,
    -1,    32,    -1,    -1,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     4,     5,     6,    -1,    -1,    -1,
    10,    11,    63,    -1,    -1,    -1,    67,    -1,    -1,    -1,
    -1,    72,    22,    -1,    -1,    -1,    -1,    78,    28,    -1,
    -1,    -1,    83,    84,    -1,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     4,     5,     6,     7,    -1,
    -1,    10,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    -1,    -1,    -1,    22,    -1,    -1,    -1,    -1,    78,    28,
    -1,    -1,    -1,    83,    84,    -1,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,     6,    -1,
    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    67,     4,
     5,     6,    -1,    -1,    22,    10,    -1,    -1,    -1,    78,
    28,    -1,    -1,    -1,    83,    84,    -1,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
     4,     5,     6,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    78,    -1,    67,    -1,    -1,    83,    84,    -1,    -1,    -1,
    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,
    -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    83,
    84
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

static int	yychar;			/*  the lookahead symbol		*/
static YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

static int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 1024
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
CCompilateur::yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 68 "grammar.yacc"
{
								
							;
    break;}
case 3:
#line 78 "grammar.yacc"
{						
								if(!computContraint()) return false;
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 4:
#line 85 "grammar.yacc"
{
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 7:
#line 97 "grammar.yacc"
{
								initMessageManager();
							;
    break;}
case 8:
#line 102 "grammar.yacc"
{
								if(!endMessageManager()) return 0;
							;
    break;}
case 9:
#line 108 "grammar.yacc"
{
								if(_ResultCompile != NULL) 
								{
									yyerror("an MessageManager block had all ready declared");
									return 0;
								}								
							;
    break;}
case 11:
#line 121 "grammar.yacc"
{
								NLAIAGENT::CStringVarName interfName(LastyyText[1]);																																
								try
								{	
									NLAIC::CIdentType id = getTypeOfClass(interfName);
									_SelfClass.push((IClassInterpret *)(((CClassInterpretFactory *)id.getFactory())->getClass()->newInstance()));
									((IClassInterpret *)_SelfClass.get())->setInheritanceName(interfName);
								}
								catch(NLAIE::IException &a)
								{									
									yyerror((char *)a.what());
									return 0;
								}
							;
    break;}
case 14:
#line 140 "grammar.yacc"
{								
								if(!definClass(LastyyText[1]))
								{
									std::string text;
									text = NLAIC::stringGetBuild("class '%s' all ready exist",LastyyText[1]);
									yyerror((char *)text.c_str());
									return 0;
								}
							;
    break;}
case 15:
#line 152 "grammar.yacc"
{
								((IClassInterpret *)_SelfClass.get())->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
							;
    break;}
case 25:
#line 171 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->buildLogicTables();
								}
							;
    break;}
case 33:
#line 197 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[1] ) );
							;
    break;}
case 35:
#line 207 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[0] ) );
							;
    break;}
case 43:
#line 231 "grammar.yacc"
{
								char *txt1 = LastyyText[0];
								char *txt2 = LastyyText[1];
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setComment( LastyyText[1] );
								}


							;
    break;}
case 44:
#line 245 "grammar.yacc"
{
								is_cond = true;
								initParam();
								_InCond = true;
							;
    break;}
case 45:
#line 251 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
								_InCond = false;
							;
    break;}
case 47:
#line 269 "grammar.yacc"
{
								if ( !classIsAnOperator() )
								 	return 0;
							;
    break;}
case 48:
#line 275 "grammar.yacc"
{
								if ( _Goal ) 
								{
									_Goal->release();
									_Goal = NULL;
								}
								
								if ( classIsAnOperator() )
								{
									// Builds a FactPattern

									// Adds it as goal to the operator class
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setGoal( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
								}
							;
    break;}
case 50:
#line 297 "grammar.yacc"
{
									if ( classIsAnOperator() )
									{
										sint32 update = (sint32) LastyyNum;
										COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
										op_class->setUpdateEvery( update );
										if(_LastFact.Value != NULL) 
										{
											_LastFact.Value->release();
											_LastFact.Value = NULL;
										}

										if(_FlotingExpressionType != NULL)
										{
											_FlotingExpressionType->release();
											_FlotingExpressionType = NULL;
										}
									}	
								;
    break;}
case 52:
#line 320 "grammar.yacc"
{
									if ( classIsAnOperator() )
									{
										float priority = (float) LastyyNum;
										COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
										op_class->setPriority( priority );
										if(_LastFact.Value != NULL) 
										{
											_LastFact.Value->release();
											_LastFact.Value = NULL;
										}

										if(_FlotingExpressionType != NULL)
										{
											_FlotingExpressionType->release();
											_FlotingExpressionType = NULL;
										}
									}	
								;
    break;}
case 54:
#line 346 "grammar.yacc"
{
								is_cond = false;
								initParam();
								_InCond = true;
							;
    break;}
case 55:
#line 352 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
/*									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
									}
									*/

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeConc( _LastCodeBranche.back() );
										_LastCodeBranche.pop_back();
									}
								}
								_InCond = false;
							;
    break;}
case 57:
#line 378 "grammar.yacc"
{
#ifdef NL_DEBUG
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
#endif
							;
    break;}
case 58:
#line 384 "grammar.yacc"
{
#ifdef NL_DEBUG
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
#endif
							;
    break;}
case 59:
#line 390 "grammar.yacc"
{
#ifdef NL_DEBUG
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
#endif
							;
    break;}
case 60:
#line 399 "grammar.yacc"
{
#ifdef NL_DEBUG
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
#endif
							;
    break;}
case 62:
#line 406 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{

									NLAIAGENT::CStringVarName *vvar = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									NLAIAGENT::CStringVarName *vset = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->addFuzzyCond(vvar, vset);
								}
							;
    break;}
case 63:
#line 422 "grammar.yacc"
{									
								COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
								while ( _LastAsserts.size() )
								{
									if ( is_cond )
										op_class->addFirstOrderCond( _LastAsserts.back(), _LastLogicParams.back() );
									else
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );

									_LastAsserts.pop_back();
									_LastLogicParams.pop_back();
								}
							;
    break;}
case 64:
#line 436 "grammar.yacc"
{
								clean();
								_LastBloc = new IBlock(_Debug);
								_Heap -= (sint32)_Heap;
								CVarPStack::_LocalTableRef = &_Heap[0];
								_VarState.clear();								
								_VarState.pushMark();
								if(!_InLineParse) _LastBloc->addCode((new CMarkAlloc));
							;
    break;}
case 65:
#line 446 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
//										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_LastCodeBranche.push_back( (IOpCode *) listCode );
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}							

/*								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}				
*/				
							;
    break;}
case 67:
#line 507 "grammar.yacc"
{
							char *param_name = LastyyText[1];
							_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
						;
    break;}
case 68:
#line 516 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 69:
#line 521 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 70:
#line 525 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 72:
#line 535 "grammar.yacc"
{
							const char *assert_name = LastyyText[1];
							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );
						;
    break;}
case 74:
#line 546 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 75:
#line 550 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 77:
#line 557 "grammar.yacc"
{
							char *var_name = LastyyText[1];
							_LastLogicParams.back().push_back( new NLAIAGENT::CStringVarName( var_name ) );
						;
    break;}
case 80:
#line 570 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}

								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}								
								if(!caseRunMsg()) return false;
							;
    break;}
case 82:
#line 629 "grammar.yacc"
{	
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}
								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}
								if(!caseRunMsg()) return false;

							;
    break;}
case 83:
#line 689 "grammar.yacc"
{				
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 84:
#line 697 "grammar.yacc"
{
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 87:
#line 711 "grammar.yacc"
{								
								initParam();
							;
    break;}
case 88:
#line 715 "grammar.yacc"
{
								if(!registerMethod()) return false;
							;
    break;}
case 89:
#line 721 "grammar.yacc"
{
								initParam();
							;
    break;}
case 90:
#line 725 "grammar.yacc"
{
								registerMethod();
							;
    break;}
case 96:
#line 743 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[0]);
								_BaseObjectDef = false;
							;
    break;}
case 97:
#line 748 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 98:
#line 753 "grammar.yacc"
{
								_LastBaseObjectDef = NLAIAGENT::CStringVarName(LastyyText[1]);
								_BaseObjectDef = true;

							;
    break;}
case 102:
#line 767 "grammar.yacc"
{
								if(!setParamVarName()) return 0;
							;
    break;}
case 110:
#line 783 "grammar.yacc"
{
								_LastStringParam.back()->release();
								_LastStringParam.pop_back();
								_Param.back()->release();
								_Param.pop_back();								
							;
    break;}
case 111:
#line 791 "grammar.yacc"
{
								if(!_InLineParse)
								{
									
									IOpCode *x;				
									int i;
									for(i = 0; i < _VarState.markSize(); i++)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);										
									}
								}								
								_LastBloc->addCode((new CHaltOpCode));


							;
    break;}
case 112:
#line 817 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 113:
#line 825 "grammar.yacc"
{					
								NLAIAGENT::CStringVarName x(LastyyText[1]);			
								if(!castVariable(_LastString,x)) return false;
							;
    break;}
case 115:
#line 832 "grammar.yacc"
{								
								std::list<NLAISCRIPT::CStringType>::iterator i = _LasVarStr.begin();
								_LasAffectationVarStr.clear();
								while(i != _LasVarStr.end())
								{
									_LasAffectationVarStr.push_back(*i++);
								}												
							;
    break;}
case 116:
#line 842 "grammar.yacc"
{
								if(!affectation()) 
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 118:
#line 855 "grammar.yacc"
{
								
							;
    break;}
case 120:
#line 863 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 122:
#line 871 "grammar.yacc"
{								
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 124:
#line 881 "grammar.yacc"
{
								nameMethodeProcessing();
							;
    break;}
case 125:
#line 888 "grammar.yacc"
{	
								_ExpressionType = _ExpressionTypeTmp.back();
								_ExpressionTypeTmp.pop_back();								
								if(!callFunction())
								{
									_FromStack.pop_back();
									return 0;	
								}
								_FromStack.pop_back();
							;
    break;}
case 126:
#line 901 "grammar.yacc"
{
								pushParamExpression();								
							;
    break;}
case 127:
#line 906 "grammar.yacc"
{
								pushParamExpression();
							;
    break;}
case 128:
#line 913 "grammar.yacc"
{
								if ( !_InCond )
									if(!typeOfMethod()) return false;
							;
    break;}
case 131:
#line 925 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 132:
#line 930 "grammar.yacc"
{
								interrogationEnd();
							;
    break;}
case 133:
#line 938 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 134:
#line 943 "grammar.yacc"
{								
								ifInterrogationPoint()
							;
    break;}
case 135:
#line 948 "grammar.yacc"
{
								ifInterrogationEnd();
							;
    break;}
case 143:
#line 966 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Local = true;								
							;
    break;}
case 146:
#line 976 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Static = true;
							;
    break;}
case 148:
#line 984 "grammar.yacc"
{								
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
								_LastRegistered = ((IClassInterpret *)_SelfClass.get())->registerComponent(_LastString);
							;
    break;}
case 149:
#line 990 "grammar.yacc"
{
								if(((IClassInterpret *)_SelfClass.get())->getComponent(NLAIAGENT::CStringVarName(LastyyText[1])) == NULL)
								{
									CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);
									c->ObjectName = new NLAIAGENT::CStringVarName(LastyyText[1]);									
								}
								else
								{
									yyerror("variable all ready declared in the Register components");
									return 0;			
								}
							;
    break;}
case 158:
#line 1022 "grammar.yacc"
{	
								if(_FacteurEval)
								{								
									allocExpression(NULL);
									setTypeExpression();
								}
							;
    break;}
case 159:
#line 1030 "grammar.yacc"
{								
								allocExpression(new CNegOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opAdd,"(-)");
								
							;
    break;}
case 160:
#line 1036 "grammar.yacc"
{	
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opAdd))
								{
									yyerror("erreur sémantique l'operateur + n'est pas supporté par cette expression");
									return 0;
								}*/								
								setTypeExpressionG();
								allocExpression(NULL);
								
								
							;
    break;}
case 161:
#line 1048 "grammar.yacc"
{									
								allocExpression(new CAddOpCode,true);		
								setTypeExpressionD(NLAIC::CTypeOfOperator::opAdd,"+");	
							;
    break;}
case 162:
#line 1053 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSub))
								{
									yyerror("erreur sémantique l'operateur - n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);
								
							;
    break;}
case 163:
#line 1064 "grammar.yacc"
{								
								allocExpression(new CSubOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSub,"-");							
							;
    break;}
case 164:
#line 1069 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opNot))
								{
									yyerror("erreur sémantique l'operateur ! n'est pas supporté par cette expression");
									return 0;
								}*/								
								allocExpression(new CNotOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opNot,"!");
								
							;
    break;}
case 165:
#line 1080 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiff))
								{
									yyerror("erreur sémantique l'operateur != n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 166:
#line 1090 "grammar.yacc"
{								
								allocExpression(new CDiffOpCode,true);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiff,"!=");
								
							;
    break;}
case 167:
#line 1096 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInf))
								{
									yyerror("erreur sémantique l'operateur < n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
								
							;
    break;}
case 168:
#line 1107 "grammar.yacc"
{								
								allocExpression(new CInfOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInf,"<");							
							;
    break;}
case 169:
#line 1112 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSup))
								{
									yyerror("erreur sémantique l'operateur > n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);								
							;
    break;}
case 170:
#line 1122 "grammar.yacc"
{								
								allocExpression(new CSupOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSup,">");							
							;
    break;}
case 171:
#line 1127 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSupEq))
								{
									yyerror("erreur sémantique l'operateur >= n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
							;
    break;}
case 172:
#line 1137 "grammar.yacc"
{								
								allocExpression(new CSupEqOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSupEq,">=");
							;
    break;}
case 173:
#line 1142 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInfEq))
								{
									yyerror("erreur sémantique l'operateur <= n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 174:
#line 1152 "grammar.yacc"
{								
								allocExpression(new CInfEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInfEq,"<=");
							;
    break;}
case 175:
#line 1157 "grammar.yacc"
{
								setTypeExpressionG();	
								allocExpression(NULL);														
							;
    break;}
case 176:
#line 1162 "grammar.yacc"
{								
								allocExpression(new CEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opEq,"==");

							;
    break;}
case 177:
#line 1170 "grammar.yacc"
{
								_FacteurEval = true;	
							;
    break;}
case 178:
#line 1174 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opMul))
								{
									yyerror("erreur sémantique l'operateur * n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();								
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 179:
#line 1185 "grammar.yacc"
{									
								setTypeExpressionD(NLAIC::CTypeOfOperator::opMul,"+");
								allocExpression(new CMulOpCode,false);
								_FacteurEval = false;
							;
    break;}
case 180:
#line 1191 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiv))
								{
									yyerror("erreur sémantique l'operateur / n'est pas supporté par cette expression");
									return 0;
								}*/
											
								setTypeExpressionG();
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 181:
#line 1203 "grammar.yacc"
{																
								allocExpression(new CDivOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiv,"/");
								_FacteurEval = false;	
							;
    break;}
case 182:
#line 1212 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PExec);
							;
    break;}
case 183:
#line 1217 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAchieve);
							;
    break;}
case 184:
#line 1222 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAsk);
							;
    break;}
case 185:
#line 1227 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PBreak);
							;
    break;}
case 186:
#line 1232 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PError);
							;
    break;}
case 187:
#line 1237 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PTell);
							;
    break;}
case 188:
#line 1242 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PKill);
							;
    break;}
case 189:
#line 1247 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PEven);
							;
    break;}
case 190:
#line 1252 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVarNill();
							;
    break;}
case 191:
#line 1258 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVar();
							;
    break;}
case 192:
#line 1263 "grammar.yacc"
{								
								_IsFacteurIsExpression = false;
								if(!processingVar())
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 193:
#line 1273 "grammar.yacc"
{								
								_IsFacteurIsExpression = true;								
								setMethodVar();
							;
    break;}
case 194:
#line 1278 "grammar.yacc"
{							
								_IsFacteurIsExpression = true;
							;
    break;}
case 195:
#line 1282 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 196:
#line 1286 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 197:
#line 1290 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 198:
#line 1294 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 199:
#line 1298 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 200:
#line 1302 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 201:
#line 1306 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 202:
#line 1310 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 203:
#line 1317 "grammar.yacc"
{
								_LasVarStr.clear();
								_LasVarStr.push_back(NLAISCRIPT::CStringType(LastyyText[1]));
								_LastFact.VarType = varTypeUndef;
								_IsFacteurIsExpression = false;	
								_FromStack.push_back(false);							
							;
    break;}
case 204:
#line 1326 "grammar.yacc"
{
								_LasVarStr.clear();
								cleanTypeList();
								_LasVarStr.push_back(LastyyText[1]);
								setMethodVar();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);

							;
    break;}
case 205:
#line 1338 "grammar.yacc"
{	
								cleanTypeList();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);
							;
    break;}
case 206:
#line 1347 "grammar.yacc"
{									
								if(_IsFacteurIsExpression)
								{
									IOpType *c = _TypeList.back();
									_TypeList.pop_back();
									c->release();
									_TypeList.push_back(_FlotingExpressionType);
									_FlotingExpressionType->incRef();
									_LasVarStr.clear();
									_FromStack.pop_back();
								}
								_LasVarStr.push_back(LastyyText[1]);
							;
    break;}
case 207:
#line 1364 "grammar.yacc"
{									
								setListVar();
							;
    break;}
case 209:
#line 1372 "grammar.yacc"
{									
								setChaineVar();
							;
    break;}
case 210:
#line 1378 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));								
							;
    break;}
case 211:
#line 1382 "grammar.yacc"
{								
								_LastBloc->addCode((new CAddOpCode));
							;
    break;}
case 212:
#line 1388 "grammar.yacc"
{
								_LastStringParam.push_back(new NLAIAGENT::CGroupType());								

							;
    break;}
case 213:
#line 1393 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
							;
    break;}
case 215:
#line 1399 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 216:
#line 1403 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 217:
#line 1410 "grammar.yacc"
{							
								_LastStringParam.back()->cpy(NLAIAGENT::CStringType(NLAIAGENT::CStringVarName(LastyyText[1])));
								_Param.push_back(new CParam);								
							;
    break;}
case 218:
#line 1417 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );				
						;
    break;}
case 219:
#line 1422 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 220:
#line 1426 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
//							_LastBloc->addCode( new CLdbNewOpCode(CRule()) );		
							setStackVar( CVar::IdVar );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tUndef);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::Rule::idRule;
						;
    break;}
case 222:
#line 1441 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 223:
#line 1445 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbNewOpCode( CClause() ) );
							//_LastBloc->addCode( new CAddOpCode() );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::CClause::idCClause;
						;
    break;}
case 224:
#line 1457 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 225:
#line 1461 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 226:
#line 1465 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );							
						;
    break;}
case 227:
#line 1470 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );													
						;
    break;}
case 228:
#line 1476 "grammar.yacc"
{
							_LastBloc->addCode( new CTellOpCode() );
						;
    break;}
case 229:
#line 1482 "grammar.yacc"
{
							/*char buf[256];
							strcpy(buf, LastyyText[1]);
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CBoolType( NLAIAGENT::CStringVarName(LastyyText[1]) ) ) );
							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
							_LastFact.varType = varForFunc;
							_LastFact.isUsed = false;
							_lastIdentType = NLAIAGENT::CVar::idBoolType;
							*/
						;
    break;}
case 230:
#line 1495 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
							char *txt = LastyyText[1];
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode(new CAddOpCode() );
							//_LastAssert = NLAIAGENT::CStringVarName(LastyyText[1]);
						;
    break;}
case 231:
#line 1503 "grammar.yacc"
{
/*							setStackVar( CFactPattern::IdFactPattern );
							IBaseAssert *my_assert = _FactBase->addAssert( _LastAssert, _NbLogicParams );
							_NbLogicParams = 0;
							_LastBloc->addCode(new CLdbNewOpCode( CFactPattern( my_assert ) ) );
							*/
						;
    break;}
case 232:
#line 1513 "grammar.yacc"
{
						;
    break;}
case 233:
#line 1520 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 234:
#line 1526 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 236:
#line 1535 "grammar.yacc"
{
							char buf[256];
							strcpy(buf, LastyyText[1]);
							setStackVar( CVar::IdVar );
							_LastBloc->addCode( new CLdbOpCode(CVar( LastyyText[1] )) );
						;
    break;}
case 237:
#line 1545 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
						;
    break;}
case 239:
#line 1552 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 240:
#line 1556 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 241:
#line 1560 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 242:
#line 1564 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 243:
#line 1570 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );
						;
    break;}
case 244:
#line 1575 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 245:
#line 1579 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyRule() ) );		
							setStackVar(CFuzzyRule::IdFuzzyRule);
						;
    break;}
case 246:
#line 1587 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 247:
#line 1591 "grammar.yacc"
{
							
						;
    break;}
case 248:
#line 1597 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 249:
#line 1601 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 251:
#line 1608 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							// Composant?
							char *txt = LastyyText[0];
/*							_lastFVarIndex = ((IClassInterpret *)_selfClass.get())->getComponentIndex(NLAIAGENT::CStringVarName(LastyyText[1]));
							if (_lastFVarIndex != -1 )
							{
								_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CDigitalType(_lastFVarIndex) ) );
								_LastBloc->addCode( new CAddOpCode() );
							}
							else
							{
								// Variable locale?
							}
							*/

						;
    break;}
case 252:
#line 1626 "grammar.yacc"
{
							_LastString = NLAIAGENT::CStringVarName( LastyyText[0] );
						;
    break;}
case 253:
#line 1630 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++ );
							_LastBloc->addCode(new CLdbNewOpCode( CSimpleFuzzyCond(NULL, NULL) ) );
						;
    break;}
case 254:
#line 1637 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 255:
#line 1641 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 256:
#line 1646 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 257:
#line 1650 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyVar(NLAIAGENT::CStringVarName("Inst"),0,1) ) );
						;
    break;}
case 258:
#line 1657 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 259:
#line 1661 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 261:
#line 1668 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1672 "grammar.yacc"

