
/*  A Bison parser, made from grammar.yacc
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FIN	258
#define	NOMBRE	259
#define	IDENT	260
#define	PAR_G	261
#define	PAR_D	262
#define	ACCOL_G	263
#define	ACCOL_D	264
#define	CROCHER_G	265
#define	CROCHER_D	266
#define	EG_MATH	267
#define	VIRGULE	268
#define	EG_LOG	269
#define	SUP	270
#define	INF	271
#define	SUP_EG	272
#define	INF_EG	273
#define	DIFF	274
#define	OR_LOG	275
#define	AND_LOG	276
#define	NON_BIN	277
#define	OR_BIN	278
#define	AND_BIN	279
#define	XOR_BIN	280
#define	SCOP	281
#define	PLUS	282
#define	MOINS	283
#define	FOIS	284
#define	DIV	285
#define	POWER	286
#define	POINT_VI	287
#define	LEPOINT	288
#define	POINT_DEUX	289
#define	INTERROGATION	290
#define	CHAINE	291
#define	NILL	292
#define	EXEC	293
#define	ACHIEVE	294
#define	ASK	295
#define	BREAK	296
#define	TELL	297
#define	KILL	298
#define	PERROR	299
#define	EVEN	300
#define	BEGIN_GRAMMAR	301
#define	FROM	302
#define	DEFINE	303
#define	GROUP	304
#define	COMPONENT	305
#define	CONSTRUCTION	306
#define	DESTRUCTION	307
#define	MESSAGE_MANAGER	308
#define	MAESSAGELOOP	309
#define	TRIGGER	310
#define	PRECONDITION	311
#define	POSTCONDITION	312
#define	GOAL	313
#define	RETURN	314
#define	COS	315
#define	SIN	316
#define	TAN	317
#define	POW	318
#define	LN	319
#define	LOG	320
#define	FACT	321
#define	AS	322
#define	DIGITAL	323
#define	COLLECTOR	324
#define	WITH	325
#define	DO	326
#define	END	327
#define	IF	328
#define	THEN	329
#define	BEGINING	330
#define	END_GRAMMAR	331
#define	LOGICVAR	332
#define	RULE	333
#define	IA_ASSERT	334
#define	FUZZYRULE	335
#define	FUZZYRULESET	336
#define	SETS	337
#define	FUZZYVAR	338
#define	FIS	339
#define	OR	340
#define	COMMENT	341
#define	STEPS	342
#define	NEW	343
#define	AND	344
#define	LOCAL	345

#line 1 "grammar.yacc"

#include <malloc.h>
#include <list>
#define PARSER_NO_REDEF_YYTABLE_H_
#include "nel/ai/script/compilateur.h"
#include "nel/ai/script/constraint.h"
#include "nel/ai/script/type_def.h"
#include "nel/ai/script/object_unknown.h"
#include "nel/ai/logic/logic.h"
#include "nel/ai/fuzzy/fuzzy.h"
#include "nel/ai/logic/interpret_object_operator.h"
#include "nel/ai/script/interpret_fsm.h"

using  namespace NLAISCRIPT;
using  namespace NLAILOGIC;
using  namespace NLAIFUZZY;
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		377
#define	YYFLAG		-32768
#define	YYNTBASE	91

#define YYTRANSLATE(x) ((unsigned)(x) <= 345 ? yytranslate[x] : 234)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,    10,    14,    16,    21,    22,    29,    31,
    34,    35,    40,    43,    46,    47,    55,    57,    61,    63,
    65,    67,    70,    72,    74,    76,    78,    80,    85,    89,
    91,    94,    98,    99,   103,   104,   108,   110,   112,   114,
   116,   120,   121,   122,   129,   130,   131,   139,   140,   141,
   148,   150,   151,   155,   156,   160,   161,   165,   167,   170,
   171,   178,   180,   181,   185,   188,   190,   193,   194,   200,
   204,   206,   208,   210,   212,   213,   217,   218,   223,   225,
   229,   231,   235,   238,   240,   241,   242,   249,   251,   255,
   257,   259,   261,   264,   267,   269,   272,   275,   278,   281,
   282,   283,   293,   294,   299,   301,   302,   307,   308,   314,
   315,   320,   322,   324,   326,   330,   333,   335,   337,   338,
   344,   345,   346,   356,   358,   361,   364,   368,   370,   372,
   375,   376,   382,   383,   388,   393,   400,   402,   406,   408,
   410,   415,   417,   419,   422,   423,   428,   429,   434,   437,
   438,   443,   444,   449,   450,   455,   456,   461,   462,   467,
   468,   473,   475,   476,   481,   482,   487,   489,   491,   493,
   495,   497,   499,   501,   503,   505,   507,   509,   511,   515,
   517,   519,   521,   523,   525,   527,   529,   531,   533,   537,
   541,   545,   546,   551,   553,   555,   558,   559,   560,   567,
   570,   572,   574,   575,   576,   583,   585,   586,   590,   592,
   593,   598,   602,   605,   608,   609,   616,   619,   621,   622,
   626,   629,   630,   635,   636,   640,   641,   645,   646,   647,
   654,   655,   659,   661,   662,   667,   668,   669,   677,   678,
   679,   680,   688,   690,   691,   695
};

static const short yyrhs[] = {    92,
     0,    91,    92,     0,    96,     8,   103,     9,     0,    96,
     8,     9,     0,    93,     0,    95,     6,     7,    72,     0,
     0,    95,     6,     7,    94,   151,    72,     0,    53,     0,
    97,    99,     0,     0,    47,     5,    98,    34,     0,    48,
   100,     0,    48,     5,     0,     0,    49,    16,   183,   101,
    13,   102,    15,     0,     5,     0,   102,    13,     5,     0,
   104,     0,   103,     0,   105,     0,   105,   104,     0,   106,
     0,   135,     0,   108,     0,   109,     0,   107,     0,    50,
    34,   173,    72,     0,    50,    34,    72,     0,   113,     0,
   113,   108,     0,    87,    34,   110,     0,     0,     5,   111,
    32,     0,     0,     5,   112,   110,     0,   114,     0,   115,
     0,   121,     0,   118,     0,    86,    34,    36,     0,     0,
     0,    56,    34,   116,   124,   117,    72,     0,     0,     0,
    58,   119,    34,     5,   120,    32,    72,     0,     0,     0,
    57,    34,   122,   124,   123,    72,     0,   126,     0,     0,
   126,   125,   124,     0,     0,   129,   127,    32,     0,     0,
   130,   128,    32,     0,   151,     0,    35,     5,     0,     0,
    35,     6,     5,   131,   132,     7,     0,   134,     0,     0,
   134,   133,   132,     0,    35,     5,     0,   136,     0,   135,
   136,     0,     0,   138,   139,   151,   137,    72,     0,   138,
   139,    72,     0,     5,     0,    52,     0,   140,     0,   142,
     0,     0,     6,   141,     7,     0,     0,     6,   143,   144,
     7,     0,   145,     0,   144,    13,   102,     0,   102,     0,
   145,    32,   102,     0,   146,   149,     0,     5,     0,     0,
     0,     5,   147,    16,     5,   148,    15,     0,   150,     0,
   149,    13,   150,     0,     5,     0,   152,     0,   167,     0,
   151,   152,     0,   151,   167,     0,    32,     0,   156,    32,
     0,   153,    32,     0,   158,    32,     0,   166,    32,     0,
     0,     0,     5,   154,    28,    15,    67,     6,     5,   155,
     7,     0,     0,   197,   157,    12,   184,     0,   160,     0,
     0,   158,    33,   159,   160,     0,     0,   163,     6,   161,
   165,   164,     0,     0,   163,     6,   162,   164,     0,   197,
     0,     7,     0,   184,     0,   165,    13,   184,     0,    59,
   184,     0,   170,     0,   168,     0,     0,   184,    35,   169,
   151,    72,     0,     0,     0,    73,   184,    35,   171,   151,
    34,   172,   151,    72,     0,    32,     0,   174,    32,     0,
   173,    32,     0,   173,   174,    32,     0,   175,     0,   179,
     0,   177,    15,     0,     0,   177,    13,    90,   176,    15,
     0,     0,     5,   178,    16,    36,     0,    69,    16,   183,
    15,     0,    69,    16,   183,    13,   180,    15,     0,   181,
     0,   180,    13,   181,     0,     5,     0,   182,     0,   196,
    33,    33,   196,     0,    36,     0,   193,     0,    28,   193,
     0,     0,   184,   185,    27,   193,     0,     0,   184,   186,
    28,   193,     0,    22,   193,     0,     0,   184,   187,    19,
   193,     0,     0,   184,   188,    16,   193,     0,     0,   184,
   189,    15,   193,     0,     0,   184,   190,    17,   193,     0,
     0,   184,   191,    18,   193,     0,     0,   184,   192,    14,
   193,     0,   196,     0,     0,   193,   194,    29,   196,     0,
     0,   193,   195,    30,   196,     0,    38,     0,    39,     0,
    40,     0,    41,     0,    44,     0,    42,     0,    43,     0,
    45,     0,    37,     0,     4,     0,   197,     0,   158,     0,
     6,   184,     7,     0,   198,     0,   202,     0,   200,     0,
   218,     0,   214,     0,   207,     0,   224,     0,   219,     0,
     5,     0,   158,    33,     5,     0,   196,    33,     5,     0,
   197,    33,     5,     0,     0,    10,   199,   201,    11,     0,
    36,     0,   184,     0,   201,   184,     0,     0,     0,    88,
   203,   206,     6,   204,   205,     0,   165,     7,     0,     7,
     0,     5,     0,     0,     0,    78,   210,   208,    74,   209,
   212,     0,   210,     0,     0,    73,   211,   212,     0,   214,
     0,     0,   214,   213,    89,   212,     0,   214,    85,   212,
     0,    79,   214,     0,    31,     5,     0,     0,    35,     6,
     5,   215,   216,     7,     0,    35,     5,     0,   184,     0,
     0,   184,   217,   216,     0,    35,     5,     0,     0,    81,
     8,   220,   221,     0,     0,   224,   222,     9,     0,     0,
   224,   223,   221,     0,     0,     0,    80,   227,   225,    74,
   226,   229,     0,     0,    73,   228,   229,     0,   231,     0,
     0,   231,   230,    89,   229,     0,     0,     0,     6,     5,
   232,    84,     5,   233,     7,     0,     0,     0,     0,    83,
     0,     5,     0,    82,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   184,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    51,    55,    58,    66,    72,    75,    79,    85,    91,   101,
   104,   120,   122,   123,   142,   145,   148,   149,   151,   152,
   155,   156,   159,   160,   161,   169,   172,   175,   176,   179,
   180,   183,   187,   197,   197,   207,   209,   210,   211,   212,
   216,   226,   231,   251,   254,   260,   276,   280,   285,   306,
   308,   312,   317,   323,   328,   328,   333,   333,   394,   402,
   409,   416,   420,   425,   427,   435,   436,   439,   498,   498,
   559,   567,   577,   578,   581,   586,   591,   595,   601,   602,
   605,   606,   609,   613,   618,   623,   630,   633,   634,   637,
   644,   645,   646,   647,   650,   651,   652,   653,   660,   667,
   672,   680,   682,   692,   704,   705,   710,   713,   720,   721,
   729,   731,   738,   753,   757,   765,   772,   773,   776,   782,
   788,   795,   800,   806,   807,   808,   809,   812,   813,   817,
   818,   824,   826,   832,   847,   848,   851,   852,   855,   856,
   859,   861,   864,   872,   878,   890,   895,   906,   911,   922,
   932,   938,   949,   954,   964,   969,   979,   984,   994,   999,
  1004,  1012,  1016,  1027,  1033,  1045,  1053,  1059,  1064,  1069,
  1074,  1079,  1084,  1089,  1094,  1099,  1105,  1115,  1120,  1124,
  1128,  1132,  1136,  1140,  1144,  1148,  1152,  1159,  1168,  1180,
  1188,  1206,  1211,  1214,  1220,  1224,  1230,  1235,  1240,  1241,
  1245,  1252,  1259,  1265,  1269,  1280,  1283,  1288,  1299,  1303,
  1307,  1311,  1318,  1324,  1336,  1345,  1355,  1362,  1368,  1375,
  1377,  1387,  1392,  1394,  1399,  1402,  1407,  1412,  1418,  1422,
  1429,  1434,  1439,  1443,  1447,  1450,  1468,  1473,  1479,  1484,
  1489,  1493,  1499,  1503,  1508,  1510
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FIN","NOMBRE",
"IDENT","PAR_G","PAR_D","ACCOL_G","ACCOL_D","CROCHER_G","CROCHER_D","EG_MATH",
"VIRGULE","EG_LOG","SUP","INF","SUP_EG","INF_EG","DIFF","OR_LOG","AND_LOG","NON_BIN",
"OR_BIN","AND_BIN","XOR_BIN","SCOP","PLUS","MOINS","FOIS","DIV","POWER","POINT_VI",
"LEPOINT","POINT_DEUX","INTERROGATION","CHAINE","NILL","EXEC","ACHIEVE","ASK",
"BREAK","TELL","KILL","PERROR","EVEN","BEGIN_GRAMMAR","FROM","DEFINE","GROUP",
"COMPONENT","CONSTRUCTION","DESTRUCTION","MESSAGE_MANAGER","MAESSAGELOOP","TRIGGER",
"PRECONDITION","POSTCONDITION","GOAL","RETURN","COS","SIN","TAN","POW","LN",
"LOG","FACT","AS","DIGITAL","COLLECTOR","WITH","DO","END","IF","THEN","BEGINING",
"END_GRAMMAR","LOGICVAR","RULE","IA_ASSERT","FUZZYRULE","FUZZYRULESET","SETS",
"FUZZYVAR","FIS","OR","COMMENT","STEPS","NEW","AND","LOCAL","program","DefinitionClass",
"MessageRun","@1","MessageManager","CorpDeDefinition","HeritageDeType","@2",
"EnteteDeDefinition","DefinitionDeGroup","@3","CParam","DefinitionDeProgram",
"BlocDeDefinition","UnBloc","Register","RegistDesAttributs","RegisterOperator",
"RegisterSteps","Steps","@4","@5","OpBloc","OpComment","PreCondition","@6","@7",
"Goal","@8","@9","PostCondition","@10","@11","OperatorCond","@12","SingleOpCond",
"@13","@14","BooleanCond","FirstOrderPattern","@15","OpLogicVarSet","@16","OpLogicVar",
"BlocPourLesCode","BlocAvecCode","@17","Methode","Argument","ArgumentVide","@18",
"ArgumentListe","@19","ListesDeVariables","DesParams","TypeOfParam","@20","@21",
"DeclarationVariables","NonDeVariable","DuCode","Code","StaticCast","@22","@23",
"Affectation","@24","AppelleDeFonction","@25","AppelleDeFoncDirect","@26","@27",
"NonDeFonction","CallFunction","Prametre","RetourDeFonction","Evaluation","EvaluationSimpleState",
"@28","EvaluationState","@29","@30","TypeDeDeclaration","RegisterAnyVar","RegisterTypeDef",
"@31","TypeDeComp","@32","RegisterCollector","MessageType","DefMessage","Borne",
"Nom","Expression","@33","@34","@35","@36","@37","@38","@39","@40","Term","@41",
"@42","Facteur","Variable","List","@43","ChaineDeCaractaire","ElementList","NewObject",
"@44","@45","PrametreNew","NewObjectName","Rule","@46","@47","RuleCondition",
"@48","Clause","@49","FactPattern","@50","LogicVarSet","@51","LogicVar","FuzzyRuleSet",
"@52","ListFuzzyRule","@53","@54","FuzzyRule","@55","@56","FuzzyCondition","@57",
"FuzzyClause","@58","FuzzyFactPattern","@59","@60", NULL
};
#endif

static const short yyr1[] = {     0,
    91,    91,    92,    92,    92,    93,    94,    93,    95,    96,
    98,    97,    99,    99,   101,   100,   102,   102,   103,   103,
   104,   104,   105,   105,   105,   105,   106,   107,   107,   108,
   108,   109,   111,   110,   112,   110,   113,   113,   113,   113,
   114,   116,   117,   115,   119,   120,   118,   122,   123,   121,
   124,   125,   124,   127,   126,   128,   126,   126,   129,   131,
   130,   132,   133,   132,   134,   135,   135,   137,   136,   136,
   138,   138,   139,   139,   141,   140,   143,   142,   144,   144,
   145,   145,   102,   146,   147,   148,   146,   149,   149,   150,
   151,   151,   151,   151,   152,   152,   152,   152,   152,   154,
   155,   153,   157,   156,   158,   159,   158,   161,   160,   162,
   160,   163,   164,   165,   165,   166,   167,   167,   169,   168,
   171,   172,   170,   173,   173,   173,   173,   174,   174,   175,
   176,   175,   178,   177,   179,   179,   180,   180,   181,   181,
   182,   183,   184,   184,   185,   184,   186,   184,   184,   187,
   184,   188,   184,   189,   184,   190,   184,   191,   184,   192,
   184,   193,   194,   193,   195,   193,   196,   196,   196,   196,
   196,   196,   196,   196,   196,   196,   196,   196,   196,   196,
   196,   196,   196,   196,   196,   196,   196,   197,   197,   197,
   197,   199,   198,   200,   201,   201,   203,   204,   202,   205,
   205,   206,   208,   209,   207,    -1,   211,   210,   212,   213,
   212,   212,    -1,    -1,   215,   214,   214,   216,   217,   216,
   218,   220,   219,   222,   221,   223,   221,   225,   226,   224,
   228,   227,   229,   230,   229,   232,   233,   231,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1
};

static const short yyr2[] = {     0,
     1,     2,     4,     3,     1,     4,     0,     6,     1,     2,
     0,     4,     2,     2,     0,     7,     1,     3,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     4,     3,     1,
     2,     3,     0,     3,     0,     3,     1,     1,     1,     1,
     3,     0,     0,     6,     0,     0,     7,     0,     0,     6,
     1,     0,     3,     0,     3,     0,     3,     1,     2,     0,
     6,     1,     0,     3,     2,     1,     2,     0,     5,     3,
     1,     1,     1,     1,     0,     3,     0,     4,     1,     3,
     1,     3,     2,     1,     0,     0,     6,     1,     3,     1,
     1,     1,     2,     2,     1,     2,     2,     2,     2,     0,
     0,     9,     0,     4,     1,     0,     4,     0,     5,     0,
     4,     1,     1,     1,     3,     2,     1,     1,     0,     5,
     0,     0,     9,     1,     2,     2,     3,     1,     1,     2,
     0,     5,     0,     4,     4,     6,     1,     3,     1,     1,
     4,     1,     1,     2,     0,     4,     0,     4,     2,     0,
     4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
     4,     1,     0,     4,     0,     4,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
     3,     0,     4,     1,     1,     2,     0,     0,     6,     2,
     1,     1,     0,     0,     6,     1,     0,     3,     1,     0,
     4,     3,     2,     2,     0,     6,     2,     1,     0,     3,
     2,     0,     4,     0,     3,     0,     3,     0,     0,     6,
     0,     3,     1,     0,     4,     0,     0,     7,     0,     0,
     0,     7,     1,     0,     3,     1
};

static const short yydefact[] = {     0,
     0,     9,     0,     1,     5,     0,     0,     0,    11,     2,
     0,     0,     0,    10,     0,     7,    71,     4,     0,    72,
     0,     0,    45,     0,     0,     0,    19,    21,    23,    27,
    25,    26,    30,    37,    38,    40,    39,    24,    66,     0,
    14,     0,    13,    12,     6,     0,     0,    42,    48,     0,
     0,     0,     3,    22,    31,    67,    75,     0,    73,    74,
     0,   176,   188,     0,   192,     0,     0,    95,     0,   194,
   175,   167,   168,   169,   170,   172,   173,   171,   174,     0,
     0,     0,     0,     0,   197,     0,    91,     0,     0,   178,
   105,     0,     0,    92,   118,   117,   145,   143,   162,   177,
   180,   182,   181,   185,   184,   183,   187,   186,   133,   124,
     0,    29,     0,     0,   128,     0,   129,     0,     0,     0,
    41,    33,    32,     0,     0,    70,    68,   142,    15,     0,
   188,   178,   145,   177,     0,   149,   144,   217,     0,   116,
   145,   207,   203,   231,   228,   222,     0,     8,    93,    94,
    97,    96,    98,   106,   108,    99,   119,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   126,    28,     0,   125,     0,   130,     0,    43,
    52,    54,    56,    58,    49,    46,     0,     0,    76,    17,
    81,     0,    79,     0,     0,     0,     0,   179,   195,     0,
   215,   121,     0,     0,     0,     0,     0,   202,     0,   189,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   190,   191,     0,     0,     0,   127,
   131,   217,     0,     0,     0,     0,     0,     0,     0,    34,
    36,     0,     0,    78,     0,     0,    90,    83,    88,    69,
     0,     0,   193,   196,     0,     0,     0,   208,   209,   204,
     0,   232,   233,   229,   223,   224,   198,   107,     0,     0,
   114,   113,   111,     0,   146,   148,   151,   153,   155,   157,
   159,   161,   164,   166,   104,   134,     0,   135,     0,   215,
    44,    53,    55,    57,    50,     0,     0,    18,    80,    82,
     0,     0,     0,   219,     0,     0,   217,     0,     0,     0,
   236,     0,     0,     0,     0,     0,     0,   109,   120,   139,
     0,   137,   140,     0,   132,     0,    47,    86,    89,    16,
     0,     0,   216,   122,   212,     0,   205,     0,     0,   230,
   225,   227,   201,     0,   199,   115,     0,   136,     0,     0,
     0,    62,     0,   101,   220,     0,   211,     0,   235,   200,
   138,     0,    65,    61,     0,    87,     0,     0,   237,   141,
    64,   102,   123,     0,   238,     0,     0
};

static const short yydefgoto[] = {     3,
     4,     5,    46,     6,     7,     8,    15,    14,    43,   196,
   191,    26,    27,    28,    29,    30,    31,    32,   123,   187,
   188,    33,    34,    35,   118,   234,    36,    50,   239,    37,
   119,   238,   180,   235,   181,   236,   237,   182,   183,   326,
   351,   365,   352,    38,    39,   195,    40,    58,    59,   124,
    60,   125,   192,   193,   194,   242,   353,   248,   249,   184,
    87,    88,   130,   367,    89,   170,   132,   211,    91,   212,
   213,    92,   273,   270,    93,    94,    95,   214,    96,   256,
   356,   113,   114,   115,   289,   116,   171,   117,   321,   322,
   323,   129,    97,   158,   159,   160,   161,   162,   163,   164,
   165,    98,   166,   167,    99,   134,   101,   135,   102,   200,
   103,   147,   316,   345,   209,   104,   204,   310,   143,   203,
   258,   309,   105,   255,   305,   332,   106,   107,   207,   265,
   314,   315,   108,   206,   313,   145,   205,   262,   312,   263,
   338,   374
};

static const short yypact[] = {    45,
     5,-32768,    33,-32768,-32768,    38,    31,    49,-32768,-32768,
    78,    62,    17,-32768,    91,    65,-32768,-32768,   112,-32768,
   122,   139,-32768,   141,   143,   179,-32768,    71,-32768,-32768,
-32768,-32768,     4,-32768,-32768,-32768,-32768,    16,-32768,   184,
-32768,   187,-32768,-32768,-32768,   519,    15,-32768,-32768,   170,
   169,   201,-32768,-32768,-32768,-32768,   204,   210,-32768,-32768,
   177,-32768,   189,   687,-32768,   698,   698,-32768,   155,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   687,
   687,   145,   146,   213,-32768,   291,-32768,   190,   191,   110,
-32768,   220,   197,-32768,-32768,-32768,   257,   142,   194,    83,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   215,-32768,    27,   202,-32768,    94,-32768,   576,   576,   228,
-32768,   230,-32768,   229,   232,-32768,   519,-32768,-32768,   211,
-32768,   207,   148,     1,   687,   142,   142,-32768,   236,   180,
   290,-32768,-32768,-32768,-32768,-32768,   238,-32768,-32768,-32768,
-32768,-32768,-32768,   239,   249,-32768,-32768,   231,   233,   240,
   241,   250,   251,   248,   253,   252,   247,   265,   273,   268,
   277,   177,-32768,-32768,   262,-32768,   199,-32768,   181,-32768,
   212,-32768,-32768,   519,-32768,-32768,   267,   201,-32768,    72,
   287,    56,   270,   298,   242,   302,   301,-32768,   180,    13,
-32768,-32768,   282,   246,   315,   263,   258,-32768,   333,-32768,
   698,   687,   334,   519,   698,   698,   698,   698,   698,   698,
   698,   698,   698,   698,-32768,-32768,   687,   304,    95,-32768,
-32768,   310,   338,   272,   576,   313,   314,   275,   316,-32768,
-32768,   335,   344,-32768,   232,   232,-32768,   342,-32768,-32768,
   232,   289,-32768,   180,   687,   519,   195,-32768,    41,-32768,
   352,-32768,   271,-32768,-32768,   279,-32768,   328,   194,    93,
   180,-32768,-32768,   348,   142,   142,   142,   142,   142,   142,
   142,   142,   194,   194,   180,-32768,   752,-32768,   347,   330,
-32768,-32768,-32768,-32768,-32768,   294,   362,-32768,   287,   287,
   298,   137,   367,   117,   361,   405,-32768,   282,   285,   282,
-32768,   286,   315,   368,   258,   633,   687,-32768,-32768,    37,
   138,-32768,-32768,   345,-32768,   346,-32768,-32768,-32768,-32768,
   377,   687,-32768,-32768,-32768,   282,-32768,   311,   315,-32768,
-32768,-32768,-32768,    98,-32768,   180,   752,-32768,    32,   389,
   390,   363,   381,-32768,-32768,   519,-32768,   394,-32768,-32768,
-32768,   698,-32768,-32768,   346,-32768,   393,   462,-32768,   194,
-32768,-32768,-32768,   395,-32768,   401,-32768
};

static const short yypgoto[] = {-32768,
   400,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -220,-32768,   376,-32768,-32768,-32768,   372,-32768,   218,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -113,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    43,-32768,-32768,-32768,   374,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   113,   -45,
   -82,-32768,-32768,-32768,-32768,-32768,   -46,-32768,   205,-32768,
-32768,-32768,   147,    97,-32768,   -81,-32768,-32768,-32768,-32768,
-32768,-32768,   305,-32768,-32768,-32768,-32768,-32768,-32768,    75,
-32768,   259,   -53,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -37,-32768,-32768,  -208,   -44,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -272,-32768,  -195,-32768,    87,-32768,-32768,-32768,-32768,   108,
-32768,-32768,  -198,-32768,-32768,-32768,-32768,  -235,-32768,-32768,
-32768,-32768
};


#define	YYLAST		840


static const short yytable[] = {    90,
    86,   100,   269,   149,   150,   185,  -112,   259,   266,     9,
   133,    90,   127,   100,   283,   284,    62,   131,    64,   109,
    17,    41,    65,   253,   299,   300,   140,   141,   136,   137,
   302,   109,   376,   169,    66,   335,   225,   337,    12,    90,
    67,   100,  -188,    11,   149,   150,   110,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,   173,    21,
    22,    23,   244,   357,   362,    42,    17,    20,   245,  -188,
    18,    90,    90,   100,   100,    17,   -84,   340,   324,     1,
    90,   199,   100,   111,    16,     2,   112,   -85,  -112,    24,
    82,     1,    83,    84,  -103,   111,    13,     2,   174,   272,
    85,   149,   150,   359,   360,   317,   177,   287,   178,   288,
   317,    19,   259,    20,   259,   169,   266,    21,    22,    23,
    19,   292,    20,  -218,    44,   308,    21,    22,    23,  -210,
  -160,  -154,  -152,  -156,  -158,  -150,    45,    90,   324,   100,
   259,   153,   154,  -145,  -147,    47,   254,    24,    25,   243,
   347,   330,   348,   370,   198,    48,    24,    25,   271,   138,
   139,  -160,  -154,  -152,  -156,  -158,  -150,    90,   274,   100,
  -163,  -165,    49,   285,    51,  -147,    52,   275,   276,   277,
   278,   279,   280,   281,   282,   232,   233,    53,    90,    57,
   100,   149,   150,  -160,  -154,  -152,  -156,  -158,  -150,   307,
   139,   304,    61,   120,   121,   122,  -145,  -147,   -77,    90,
   306,   100,   128,    62,    63,    64,  -100,   142,   144,    65,
   146,   151,   152,   149,   150,   155,   168,    90,   156,   100,
   172,    66,   186,   176,   -35,   189,   190,    67,   197,   154,
   201,    68,   208,   210,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,  -110,   218,   215,   217,    90,
   216,   100,   271,   346,   219,   221,   222,   220,    80,   225,
  -160,  -154,  -152,  -156,  -158,  -150,   224,   226,   304,   227,
   223,   126,    81,   -51,  -147,   149,   150,    82,   231,    83,
    84,   157,   228,   230,    62,    63,    64,    85,   240,   243,
    65,   246,   247,  -160,  -154,  -152,  -156,  -158,  -150,    90,
   368,   100,    66,   250,   251,   252,   257,  -147,    67,   260,
   261,    90,    68,   100,   202,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,   264,    83,   267,   286,
   272,   -59,   290,   291,   293,   294,   295,   296,   298,    80,
   297,    62,    63,    64,   301,   303,   311,    65,  -226,  -234,
  -105,   325,   148,    81,   -60,   327,   328,   333,    82,    66,
    83,    84,   331,   336,   339,    67,   341,   349,    85,    68,
   350,   354,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,   363,   358,   366,   364,   -63,   369,   372,
   377,   375,    10,    54,    55,   241,    80,   371,    62,    63,
    64,    56,   344,   329,    65,   268,   318,   175,   355,   319,
    81,   361,   342,     0,     0,    82,    66,    83,    84,     0,
   229,     0,    67,     0,     0,    85,    68,     0,   334,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    80,     0,    62,    63,    64,     0,     0,
     0,    65,     0,     0,     0,     0,     0,    81,     0,     0,
     0,     0,    82,    66,    83,    84,     0,     0,     0,    67,
     0,     0,    85,    68,     0,     0,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    80,     0,    62,    63,    64,     0,     0,     0,    65,     0,
     0,     0,     0,   373,    81,     0,     0,     0,     0,    82,
    66,    83,    84,     0,     0,     0,    67,     0,     0,    85,
    68,     0,     0,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    80,     0,    62,
    63,    64,     0,     0,     0,    65,     0,     0,     0,     0,
     0,    81,     0,     0,     0,     0,    82,    66,    83,    84,
     0,     0,     0,    67,     0,     0,    85,    68,     0,     0,
   179,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    80,     0,    62,   131,    64,   343,
     0,     0,    65,     0,     0,     0,     0,     0,    81,     0,
     0,     0,     0,    82,    66,    83,    84,     0,     0,     0,
    67,     0,     0,    85,     0,     0,     0,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    62,   131,    64,     0,     0,     0,    65,     0,     0,     0,
     0,    62,   131,    64,     0,     0,     0,    65,    66,     0,
    82,     0,    83,    84,    67,     0,     0,     0,     0,     0,
    85,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    62,   320,    64,     0,     0,
     0,    65,     0,     0,    82,     0,    83,    84,     0,     0,
     0,     0,     0,     0,    85,    82,     0,    83,    84,     0,
     0,     0,     0,     0,     0,    85,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    82,
     0,    83,    84,     0,     0,     0,     0,     0,     0,    85
};

static const short yycheck[] = {    46,
    46,    46,   211,    86,    86,   119,     6,   203,   207,     5,
    64,    58,    58,    58,   223,   224,     4,     5,     6,     5,
     5,     5,    10,    11,   245,   246,    80,    81,    66,    67,
   251,     5,     0,    33,    22,   308,     5,   310,     8,    86,
    28,    86,     6,     6,   127,   127,    32,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    32,    56,
    57,    58,     7,   336,    33,    49,     5,    52,    13,    33,
     9,   118,   119,   118,   119,     5,     5,   313,   287,    47,
   127,   135,   127,    69,     7,    53,    72,    16,     6,    86,
    78,    47,    80,    81,    12,    69,    48,    53,    72,     7,
    88,   184,   184,   339,     7,    13,    13,    13,    15,    15,
    13,    50,   308,    52,   310,    33,   315,    56,    57,    58,
    50,   235,    52,     7,    34,    85,    56,    57,    58,    89,
    14,    15,    16,    17,    18,    19,    72,   184,   347,   184,
   336,    32,    33,    27,    28,    34,   200,    86,    87,    13,
    13,    15,    15,   362,     7,    34,    86,    87,   212,     5,
     6,    14,    15,    16,    17,    18,    19,   214,   214,   214,
    29,    30,    34,   227,    34,    28,    34,   215,   216,   217,
   218,   219,   220,   221,   222,     5,     6,     9,   235,     6,
   235,   274,   274,    14,    15,    16,    17,    18,    19,     5,
     6,   255,    16,    34,    36,     5,    27,    28,     5,   256,
   256,   256,    36,     4,     5,     6,    28,    73,    73,    10,
     8,    32,    32,   306,   306,     6,    33,   274,    32,   274,
    16,    22,     5,    32,     5,     7,     5,    28,    28,    33,
     5,    32,     5,     5,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,     7,    16,    27,    19,   306,
    28,   306,   316,   317,    15,    18,    14,    17,    59,     5,
    14,    15,    16,    17,    18,    19,    30,     5,   332,    12,
    29,    72,    73,    72,    28,   368,   368,    78,    90,    80,
    81,    35,    16,    32,     4,     5,     6,    88,    32,    13,
    10,    32,     5,    14,    15,    16,    17,    18,    19,   356,
   356,   356,    22,    72,    13,    15,    35,    28,    28,    74,
     6,   368,    32,   368,    35,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    74,    80,     6,    36,
     7,    32,     5,    72,    32,    32,    72,    32,     5,    59,
    16,     4,     5,     6,    13,    67,     5,    10,    80,    89,
    33,    15,    72,    73,    35,    72,     5,     7,    78,    22,
    80,    81,     6,    89,    89,    28,     9,    33,    88,    32,
    35,     5,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,     5,    84,    15,     7,    35,     5,     7,
     0,     7,     3,    28,    33,   188,    59,   365,     4,     5,
     6,    38,   316,   301,    10,   211,   270,   113,   332,    72,
    73,   347,   315,    -1,    -1,    78,    22,    80,    81,    -1,
   172,    -1,    28,    -1,    -1,    88,    32,    -1,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    59,    -1,     4,     5,     6,    -1,    -1,
    -1,    10,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
    -1,    -1,    78,    22,    80,    81,    -1,    -1,    -1,    28,
    -1,    -1,    88,    32,    -1,    -1,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    -1,     4,     5,     6,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    72,    73,    -1,    -1,    -1,    -1,    78,
    22,    80,    81,    -1,    -1,    -1,    28,    -1,    -1,    88,
    32,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,     4,
     5,     6,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
    -1,    73,    -1,    -1,    -1,    -1,    78,    22,    80,    81,
    -1,    -1,    -1,    28,    -1,    -1,    88,    32,    -1,    -1,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    59,    -1,     4,     5,     6,     7,
    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    73,    -1,
    -1,    -1,    -1,    78,    22,    80,    81,    -1,    -1,    -1,
    28,    -1,    -1,    88,    -1,    -1,    -1,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     4,     5,     6,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,     4,     5,     6,    -1,    -1,    -1,    10,    22,    -1,
    78,    -1,    80,    81,    28,    -1,    -1,    -1,    -1,    -1,
    88,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     4,     5,     6,    -1,    -1,
    -1,    10,    -1,    -1,    78,    -1,    80,    81,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    78,    -1,    80,    81,    -1,
    -1,    -1,    -1,    -1,    -1,    88,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
    -1,    80,    81,    -1,    -1,    -1,    -1,    -1,    -1,    88
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
CCompilateur::yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 52 "grammar.yacc"
{
								
							;
    break;}
case 3:
#line 62 "grammar.yacc"
{						
								if(!computContraint()) return false;
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 4:
#line 69 "grammar.yacc"
{
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 7:
#line 81 "grammar.yacc"
{
								initMessageManager();
							;
    break;}
case 8:
#line 86 "grammar.yacc"
{
								if(!endMessageManager()) return 0;
							;
    break;}
case 9:
#line 92 "grammar.yacc"
{
								if(_ResultCompile != NULL) 
								{
									yyerror("an MessageManager block had all ready declared");
									return 0;
								}								
							;
    break;}
case 11:
#line 105 "grammar.yacc"
{
								NLAIAGENT::CStringVarName interfName(LastyyText[1]);																																
								try
								{	
									NLAIC::CIdentType id = getTypeOfClass(interfName);
									_SelfClass.push((IClassInterpret *)(((CClassInterpretFactory *)id.getFactory())->getClass()->newInstance()));
									((IClassInterpret *)_SelfClass.get())->setInheritanceName(interfName);
								}
								catch(NLAIE::IException &a)
								{									
									yyerror((char *)a.what());
									return 0;
								}
							;
    break;}
case 14:
#line 124 "grammar.yacc"
{
								try
								{
									NLAIC::CIdentType id(LastyyText[1]);
									char text[1024*4];
									sprintf(text,"class '%s' all ready exist",LastyyText[1]);
									yyerror(text);
									return 0;
								}
								catch(NLAIE::IException &)
								{
									( (IClassInterpret *) _SelfClass.get() )->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
									( (IClassInterpret *) _SelfClass.get() )->buildVTable();
									RegisterClass();
								}
							;
    break;}
case 15:
#line 143 "grammar.yacc"
{
								((IClassInterpret *)_SelfClass.get())->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
							;
    break;}
case 25:
#line 162 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->buildLogicTables();
								}
							;
    break;}
case 33:
#line 188 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[1] ) );
							;
    break;}
case 35:
#line 198 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[0] ) );
							;
    break;}
case 41:
#line 219 "grammar.yacc"
{
								char *txt1 = LastyyText[0];
								char *txt2 = LastyyText[1];
							;
    break;}
case 42:
#line 227 "grammar.yacc"
{
								initParam()
							;
    break;}
case 43:
#line 231 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderCond( _LastAsserts.front(), _LastLogicParams.front() );
										_LastAsserts.pop_front();
										_LastLogicParams.pop_front();
									}

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
							;
    break;}
case 45:
#line 255 "grammar.yacc"
{
								if ( !classIsAnOperator() )
								 	return 0;
							;
    break;}
case 46:
#line 261 "grammar.yacc"
{
								if ( _Goal ) 
								{
									_Goal->release();
									_Goal = NULL;
								}
								
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									NLAIAGENT::CStringVarName goal_name( LastyyText[1] );
									op_class->setGoal( (NLAIAGENT::CStringVarName &) goal_name );
								}
							;
    break;}
case 48:
#line 281 "grammar.yacc"
{
								initParam()
							;
    break;}
case 49:
#line 285 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderConc( _LastAsserts.front(), _LastLogicParams.front() );
										_LastAsserts.pop_front();
										_LastLogicParams.pop_front();
									}

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
							;
    break;}
case 51:
#line 309 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 52:
#line 313 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 53:
#line 317 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 54:
#line 324 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 56:
#line 329 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 58:
#line 334 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
//										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_LastCodeBranche.push_back( (IOpCode *) listCode );
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}							

/*								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}				
*/				

							;
    break;}
case 59:
#line 395 "grammar.yacc"
{
							char *param_name = LastyyText[1];
							_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
						;
    break;}
case 60:
#line 404 "grammar.yacc"
{
							const char *assert_name = LastyyText[1];
							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );
						;
    break;}
case 61:
#line 410 "grammar.yacc"
{
								for (int i = 0; i < 20; i++); // To put breakpoints for debugging...
						;
    break;}
case 62:
#line 417 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 63:
#line 421 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 65:
#line 428 "grammar.yacc"
{
							char *var_name = LastyyText[1];
							_LastLogicParams.back().push_back( new NLAIAGENT::CStringVarName( var_name ) );
						;
    break;}
case 68:
#line 441 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}

								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}								
								if(!caseRunMsg()) return false;
							;
    break;}
case 70:
#line 500 "grammar.yacc"
{	
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}
								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}
								if(!caseRunMsg()) return false;

							;
    break;}
case 71:
#line 560 "grammar.yacc"
{				
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 72:
#line 568 "grammar.yacc"
{
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 75:
#line 582 "grammar.yacc"
{								
								initParam();
							;
    break;}
case 76:
#line 586 "grammar.yacc"
{
								if(!registerMethod()) return false;
							;
    break;}
case 77:
#line 592 "grammar.yacc"
{
								initParam();
							;
    break;}
case 78:
#line 596 "grammar.yacc"
{
								registerMethod();
							;
    break;}
case 84:
#line 614 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[0]);
								_BaseObjectDef = false;
							;
    break;}
case 85:
#line 619 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 86:
#line 624 "grammar.yacc"
{
								_LastBaseObjectDef = NLAIAGENT::CStringVarName(LastyyText[1]);
								_BaseObjectDef = true;

							;
    break;}
case 90:
#line 638 "grammar.yacc"
{
								if(!setParamVarName()) return 0;
							;
    break;}
case 98:
#line 654 "grammar.yacc"
{
								_LastStringParam.back()->release();
								_LastStringParam.pop_back();
								_Param.back()->release();
								_Param.pop_back();								
							;
    break;}
case 99:
#line 662 "grammar.yacc"
{
								_LastBloc->addCode((new CHaltOpCode));
							;
    break;}
case 100:
#line 668 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 101:
#line 676 "grammar.yacc"
{					
								NLAIAGENT::CStringVarName x(LastyyText[1]);			
								if(!castVariable(_LastString,x)) return false;
							;
    break;}
case 103:
#line 683 "grammar.yacc"
{								
								std::list<NLAISCRIPT::CStringType>::iterator i = _LasVarStr.begin();
								_LasAffectationVarStr.clear();
								while(i != _LasVarStr.end())
								{
									_LasAffectationVarStr.push_back(*i++);
								}												
							;
    break;}
case 104:
#line 693 "grammar.yacc"
{
								if(!affectation()) 
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 106:
#line 706 "grammar.yacc"
{
								
							;
    break;}
case 108:
#line 714 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 110:
#line 722 "grammar.yacc"
{								
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 112:
#line 732 "grammar.yacc"
{
								nameMethodeProcessing();
							;
    break;}
case 113:
#line 739 "grammar.yacc"
{	
								_ExpressionType = _ExpressionTypeTmp.back();
								_ExpressionTypeTmp.pop_back();								
								if(!callFunction())
								{
									_FromStack.pop_back();
									return 0;	
								}
								_FromStack.pop_back();
							;
    break;}
case 114:
#line 754 "grammar.yacc"
{
								pushParamExpression();								
							;
    break;}
case 115:
#line 759 "grammar.yacc"
{
								pushParamExpression();
							;
    break;}
case 116:
#line 767 "grammar.yacc"
{
								if(!typeOfMethod()) return false;
							;
    break;}
case 119:
#line 778 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 120:
#line 783 "grammar.yacc"
{
								interrogationEnd();
							;
    break;}
case 121:
#line 791 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 122:
#line 796 "grammar.yacc"
{								
								ifInterrogationPoint()
							;
    break;}
case 123:
#line 801 "grammar.yacc"
{
								ifInterrogationEnd();
							;
    break;}
case 131:
#line 819 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Local = true;								
							;
    break;}
case 133:
#line 827 "grammar.yacc"
{								
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
								_LastRegistered = ((IClassInterpret *)_SelfClass.get())->registerComponent(_LastString);
							;
    break;}
case 134:
#line 833 "grammar.yacc"
{
								if(((IClassInterpret *)_SelfClass.get())->getComponent(NLAIAGENT::CStringVarName(LastyyText[1])) == NULL)
								{
									CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);
									c->ObjectName = new NLAIAGENT::CStringVarName(LastyyText[1]);									
								}
								else
								{
									yyerror("variable all ready declared in the Register components");
									return 0;			
								}
							;
    break;}
case 143:
#line 865 "grammar.yacc"
{	
								if(_FacteurEval)
								{								
									allocExpression(NULL);
									setTypeExpression();
								}
							;
    break;}
case 144:
#line 873 "grammar.yacc"
{								
								allocExpression(new CNegOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opAdd,"(-)");
								
							;
    break;}
case 145:
#line 879 "grammar.yacc"
{	
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opAdd))
								{
									yyerror("erreur sémantique l'operateur + n'est pas supporté par cette expression");
									return 0;
								}*/								
								setTypeExpressionG();
								allocExpression(NULL);
								
								
							;
    break;}
case 146:
#line 891 "grammar.yacc"
{									
								allocExpression(new CAddOpCode,true);		
								setTypeExpressionD(NLAIC::CTypeOfOperator::opAdd,"+");	
							;
    break;}
case 147:
#line 896 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSub))
								{
									yyerror("erreur sémantique l'operateur - n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);
								
							;
    break;}
case 148:
#line 907 "grammar.yacc"
{								
								allocExpression(new CSubOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSub,"-");							
							;
    break;}
case 149:
#line 912 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opNot))
								{
									yyerror("erreur sémantique l'operateur ! n'est pas supporté par cette expression");
									return 0;
								}*/								
								allocExpression(new CNotOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opNot,"!");
								
							;
    break;}
case 150:
#line 923 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiff))
								{
									yyerror("erreur sémantique l'operateur != n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 151:
#line 933 "grammar.yacc"
{								
								allocExpression(new CDiffOpCode,true);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiff,"!=");
								
							;
    break;}
case 152:
#line 939 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInf))
								{
									yyerror("erreur sémantique l'operateur < n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
								
							;
    break;}
case 153:
#line 950 "grammar.yacc"
{								
								allocExpression(new CInfOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInf,"<");							
							;
    break;}
case 154:
#line 955 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSup))
								{
									yyerror("erreur sémantique l'operateur > n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);								
							;
    break;}
case 155:
#line 965 "grammar.yacc"
{								
								allocExpression(new CSupOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSup,">");							
							;
    break;}
case 156:
#line 970 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSupEq))
								{
									yyerror("erreur sémantique l'operateur >= n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
							;
    break;}
case 157:
#line 980 "grammar.yacc"
{								
								allocExpression(new CSupEqOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSupEq,">=");
							;
    break;}
case 158:
#line 985 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInfEq))
								{
									yyerror("erreur sémantique l'operateur <= n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 159:
#line 995 "grammar.yacc"
{								
								allocExpression(new CInfEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInfEq,"<=");
							;
    break;}
case 160:
#line 1000 "grammar.yacc"
{
								setTypeExpressionG();	
								allocExpression(NULL);														
							;
    break;}
case 161:
#line 1005 "grammar.yacc"
{								
								allocExpression(new CEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opEq,"==");

							;
    break;}
case 162:
#line 1013 "grammar.yacc"
{
								_FacteurEval = true;	
							;
    break;}
case 163:
#line 1017 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opMul))
								{
									yyerror("erreur sémantique l'operateur * n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();								
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 164:
#line 1028 "grammar.yacc"
{									
								setTypeExpressionD(NLAIC::CTypeOfOperator::opMul,"+");
								allocExpression(new CMulOpCode,false);
								_FacteurEval = false;
							;
    break;}
case 165:
#line 1034 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiv))
								{
									yyerror("erreur sémantique l'operateur / n'est pas supporté par cette expression");
									return 0;
								}*/
											
								setTypeExpressionG();
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 166:
#line 1046 "grammar.yacc"
{																
								allocExpression(new CDivOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiv,"/");
								_FacteurEval = false;	
							;
    break;}
case 167:
#line 1055 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PExec);
							;
    break;}
case 168:
#line 1060 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAchieve);
							;
    break;}
case 169:
#line 1065 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAsk);
							;
    break;}
case 170:
#line 1070 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PBreak);
							;
    break;}
case 171:
#line 1075 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PError);
							;
    break;}
case 172:
#line 1080 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PTell);
							;
    break;}
case 173:
#line 1085 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PKill);
							;
    break;}
case 174:
#line 1090 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PEven);
							;
    break;}
case 175:
#line 1095 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVarNill();
							;
    break;}
case 176:
#line 1101 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVar();
							;
    break;}
case 177:
#line 1106 "grammar.yacc"
{								
								_IsFacteurIsExpression = false;
								if(!processingVar())
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 178:
#line 1116 "grammar.yacc"
{								
								_IsFacteurIsExpression = true;								
								setMethodVar();
							;
    break;}
case 179:
#line 1121 "grammar.yacc"
{							
								_IsFacteurIsExpression = true;
							;
    break;}
case 180:
#line 1125 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 181:
#line 1129 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 182:
#line 1133 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 183:
#line 1137 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 184:
#line 1141 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 185:
#line 1145 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 186:
#line 1149 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 187:
#line 1153 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 188:
#line 1160 "grammar.yacc"
{
								_LasVarStr.clear();
								_LasVarStr.push_back(NLAISCRIPT::CStringType(LastyyText[1]));
								_LastFact.VarType = varTypeUndef;
								_IsFacteurIsExpression = false;	
								_FromStack.push_back(false);							
							;
    break;}
case 189:
#line 1169 "grammar.yacc"
{
								_LasVarStr.clear();
								cleanTypeList();
								_LasVarStr.push_back(LastyyText[1]);
								setMethodVar();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);

							;
    break;}
case 190:
#line 1181 "grammar.yacc"
{	
								cleanTypeList();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);
							;
    break;}
case 191:
#line 1190 "grammar.yacc"
{									
								if(_IsFacteurIsExpression)
								{
									IOpType *c = _TypeList.back();
									_TypeList.pop_back();
									c->release();
									_TypeList.push_back(_FlotingExpressionType);
									_FlotingExpressionType->incRef();
									_LasVarStr.clear();
									_FromStack.pop_back();
								}
								_LasVarStr.push_back(LastyyText[1]);
							;
    break;}
case 192:
#line 1207 "grammar.yacc"
{									
								setListVar();
							;
    break;}
case 194:
#line 1215 "grammar.yacc"
{									
								setChaineVar();
							;
    break;}
case 195:
#line 1221 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));								
							;
    break;}
case 196:
#line 1225 "grammar.yacc"
{								
								_LastBloc->addCode((new CAddOpCode));
							;
    break;}
case 197:
#line 1231 "grammar.yacc"
{
								_LastStringParam.push_back(new NLAIAGENT::CGroupType());								

							;
    break;}
case 198:
#line 1236 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
							;
    break;}
case 200:
#line 1242 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 201:
#line 1246 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 202:
#line 1253 "grammar.yacc"
{							
								_LastStringParam.back()->cpy(NLAIAGENT::CStringType(NLAIAGENT::CStringVarName(LastyyText[1])));
								_Param.push_back(new CParam);								
							;
    break;}
case 203:
#line 1260 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );				
						;
    break;}
case 204:
#line 1265 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 205:
#line 1269 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
//							_LastBloc->addCode( new CLdbNewOpCode(CRule()) );		
							setStackVar( CVar::IdVar );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tUndef);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::Rule::idRule;
						;
    break;}
case 207:
#line 1284 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 208:
#line 1288 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbNewOpCode( CClause() ) );
							//_LastBloc->addCode( new CAddOpCode() );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::CClause::idCClause;
						;
    break;}
case 209:
#line 1300 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 210:
#line 1304 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 211:
#line 1308 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );							
						;
    break;}
case 212:
#line 1313 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );													
						;
    break;}
case 213:
#line 1319 "grammar.yacc"
{
							_LastBloc->addCode( new CTellOpCode() );
						;
    break;}
case 214:
#line 1325 "grammar.yacc"
{
							/*char buf[256];
							strcpy(buf, LastyyText[1]);
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CBoolType( NLAIAGENT::CStringVarName(LastyyText[1]) ) ) );
							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
							_LastFact.varType = varForFunc;
							_LastFact.isUsed = false;
							_lastIdentType = NLAIAGENT::CVar::idBoolType;
							*/
						;
    break;}
case 215:
#line 1338 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
							char *txt = LastyyText[1];
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode(new CAddOpCode() );
							//_LastAssert = NLAIAGENT::CStringVarName(LastyyText[1]);
						;
    break;}
case 216:
#line 1346 "grammar.yacc"
{
/*							setStackVar( CFactPattern::IdFactPattern );
							IBaseAssert *my_assert = _FactBase->addAssert( _LastAssert, _NbLogicParams );
							_NbLogicParams = 0;
							_LastBloc->addCode(new CLdbNewOpCode( CFactPattern( my_assert ) ) );
							*/
						;
    break;}
case 217:
#line 1356 "grammar.yacc"
{
						;
    break;}
case 218:
#line 1363 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 219:
#line 1369 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 221:
#line 1378 "grammar.yacc"
{
							char buf[256];
							strcpy(buf, LastyyText[1]);
							setStackVar( CVar::IdVar );
							_LastBloc->addCode( new CLdbOpCode(CVar( LastyyText[1] )) );
						;
    break;}
case 222:
#line 1388 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
						;
    break;}
case 224:
#line 1395 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 225:
#line 1399 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 226:
#line 1403 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 227:
#line 1407 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 228:
#line 1413 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );
						;
    break;}
case 229:
#line 1418 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 230:
#line 1422 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyRule() ) );		
							setStackVar(CFuzzyRule::IdFuzzyRule);
						;
    break;}
case 231:
#line 1430 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 232:
#line 1434 "grammar.yacc"
{
							
						;
    break;}
case 233:
#line 1440 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 234:
#line 1444 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 236:
#line 1451 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							// Composant?
							char *txt = LastyyText[0];
/*							_lastFVarIndex = ((IClassInterpret *)_selfClass.get())->getComponentIndex(NLAIAGENT::CStringVarName(LastyyText[1]));
							if (_lastFVarIndex != -1 )
							{
								_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CDigitalType(_lastFVarIndex) ) );
								_LastBloc->addCode( new CAddOpCode() );
							}
							else
							{
								// Variable locale?
							}
							*/

						;
    break;}
case 237:
#line 1469 "grammar.yacc"
{
							_LastString = NLAIAGENT::CStringVarName( LastyyText[0] );
						;
    break;}
case 238:
#line 1473 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++ );
							_LastBloc->addCode(new CLdbNewOpCode( CSimpleFuzzyCond(NULL, NULL) ) );
						;
    break;}
case 239:
#line 1480 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 240:
#line 1484 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 241:
#line 1489 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 242:
#line 1493 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyVar(NLAIAGENT::CStringVarName("Inst"),0,1) ) );
						;
    break;}
case 243:
#line 1500 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 244:
#line 1504 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 246:
#line 1511 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1515 "grammar.yacc"

