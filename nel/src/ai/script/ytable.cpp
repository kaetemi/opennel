
/*  A Bison parser, made from grammar.yacc
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FIN	258
#define	NOMBRE	259
#define	IDENT	260
#define	PAR_G	261
#define	PAR_D	262
#define	ACCOL_G	263
#define	ACCOL_D	264
#define	CROCHER_G	265
#define	CROCHER_D	266
#define	EG_MATH	267
#define	VIRGULE	268
#define	EG_LOG	269
#define	SUP	270
#define	INF	271
#define	SUP_EG	272
#define	INF_EG	273
#define	DIFF	274
#define	OR_LOG	275
#define	AND_LOG	276
#define	NON_BIN	277
#define	OR_BIN	278
#define	AND_BIN	279
#define	XOR_BIN	280
#define	SCOP	281
#define	PLUS	282
#define	MOINS	283
#define	FOIS	284
#define	DIV	285
#define	POWER	286
#define	POINT_VI	287
#define	LEPOINT	288
#define	POINT_DEUX	289
#define	INTERROGATION	290
#define	CHAINE	291
#define	NILL	292
#define	EXEC	293
#define	ACHIEVE	294
#define	ASK	295
#define	BREAK	296
#define	TELL	297
#define	KILL	298
#define	PERROR	299
#define	EVEN	300
#define	BEGIN_GRAMMAR	301
#define	FROM	302
#define	DEFINE	303
#define	GROUP	304
#define	COMPONENT	305
#define	CONSTRUCTION	306
#define	DESTRUCTION	307
#define	MESSAGE_MANAGER	308
#define	MAESSAGELOOP	309
#define	LOCAL	310
#define	STATIC	311
#define	AS	312
#define	DIGITAL	313
#define	COLLECTOR	314
#define	WITH	315
#define	DO	316
#define	END	317
#define	IF	318
#define	THEN	319
#define	BEGINING	320
#define	END_GRAMMAR	321
#define	NEW	322
#define	TRIGGER	323
#define	PRECONDITION	324
#define	POSTCONDITION	325
#define	GOAL	326
#define	RETURN	327
#define	COMMENT	328
#define	STEPS	329
#define	LOGICVAR	330
#define	RULE	331
#define	IA_ASSERT	332
#define	OR	333
#define	AND	334
#define	FUZZY	335
#define	FUZZYRULE	336
#define	FUZZYRULESET	337
#define	SETS	338
#define	FUZZYVAR	339
#define	FIS	340
#define	COS	341
#define	SIN	342
#define	TAN	343
#define	POW	344
#define	LN	345
#define	LOG	346
#define	FACT	347

#line 1 "grammar.yacc"

#include <malloc.h>
#include <list>
#define PARSER_NO_REDEF_YYTABLE_H_
#include "nel/ai/script/compilateur.h"
#include "nel/ai/script/constraint.h"
#include "nel/ai/script/type_def.h"
#include "nel/ai/script/object_unknown.h"
#include "nel/ai/logic/logic.h"
#include "nel/ai/fuzzy/fuzzy.h"
#include "nel/ai/logic/interpret_object_operator.h"
#include "nel/ai/script/interpret_fsm.h"

using  namespace NLAISCRIPT;
using  namespace NLAILOGIC;
using  namespace NLAIFUZZY;
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		393
#define	YYFLAG		-32768
#define	YYNTBASE	93

#define YYTRANSLATE(x) ((unsigned)(x) <= 347 ? yytranslate[x] : 241)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,    10,    14,    16,    21,    22,    29,    31,
    34,    35,    40,    43,    46,    47,    55,    57,    61,    63,
    65,    67,    70,    72,    74,    76,    78,    80,    85,    89,
    91,    94,    98,    99,   103,   104,   108,   110,   112,   114,
   116,   120,   121,   122,   129,   130,   131,   138,   139,   140,
   147,   149,   150,   154,   155,   159,   161,   164,   166,   169,
   170,   171,   172,   183,   184,   191,   193,   194,   198,   201,
   203,   206,   207,   213,   217,   219,   221,   223,   225,   226,
   230,   231,   236,   238,   242,   244,   248,   251,   253,   254,
   255,   262,   264,   268,   270,   272,   274,   277,   280,   282,
   285,   288,   291,   294,   295,   296,   306,   307,   312,   314,
   315,   320,   321,   327,   328,   333,   335,   337,   339,   343,
   346,   348,   350,   351,   357,   358,   359,   369,   371,   374,
   377,   381,   383,   385,   388,   389,   395,   397,   398,   404,
   405,   410,   415,   422,   424,   428,   430,   432,   437,   439,
   441,   444,   445,   450,   451,   456,   459,   460,   465,   466,
   471,   472,   477,   478,   483,   484,   489,   490,   495,   497,
   498,   503,   504,   509,   511,   513,   515,   517,   519,   521,
   523,   525,   527,   529,   531,   533,   537,   539,   541,   543,
   545,   547,   549,   551,   553,   555,   559,   563,   567,   568,
   573,   575,   577,   580,   581,   582,   589,   592,   594,   596,
   597,   598,   605,   607,   608,   612,   614,   615,   620,   624,
   627,   630,   631,   638,   641,   643,   644,   648,   651,   652,
   657,   658,   662,   663,   667,   668,   669,   676,   677,   681,
   683,   684,   689,   690,   691,   699,   700,   701,   702,   710,
   712,   713,   717
};

static const short yyrhs[] = {    94,
     0,    93,    94,     0,    98,     8,   105,     9,     0,    98,
     8,     9,     0,    95,     0,    97,     6,     7,    62,     0,
     0,    97,     6,     7,    96,   156,    62,     0,    53,     0,
    99,   101,     0,     0,    47,     5,   100,    34,     0,    48,
   102,     0,    48,     5,     0,     0,    49,    16,   190,   103,
    13,   104,    15,     0,     5,     0,   104,    13,     5,     0,
   106,     0,   105,     0,   107,     0,   107,   106,     0,   108,
     0,   140,     0,   110,     0,   111,     0,   109,     0,    50,
    34,   178,    62,     0,    50,    34,    62,     0,   115,     0,
   115,   110,     0,    74,    34,   112,     0,     0,     5,   113,
    32,     0,     0,     5,   114,   112,     0,   116,     0,   117,
     0,   123,     0,   120,     0,    73,    34,    36,     0,     0,
     0,    69,    34,   118,   126,   119,    62,     0,     0,     0,
    71,   121,    34,   135,   122,    32,     0,     0,     0,    70,
    34,   124,   126,   125,    62,     0,   128,     0,     0,   128,
   127,   126,     0,     0,   130,   129,    32,     0,   131,     0,
   135,    32,     0,   156,     0,    35,     5,     0,     0,     0,
     0,    80,     6,     5,   132,    85,   133,     5,   134,     7,
    32,     0,     0,    35,     6,     5,   136,   137,     7,     0,
   139,     0,     0,   139,   138,   137,     0,    35,     5,     0,
   141,     0,   140,   141,     0,     0,   143,   144,   156,   142,
    62,     0,   143,   144,    62,     0,     5,     0,    52,     0,
   145,     0,   147,     0,     0,     6,   146,     7,     0,     0,
     6,   148,   149,     7,     0,   150,     0,   149,    13,   104,
     0,   104,     0,   150,    32,   104,     0,   151,   154,     0,
     5,     0,     0,     0,     5,   152,    16,     5,   153,    15,
     0,   155,     0,   154,    13,   155,     0,     5,     0,   157,
     0,   172,     0,   156,   157,     0,   156,   172,     0,    32,
     0,   161,    32,     0,   158,    32,     0,   163,    32,     0,
   171,    32,     0,     0,     0,     5,   159,    28,    15,    57,
     6,     5,   160,     7,     0,     0,   204,   162,    12,   191,
     0,   165,     0,     0,   163,    33,   164,   165,     0,     0,
   168,     6,   166,   170,   169,     0,     0,   168,     6,   167,
   169,     0,   204,     0,     7,     0,   191,     0,   170,    13,
   191,     0,    72,   191,     0,   175,     0,   173,     0,     0,
   191,    35,   174,   156,    62,     0,     0,     0,    63,   191,
    35,   176,   156,    34,   177,   156,    62,     0,    32,     0,
   179,    32,     0,   178,    32,     0,   178,   179,    32,     0,
   180,     0,   186,     0,   184,    15,     0,     0,   184,    13,
    55,   181,    15,     0,   182,     0,     0,   184,    13,    56,
   183,    15,     0,     0,     5,   185,    16,    36,     0,    59,
    16,   190,    15,     0,    59,    16,   190,    13,   187,    15,
     0,   188,     0,   187,    13,   188,     0,     5,     0,   189,
     0,   203,    33,    33,   203,     0,    36,     0,   200,     0,
    28,   200,     0,     0,   191,   192,    27,   200,     0,     0,
   191,   193,    28,   200,     0,    22,   200,     0,     0,   191,
   194,    19,   200,     0,     0,   191,   195,    16,   200,     0,
     0,   191,   196,    15,   200,     0,     0,   191,   197,    17,
   200,     0,     0,   191,   198,    18,   200,     0,     0,   191,
   199,    14,   200,     0,   203,     0,     0,   200,   201,    29,
   203,     0,     0,   200,   202,    30,   203,     0,    38,     0,
    39,     0,    40,     0,    41,     0,    44,     0,    42,     0,
    43,     0,    45,     0,    37,     0,     4,     0,   204,     0,
   163,     0,     6,   191,     7,     0,   205,     0,   209,     0,
   207,     0,   225,     0,   221,     0,   214,     0,   231,     0,
   226,     0,     5,     0,   163,    33,     5,     0,   203,    33,
     5,     0,   204,    33,     5,     0,     0,    10,   206,   208,
    11,     0,    36,     0,   191,     0,   208,   191,     0,     0,
     0,    67,   210,   213,     6,   211,   212,     0,   170,     7,
     0,     7,     0,     5,     0,     0,     0,    76,   217,   215,
    64,   216,   219,     0,   217,     0,     0,    63,   218,   219,
     0,   221,     0,     0,   221,   220,    79,   219,     0,   221,
    78,   219,     0,    77,   221,     0,    31,     5,     0,     0,
    35,     6,     5,   222,   223,     7,     0,    35,     5,     0,
   191,     0,     0,   191,   224,   223,     0,    35,     5,     0,
     0,    82,     8,   227,   228,     0,     0,   231,   229,     9,
     0,     0,   231,   230,   228,     0,     0,     0,    81,   234,
   232,    64,   233,   236,     0,     0,    63,   235,   236,     0,
   238,     0,     0,   238,   237,    79,   236,     0,     0,     0,
     6,     5,   239,    85,     5,   240,     7,     0,     0,     0,
     0,    84,     0,     5,     0,    83,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   191,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    67,    71,    74,    82,    88,    91,    95,   101,   107,   117,
   120,   136,   138,   139,   158,   161,   164,   165,   167,   168,
   171,   172,   175,   176,   177,   185,   188,   191,   192,   195,
   196,   199,   203,   213,   213,   223,   225,   226,   227,   228,
   232,   248,   254,   274,   277,   283,   324,   327,   333,   355,
   357,   361,   366,   372,   377,   377,   393,   408,   469,   477,
   484,   488,   492,   495,   504,   508,   512,   517,   519,   527,
   528,   531,   590,   590,   651,   659,   669,   670,   673,   678,
   683,   687,   693,   694,   697,   698,   701,   705,   710,   715,
   722,   725,   726,   729,   736,   737,   738,   739,   742,   743,
   744,   745,   752,   759,   764,   772,   774,   784,   796,   797,
   802,   805,   812,   813,   821,   823,   830,   843,   847,   854,
   861,   862,   865,   871,   877,   884,   889,   895,   896,   897,
   898,   901,   902,   906,   907,   913,   913,   917,   923,   925,
   931,   946,   947,   950,   951,   954,   955,   958,   960,   963,
   971,   977,   989,   994,  1005,  1010,  1021,  1031,  1037,  1048,
  1053,  1063,  1068,  1078,  1083,  1093,  1098,  1103,  1111,  1115,
  1126,  1132,  1144,  1152,  1158,  1163,  1168,  1173,  1178,  1183,
  1188,  1193,  1198,  1204,  1214,  1219,  1223,  1227,  1231,  1235,
  1239,  1243,  1247,  1251,  1258,  1267,  1279,  1287,  1305,  1310,
  1313,  1319,  1323,  1329,  1334,  1339,  1340,  1344,  1351,  1358,
  1364,  1368,  1379,  1382,  1387,  1398,  1402,  1406,  1410,  1417,
  1423,  1435,  1444,  1454,  1461,  1467,  1474,  1476,  1486,  1491,
  1493,  1498,  1501,  1506,  1511,  1517,  1521,  1528,  1533,  1538,
  1542,  1546,  1549,  1567,  1572,  1578,  1583,  1588,  1592,  1598,
  1602,  1607,  1609
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FIN","NOMBRE",
"IDENT","PAR_G","PAR_D","ACCOL_G","ACCOL_D","CROCHER_G","CROCHER_D","EG_MATH",
"VIRGULE","EG_LOG","SUP","INF","SUP_EG","INF_EG","DIFF","OR_LOG","AND_LOG","NON_BIN",
"OR_BIN","AND_BIN","XOR_BIN","SCOP","PLUS","MOINS","FOIS","DIV","POWER","POINT_VI",
"LEPOINT","POINT_DEUX","INTERROGATION","CHAINE","NILL","EXEC","ACHIEVE","ASK",
"BREAK","TELL","KILL","PERROR","EVEN","BEGIN_GRAMMAR","FROM","DEFINE","GROUP",
"COMPONENT","CONSTRUCTION","DESTRUCTION","MESSAGE_MANAGER","MAESSAGELOOP","LOCAL",
"STATIC","AS","DIGITAL","COLLECTOR","WITH","DO","END","IF","THEN","BEGINING",
"END_GRAMMAR","NEW","TRIGGER","PRECONDITION","POSTCONDITION","GOAL","RETURN",
"COMMENT","STEPS","LOGICVAR","RULE","IA_ASSERT","OR","AND","FUZZY","FUZZYRULE",
"FUZZYRULESET","SETS","FUZZYVAR","FIS","COS","SIN","TAN","POW","LN","LOG","FACT",
"program","DefinitionClass","MessageRun","@1","MessageManager","CorpDeDefinition",
"HeritageDeType","@2","EnteteDeDefinition","DefinitionDeGroup","@3","CParam",
"DefinitionDeProgram","BlocDeDefinition","UnBloc","Register","RegistDesAttributs",
"RegisterOperator","RegisterSteps","Steps","@4","@5","OpBloc","OpComment","PreCondition",
"@6","@7","Goal","@8","@9","PostCondition","@10","@11","OperatorCond","@12",
"SingleOpCond","@13","BooleanCond","FuzzyCond","@14","@15","@16","FirstOrderPattern",
"@17","OpLogicVarSet","@18","OpLogicVar","BlocPourLesCode","BlocAvecCode","@19",
"Methode","Argument","ArgumentVide","@20","ArgumentListe","@21","ListesDeVariables",
"DesParams","TypeOfParam","@22","@23","DeclarationVariables","NonDeVariable",
"DuCode","Code","StaticCast","@24","@25","Affectation","@26","AppelleDeFonction",
"@27","AppelleDeFoncDirect","@28","@29","NonDeFonction","CallFunction","Prametre",
"RetourDeFonction","Evaluation","EvaluationSimpleState","@30","EvaluationState",
"@31","@32","TypeDeDeclaration","RegisterAnyVar","RegisterTypeDef","@33","StaticDef",
"@34","TypeDeComp","@35","RegisterCollector","MessageType","DefMessage","Borne",
"Nom","Expression","@36","@37","@38","@39","@40","@41","@42","@43","Term","@44",
"@45","Facteur","Variable","List","@46","ChaineDeCaractaire","ElementList","NewObject",
"@47","@48","PrametreNew","NewObjectName","Rule","@49","@50","RuleCondition",
"@51","Clause","@52","FactPattern","@53","LogicVarSet","@54","LogicVar","FuzzyRuleSet",
"@55","ListFuzzyRule","@56","@57","FuzzyRule","@58","@59","FuzzyCondition","@60",
"FuzzyClause","@61","FuzzyFactPattern","@62","@63", NULL
};
#endif

static const short yyr1[] = {     0,
    93,    93,    94,    94,    94,    95,    96,    95,    97,    98,
   100,    99,   101,   101,   103,   102,   104,   104,   105,   105,
   106,   106,   107,   107,   107,   107,   108,   109,   109,   110,
   110,   111,   113,   112,   114,   112,   115,   115,   115,   115,
   116,   118,   119,   117,   121,   122,   120,   124,   125,   123,
   126,   127,   126,   129,   128,   128,   128,   128,   130,   132,
   133,   134,   131,   136,   135,   137,   138,   137,   139,   140,
   140,   142,   141,   141,   143,   143,   144,   144,   146,   145,
   148,   147,   149,   149,   150,   150,   104,   151,   152,   153,
   151,   154,   154,   155,   156,   156,   156,   156,   157,   157,
   157,   157,   157,   159,   160,   158,   162,   161,   163,   164,
   163,   166,   165,   167,   165,   168,   169,   170,   170,   171,
   172,   172,   174,   173,   176,   177,   175,   178,   178,   178,
   178,   179,   179,   180,   181,   180,   180,   183,   182,   185,
   184,   186,   186,   187,   187,   188,   188,   189,   190,   191,
   191,   192,   191,   193,   191,   191,   194,   191,   195,   191,
   196,   191,   197,   191,   198,   191,   199,   191,   200,   201,
   200,   202,   200,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   204,   204,   204,   204,   206,   205,
   207,   208,   208,   210,   211,   209,   212,   212,   213,   215,
   216,   214,    -1,   218,   217,   219,   220,   219,   219,    -1,
    -1,   222,   221,   221,   223,   224,   223,   225,   227,   226,
   229,   228,   230,   228,   232,   233,   231,   235,   234,   236,
   237,   236,   239,   240,   238,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1
};

static const short yyr2[] = {     0,
     1,     2,     4,     3,     1,     4,     0,     6,     1,     2,
     0,     4,     2,     2,     0,     7,     1,     3,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     4,     3,     1,
     2,     3,     0,     3,     0,     3,     1,     1,     1,     1,
     3,     0,     0,     6,     0,     0,     6,     0,     0,     6,
     1,     0,     3,     0,     3,     1,     2,     1,     2,     0,
     0,     0,    10,     0,     6,     1,     0,     3,     2,     1,
     2,     0,     5,     3,     1,     1,     1,     1,     0,     3,
     0,     4,     1,     3,     1,     3,     2,     1,     0,     0,
     6,     1,     3,     1,     1,     1,     2,     2,     1,     2,
     2,     2,     2,     0,     0,     9,     0,     4,     1,     0,
     4,     0,     5,     0,     4,     1,     1,     1,     3,     2,
     1,     1,     0,     5,     0,     0,     9,     1,     2,     2,
     3,     1,     1,     2,     0,     5,     1,     0,     5,     0,
     4,     4,     6,     1,     3,     1,     1,     4,     1,     1,
     2,     0,     4,     0,     4,     2,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     4,     0,     4,     1,     0,
     4,     0,     4,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     3,     3,     3,     0,     4,
     1,     1,     2,     0,     0,     6,     2,     1,     1,     0,
     0,     6,     1,     0,     3,     1,     0,     4,     3,     2,
     2,     0,     6,     2,     1,     0,     3,     2,     0,     4,
     0,     3,     0,     3,     0,     0,     6,     0,     3,     1,
     0,     4,     0,     0,     7,     0,     0,     0,     7,     1,
     0,     3,     1
};

static const short yydefact[] = {     0,
     0,     9,     0,     1,     5,     0,     0,     0,    11,     2,
     0,     0,     0,    10,     0,     7,    75,     4,     0,    76,
     0,     0,    45,     0,     0,     0,    19,    21,    23,    27,
    25,    26,    30,    37,    38,    40,    39,    24,    70,     0,
    14,     0,    13,    12,     6,     0,     0,    42,    48,     0,
     0,     0,     3,    22,    31,    71,    79,     0,    77,    78,
     0,   183,   195,     0,   199,     0,     0,    99,     0,   201,
   182,   174,   175,   176,   177,   179,   180,   178,   181,     0,
   204,     0,     0,     0,     0,     0,    95,     0,     0,   185,
   109,     0,     0,    96,   122,   121,   152,   150,   169,   184,
   187,   189,   188,   192,   191,   190,   194,   193,   140,   128,
     0,    29,     0,     0,   132,   137,     0,   133,     0,     0,
     0,    41,    33,    32,     0,     0,    74,    72,   149,    15,
     0,   195,   185,   152,   184,     0,   156,   151,   224,     0,
   152,     0,   120,   214,   210,   238,   235,   229,     8,    97,
    98,   101,   100,   102,   110,   112,   103,   123,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   130,    28,     0,   129,     0,   134,     0,
     0,    43,    52,    54,    56,     0,    58,    49,     0,    46,
     0,     0,    80,    17,    85,     0,    83,     0,     0,     0,
     0,   186,   202,     0,   222,   125,   209,     0,     0,     0,
     0,     0,     0,   196,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   197,   198,
     0,     0,     0,   131,   135,   138,   224,     0,     0,     0,
     0,     0,    57,     0,     0,     0,    34,    36,     0,     0,
    82,     0,     0,    94,    87,    92,    73,     0,     0,   200,
   203,     0,     0,   205,     0,   215,   216,   211,     0,   239,
   240,   236,   230,   231,   111,     0,     0,   118,   117,   115,
     0,   153,   155,   158,   160,   162,   164,   166,   168,   171,
   173,   108,   141,     0,   142,     0,     0,   222,    60,    44,
    53,    55,    50,    64,    47,     0,    18,    84,    86,     0,
     0,     0,   226,     0,     0,     0,   224,     0,     0,     0,
   243,     0,     0,     0,     0,     0,   113,   124,   146,     0,
   144,   147,     0,   136,   139,     0,     0,    90,    93,    16,
     0,     0,   223,   126,   208,     0,   206,   219,     0,   212,
     0,     0,   237,   232,   234,   119,     0,   143,     0,     0,
     0,    66,    61,     0,   105,   227,     0,   207,   218,     0,
   242,   145,     0,    69,    65,     0,     0,    91,     0,     0,
   244,   148,    68,    62,   106,   127,     0,     0,   245,     0,
    63,     0,     0
};

static const short yydefgoto[] = {     3,
     4,     5,    46,     6,     7,     8,    15,    14,    43,   200,
   195,    26,    27,    28,    29,    30,    31,    32,   124,   191,
   192,    33,    34,    35,   119,   240,    36,    50,   246,    37,
   120,   244,   182,   241,   183,   242,   184,   185,   337,   377,
   388,   186,   336,   361,   376,   362,    38,    39,   199,    40,
    58,    59,   125,    60,   126,   196,   197,   198,   249,   364,
   255,   256,   187,    87,    88,   131,   379,    89,   171,   133,
   215,    91,   216,   217,    92,   280,   277,    93,    94,    95,
   218,    96,   263,   367,   113,   114,   115,   296,   116,   297,
   117,   172,   118,   330,   331,   332,   130,    97,   159,   160,
   161,   162,   163,   164,   165,   166,    98,   167,   168,    99,
   135,   101,   136,   102,   204,   103,   142,   316,   347,   208,
   104,   210,   320,   145,   209,   266,   319,   105,   262,   314,
   342,   106,   107,   213,   273,   324,   325,   108,   212,   323,
   147,   211,   270,   322,   271,   351,   387
};

static const short yypact[] = {   -18,
    20,-32768,    16,-32768,-32768,    28,    59,    -7,-32768,-32768,
    51,   173,    15,-32768,    49,    37,-32768,-32768,    69,-32768,
    81,    90,-32768,   108,   123,   135,-32768,   211,-32768,-32768,
-32768,-32768,   206,-32768,-32768,-32768,-32768,    10,-32768,   124,
-32768,   139,-32768,-32768,-32768,   527,     6,-32768,-32768,   125,
   143,   166,-32768,-32768,-32768,-32768,   176,   148,-32768,-32768,
   158,-32768,   168,   625,-32768,   636,   636,-32768,   101,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   625,
-32768,   625,   146,   159,   218,   268,-32768,   195,   196,    96,
-32768,   225,   204,-32768,-32768,-32768,   121,   104,   201,    24,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   222,-32768,    38,   207,-32768,-32768,    36,-32768,   323,   323,
   205,-32768,   259,-32768,   238,   260,-32768,   527,-32768,-32768,
   255,-32768,   233,   234,    11,   625,   104,   104,-32768,   282,
   186,   283,   240,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   284,   285,-32768,-32768,   264,   265,
   275,   279,   286,   297,   281,   288,   287,   289,   310,   312,
   306,   304,   158,-32768,-32768,   292,-32768,    91,-32768,   145,
   319,-32768,   270,-32768,-32768,   294,   527,-32768,   331,-32768,
   307,   166,-32768,    32,   325,    46,   309,   337,   290,   330,
   332,-32768,   240,    50,-32768,-32768,-32768,   340,   313,   293,
   347,   305,   273,-32768,   636,   625,   349,   527,   636,   636,
   636,   636,   636,   636,   636,   636,   636,   636,-32768,-32768,
   625,   334,    66,-32768,-32768,-32768,   339,   367,   368,   314,
   323,   342,-32768,   315,   370,   350,-32768,-32768,   365,   378,
-32768,   260,   260,-32768,   372,-32768,-32768,   260,   335,-32768,
   240,   625,   527,-32768,   202,-32768,   134,-32768,   382,-32768,
   318,-32768,-32768,   308,   355,   201,    64,   240,-32768,-32768,
   374,   104,   104,   104,   104,   104,   104,   104,   104,   201,
   201,   240,-32768,   684,-32768,   376,   379,   358,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   393,-32768,   325,   325,   337,
   105,   394,    94,   400,   425,   576,-32768,   313,   322,   313,
-32768,   329,   347,   411,   273,   625,-32768,-32768,    33,   110,
-32768,-32768,   388,-32768,-32768,   387,   338,-32768,-32768,-32768,
   419,   625,-32768,-32768,-32768,    89,-32768,-32768,   313,-32768,
   341,   347,-32768,-32768,-32768,   240,   684,-32768,    17,   420,
   421,   392,-32768,   417,-32768,-32768,   527,-32768,-32768,   428,
-32768,-32768,   636,-32768,-32768,   387,   429,-32768,   431,   476,
-32768,   201,-32768,-32768,-32768,-32768,   432,   433,-32768,   410,
-32768,   443,-32768
};

static const short yypgoto[] = {-32768,
   441,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -225,-32768,   423,-32768,-32768,-32768,   412,-32768,   256,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -114,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   328,-32768,    76,-32768,-32768,-32768,   416,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   161,   -45,   -83,-32768,-32768,-32768,-32768,-32768,   -46,
-32768,   243,-32768,-32768,-32768,   197,   156,-32768,   -82,-32768,
-32768,-32768,-32768,-32768,-32768,   360,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   118,-32768,   303,   -56,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -57,-32768,-32768,  -196,
   -44,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -297,-32768,  -204,-32768,   136,
-32768,-32768,-32768,-32768,   152,-32768,-32768,  -206,-32768,-32768,
-32768,-32768,  -305,-32768,-32768,-32768,-32768
};


#define	YYLAST		766


static const short yytable[] = {    90,
    86,   100,   150,   151,   267,   188,   274,   134,   137,   138,
   109,    90,   128,   100,    17,   392,  -116,   353,   276,    41,
   348,   229,   350,   141,     9,   143,   308,   309,     1,  -116,
   290,   291,   311,    11,     2,  -107,   -88,   110,  -195,    90,
    13,   100,   109,   170,   150,   151,   371,   -89,   178,   373,
   179,   369,   251,    62,   132,    64,   170,    16,   252,    65,
   260,    20,     1,    42,   111,  -195,    12,   112,     2,   174,
   279,    66,    90,    90,   100,   100,   326,    67,   294,   203,
   295,    90,    44,   100,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,   368,   111,   333,    45,   175,
  -225,   326,    47,   150,   151,   139,   140,  -167,  -161,  -159,
  -163,  -165,  -157,   267,    48,   267,    81,   250,   274,   340,
  -152,  -154,   357,    49,   358,    83,   301,   154,   155,    57,
    84,    85,  -170,  -172,  -167,  -161,  -159,  -163,  -165,  -157,
    90,    51,   100,    53,   267,   235,   236,   261,  -154,   237,
   238,    62,    63,    64,    61,   158,    52,    65,   121,   278,
   333,   282,   283,   284,   285,   286,   287,   288,   289,    66,
   123,    90,   281,   100,   292,    67,   382,    17,   122,    68,
   -81,    18,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,   129,    90,  -104,   100,   150,   151,  -167,
  -161,  -159,  -163,  -165,  -157,   313,   317,   140,   144,   127,
    80,   318,  -217,  -154,    81,    17,    90,   315,   100,    82,
   206,   146,    19,    83,    20,   148,   152,   153,    84,    85,
   156,   150,   151,   169,    90,   157,   100,   173,   177,   189,
   202,    21,    22,    23,   193,    24,    25,  -167,  -161,  -159,
  -163,  -165,  -157,  -167,  -161,  -159,  -163,  -165,  -157,   278,
    19,  -154,    20,   -35,   194,   155,  -152,  -154,    90,   356,
   100,    62,    63,    64,    21,    22,    23,    65,    24,    21,
    22,    23,   201,    24,    25,   313,   205,   207,   214,    66,
   219,  -114,   220,   221,   222,    67,   150,   151,   225,    68,
   223,   226,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,   224,   229,   227,   230,   231,   228,   232,
    90,   380,   100,   234,   239,   243,    62,    63,    64,   149,
    80,   -51,    65,    90,    81,   100,   245,   250,   247,    82,
   253,   254,   258,    83,    66,   264,   259,   265,    84,    85,
    67,   257,   269,    84,    68,   279,   268,   180,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,   272,   293,
   -59,   298,   299,   302,   304,   300,   303,    62,    63,    64,
   306,   305,   307,    65,   310,    80,   321,  -109,  -233,    81,
   334,   312,   -64,   335,    82,    66,  -241,   338,    83,   341,
   349,    67,   181,    84,    85,    68,   343,   352,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,   354,
   359,   360,   363,   365,   374,   370,   -67,   375,    62,    63,
    64,   378,   381,   384,    65,   328,    80,   385,   389,   390,
    81,   391,   393,    10,    55,    82,    66,   248,   190,    83,
    54,   383,    67,    56,    84,    85,    68,   275,   344,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
   339,   346,   176,   327,   372,   233,   355,   366,     0,    62,
    63,    64,     0,     0,     0,    65,     0,    80,     0,     0,
     0,    81,     0,     0,     0,     0,    82,    66,     0,     0,
    83,     0,     0,    67,     0,    84,    85,    68,     0,     0,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    62,    63,    64,     0,     0,     0,    65,   386,    80,     0,
     0,     0,    81,     0,     0,     0,     0,    82,    66,     0,
     0,    83,     0,     0,    67,     0,    84,    85,    68,     0,
     0,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,     0,     0,     0,     0,     0,     0,     0,    62,
   132,    64,   345,     0,     0,    65,     0,     0,     0,    80,
     0,     0,     0,    81,     0,     0,     0,    66,    82,     0,
     0,     0,    83,    67,     0,     0,     0,    84,    85,     0,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,     0,     0,     0,     0,     0,     0,     0,    62,   132,
    64,     0,     0,     0,    65,     0,     0,     0,     0,    62,
   132,    64,    81,     0,     0,    65,    66,     0,     0,     0,
     0,    83,    67,     0,     0,     0,    84,    85,     0,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,     0,     0,     0,     0,     0,     0,    62,   329,    64,
     0,    81,     0,    65,     0,     0,     0,     0,     0,     0,
    83,     0,    81,     0,     0,    84,    85,     0,     0,     0,
     0,    83,     0,     0,     0,     0,    84,    85,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    81,     0,     0,     0,     0,     0,     0,     0,     0,    83,
     0,     0,     0,     0,    84,    85
};

static const short yycheck[] = {    46,
    46,    46,    86,    86,   209,   120,   213,    64,    66,    67,
     5,    58,    58,    58,     5,     0,     6,   323,   215,     5,
   318,     5,   320,    80,     5,    82,   252,   253,    47,     6,
   227,   228,   258,     6,    53,    12,     5,    32,     6,    86,
    48,    86,     5,    33,   128,   128,   352,    16,    13,    33,
    15,   349,     7,     4,     5,     6,    33,     7,    13,    10,
    11,    52,    47,    49,    59,    33,     8,    62,    53,    32,
     7,    22,   119,   120,   119,   120,    13,    28,    13,   136,
    15,   128,    34,   128,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,     7,    59,   294,    62,    62,
     7,    13,    34,   187,   187,     5,     6,    14,    15,    16,
    17,    18,    19,   318,    34,   320,    67,    13,   325,    15,
    27,    28,    13,    34,    15,    76,   241,    32,    33,     6,
    81,    82,    29,    30,    14,    15,    16,    17,    18,    19,
   187,    34,   187,     9,   349,    55,    56,   204,    28,     5,
     6,     4,     5,     6,    16,    35,    34,    10,    34,   216,
   357,   219,   220,   221,   222,   223,   224,   225,   226,    22,
     5,   218,   218,   218,   231,    28,   373,     5,    36,    32,
     5,     9,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    36,   241,    28,   241,   281,   281,    14,
    15,    16,    17,    18,    19,   262,     5,     6,    63,    62,
    63,    78,    79,    28,    67,     5,   263,   263,   263,    72,
    35,    63,    50,    76,    52,     8,    32,    32,    81,    82,
     6,   315,   315,    33,   281,    32,   281,    16,    32,    35,
     7,    69,    70,    71,     7,    73,    74,    14,    15,    16,
    17,    18,    19,    14,    15,    16,    17,    18,    19,   316,
    50,    28,    52,     5,     5,    33,    27,    28,   315,   326,
   315,     4,     5,     6,    69,    70,    71,    10,    73,    69,
    70,    71,    28,    73,    74,   342,     5,     5,     5,    22,
    27,     7,    28,    19,    16,    28,   380,   380,    18,    32,
    15,    14,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    17,     5,    29,     5,    12,    30,    16,
   367,   367,   367,    32,     6,    32,     4,     5,     6,    62,
    63,    62,    10,   380,    67,   380,     6,    13,    32,    72,
    32,     5,    13,    76,    22,     6,    15,    35,    81,    82,
    28,    62,     6,    81,    32,     7,    64,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    64,    36,
    32,     5,     5,    32,     5,    62,    62,     4,     5,     6,
    16,    32,     5,    10,    13,    63,     5,    33,    81,    67,
    15,    57,    35,    15,    72,    22,    79,     5,    76,     6,
    79,    28,    80,    81,    82,    32,     7,    79,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,     9,
    33,    35,    85,     5,     5,    85,    35,     7,     4,     5,
     6,    15,     5,     5,    10,    62,    63,     7,     7,     7,
    67,    32,     0,     3,    33,    72,    22,   192,   121,    76,
    28,   376,    28,    38,    81,    82,    32,   215,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
   310,   316,   113,   277,   357,   173,   325,   342,    -1,     4,
     5,     6,    -1,    -1,    -1,    10,    -1,    63,    -1,    -1,
    -1,    67,    -1,    -1,    -1,    -1,    72,    22,    -1,    -1,
    76,    -1,    -1,    28,    -1,    81,    82,    32,    -1,    -1,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     4,     5,     6,    -1,    -1,    -1,    10,    62,    63,    -1,
    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    22,    -1,
    -1,    76,    -1,    -1,    28,    -1,    81,    82,    32,    -1,
    -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,
     5,     6,     7,    -1,    -1,    10,    -1,    -1,    -1,    63,
    -1,    -1,    -1,    67,    -1,    -1,    -1,    22,    72,    -1,
    -1,    -1,    76,    28,    -1,    -1,    -1,    81,    82,    -1,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,
     6,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,     4,
     5,     6,    67,    -1,    -1,    10,    22,    -1,    -1,    -1,
    -1,    76,    28,    -1,    -1,    -1,    81,    82,    -1,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,     6,
    -1,    67,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,
    76,    -1,    67,    -1,    -1,    81,    82,    -1,    -1,    -1,
    -1,    76,    -1,    -1,    -1,    -1,    81,    82,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,
    -1,    -1,    -1,    -1,    81,    82
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
CCompilateur::yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 68 "grammar.yacc"
{
								
							;
    break;}
case 3:
#line 78 "grammar.yacc"
{						
								if(!computContraint()) return false;
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 4:
#line 85 "grammar.yacc"
{
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 7:
#line 97 "grammar.yacc"
{
								initMessageManager();
							;
    break;}
case 8:
#line 102 "grammar.yacc"
{
								if(!endMessageManager()) return 0;
							;
    break;}
case 9:
#line 108 "grammar.yacc"
{
								if(_ResultCompile != NULL) 
								{
									yyerror("an MessageManager block had all ready declared");
									return 0;
								}								
							;
    break;}
case 11:
#line 121 "grammar.yacc"
{
								NLAIAGENT::CStringVarName interfName(LastyyText[1]);																																
								try
								{	
									NLAIC::CIdentType id = getTypeOfClass(interfName);
									_SelfClass.push((IClassInterpret *)(((CClassInterpretFactory *)id.getFactory())->getClass()->newInstance()));
									((IClassInterpret *)_SelfClass.get())->setInheritanceName(interfName);
								}
								catch(NLAIE::IException &a)
								{									
									yyerror((char *)a.what());
									return 0;
								}
							;
    break;}
case 14:
#line 140 "grammar.yacc"
{
								try
								{
									NLAIC::CIdentType id(LastyyText[1]);
									char text[1024*4];
									sprintf(text,"class '%s' all ready exist",LastyyText[1]);
									yyerror(text);
									return 0;
								}
								catch(NLAIE::IException &)
								{
									( (IClassInterpret *) _SelfClass.get() )->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
									( (IClassInterpret *) _SelfClass.get() )->buildVTable();
									RegisterClass();
								}
							;
    break;}
case 15:
#line 159 "grammar.yacc"
{
								((IClassInterpret *)_SelfClass.get())->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
							;
    break;}
case 25:
#line 178 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->buildLogicTables();
								}
							;
    break;}
case 33:
#line 204 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[1] ) );
							;
    break;}
case 35:
#line 214 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[0] ) );
							;
    break;}
case 41:
#line 235 "grammar.yacc"
{
								char *txt1 = LastyyText[0];
								char *txt2 = LastyyText[1];
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setComment( LastyyText[1] );
								}


							;
    break;}
case 42:
#line 249 "grammar.yacc"
{
								is_cond = true;
								initParam()
							;
    break;}
case 43:
#line 254 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
/*									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderCond( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
									}
*/
									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
							;
    break;}
case 45:
#line 278 "grammar.yacc"
{
								if ( !classIsAnOperator() )
								 	return 0;
							;
    break;}
case 46:
#line 284 "grammar.yacc"
{
								if ( _Goal ) 
								{
									_Goal->release();
									_Goal = NULL;
								}
								
								if ( classIsAnOperator() )
								{
									// Builds a FactPattern

//							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
//							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );

									// Adds it as goal to the operator class
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setGoal( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
								}
							;
    break;}
case 48:
#line 328 "grammar.yacc"
{
								is_cond = false;
								initParam()
							;
    break;}
case 49:
#line 333 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
/*									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
									}
									*/

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeConc( _LastCodeBranche.back() );
										_LastCodeBranche.pop_back();
									}
								}
							;
    break;}
case 51:
#line 358 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 52:
#line 362 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 53:
#line 366 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 54:
#line 373 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 56:
#line 378 "grammar.yacc"
{

								if ( classIsAnOperator() )
								{

									NLAIAGENT::CStringVarName *vvar = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									NLAIAGENT::CStringVarName *vset = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->addFuzzyCond(vvar, vset);
								}
							;
    break;}
case 57:
#line 395 "grammar.yacc"
{									
								COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
								while ( _LastAsserts.size() )
								{
									if ( is_cond )
										op_class->addFirstOrderCond( _LastAsserts.back(), _LastLogicParams.back() );
									else
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );

									_LastAsserts.pop_back();
									_LastLogicParams.pop_back();
								}
							;
    break;}
case 58:
#line 409 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
//										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_LastCodeBranche.push_back( (IOpCode *) listCode );
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}							

/*								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}				
*/				

							;
    break;}
case 59:
#line 470 "grammar.yacc"
{
							char *param_name = LastyyText[1];
							_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
						;
    break;}
case 60:
#line 479 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 61:
#line 484 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 62:
#line 488 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 64:
#line 498 "grammar.yacc"
{
							const char *assert_name = LastyyText[1];
							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );
						;
    break;}
case 66:
#line 509 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 67:
#line 513 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 69:
#line 520 "grammar.yacc"
{
							char *var_name = LastyyText[1];
							_LastLogicParams.back().push_back( new NLAIAGENT::CStringVarName( var_name ) );
						;
    break;}
case 72:
#line 533 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}

								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}								
								if(!caseRunMsg()) return false;
							;
    break;}
case 74:
#line 592 "grammar.yacc"
{	
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}
								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}
								if(!caseRunMsg()) return false;

							;
    break;}
case 75:
#line 652 "grammar.yacc"
{				
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 76:
#line 660 "grammar.yacc"
{
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 79:
#line 674 "grammar.yacc"
{								
								initParam();
							;
    break;}
case 80:
#line 678 "grammar.yacc"
{
								if(!registerMethod()) return false;
							;
    break;}
case 81:
#line 684 "grammar.yacc"
{
								initParam();
							;
    break;}
case 82:
#line 688 "grammar.yacc"
{
								registerMethod();
							;
    break;}
case 88:
#line 706 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[0]);
								_BaseObjectDef = false;
							;
    break;}
case 89:
#line 711 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 90:
#line 716 "grammar.yacc"
{
								_LastBaseObjectDef = NLAIAGENT::CStringVarName(LastyyText[1]);
								_BaseObjectDef = true;

							;
    break;}
case 94:
#line 730 "grammar.yacc"
{
								if(!setParamVarName()) return 0;
							;
    break;}
case 102:
#line 746 "grammar.yacc"
{
								_LastStringParam.back()->release();
								_LastStringParam.pop_back();
								_Param.back()->release();
								_Param.pop_back();								
							;
    break;}
case 103:
#line 754 "grammar.yacc"
{
								_LastBloc->addCode((new CHaltOpCode));
							;
    break;}
case 104:
#line 760 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 105:
#line 768 "grammar.yacc"
{					
								NLAIAGENT::CStringVarName x(LastyyText[1]);			
								if(!castVariable(_LastString,x)) return false;
							;
    break;}
case 107:
#line 775 "grammar.yacc"
{								
								std::list<NLAISCRIPT::CStringType>::iterator i = _LasVarStr.begin();
								_LasAffectationVarStr.clear();
								while(i != _LasVarStr.end())
								{
									_LasAffectationVarStr.push_back(*i++);
								}												
							;
    break;}
case 108:
#line 785 "grammar.yacc"
{
								if(!affectation()) 
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 110:
#line 798 "grammar.yacc"
{
								
							;
    break;}
case 112:
#line 806 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 114:
#line 814 "grammar.yacc"
{								
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 116:
#line 824 "grammar.yacc"
{
								nameMethodeProcessing();
							;
    break;}
case 117:
#line 831 "grammar.yacc"
{	
								_ExpressionType = _ExpressionTypeTmp.back();
								_ExpressionTypeTmp.pop_back();								
								if(!callFunction())
								{
									_FromStack.pop_back();
									return 0;	
								}
								_FromStack.pop_back();
							;
    break;}
case 118:
#line 844 "grammar.yacc"
{
								pushParamExpression();								
							;
    break;}
case 119:
#line 849 "grammar.yacc"
{
								pushParamExpression();
							;
    break;}
case 120:
#line 856 "grammar.yacc"
{
								if(!typeOfMethod()) return false;
							;
    break;}
case 123:
#line 867 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 124:
#line 872 "grammar.yacc"
{
								interrogationEnd();
							;
    break;}
case 125:
#line 880 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 126:
#line 885 "grammar.yacc"
{								
								ifInterrogationPoint()
							;
    break;}
case 127:
#line 890 "grammar.yacc"
{
								ifInterrogationEnd();
							;
    break;}
case 135:
#line 908 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Local = true;								
							;
    break;}
case 138:
#line 918 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Static = true;
							;
    break;}
case 140:
#line 926 "grammar.yacc"
{								
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
								_LastRegistered = ((IClassInterpret *)_SelfClass.get())->registerComponent(_LastString);
							;
    break;}
case 141:
#line 932 "grammar.yacc"
{
								if(((IClassInterpret *)_SelfClass.get())->getComponent(NLAIAGENT::CStringVarName(LastyyText[1])) == NULL)
								{
									CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);
									c->ObjectName = new NLAIAGENT::CStringVarName(LastyyText[1]);									
								}
								else
								{
									yyerror("variable all ready declared in the Register components");
									return 0;			
								}
							;
    break;}
case 150:
#line 964 "grammar.yacc"
{	
								if(_FacteurEval)
								{								
									allocExpression(NULL);
									setTypeExpression();
								}
							;
    break;}
case 151:
#line 972 "grammar.yacc"
{								
								allocExpression(new CNegOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opAdd,"(-)");
								
							;
    break;}
case 152:
#line 978 "grammar.yacc"
{	
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opAdd))
								{
									yyerror("erreur sémantique l'operateur + n'est pas supporté par cette expression");
									return 0;
								}*/								
								setTypeExpressionG();
								allocExpression(NULL);
								
								
							;
    break;}
case 153:
#line 990 "grammar.yacc"
{									
								allocExpression(new CAddOpCode,true);		
								setTypeExpressionD(NLAIC::CTypeOfOperator::opAdd,"+");	
							;
    break;}
case 154:
#line 995 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSub))
								{
									yyerror("erreur sémantique l'operateur - n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);
								
							;
    break;}
case 155:
#line 1006 "grammar.yacc"
{								
								allocExpression(new CSubOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSub,"-");							
							;
    break;}
case 156:
#line 1011 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opNot))
								{
									yyerror("erreur sémantique l'operateur ! n'est pas supporté par cette expression");
									return 0;
								}*/								
								allocExpression(new CNotOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opNot,"!");
								
							;
    break;}
case 157:
#line 1022 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiff))
								{
									yyerror("erreur sémantique l'operateur != n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 158:
#line 1032 "grammar.yacc"
{								
								allocExpression(new CDiffOpCode,true);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiff,"!=");
								
							;
    break;}
case 159:
#line 1038 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInf))
								{
									yyerror("erreur sémantique l'operateur < n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
								
							;
    break;}
case 160:
#line 1049 "grammar.yacc"
{								
								allocExpression(new CInfOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInf,"<");							
							;
    break;}
case 161:
#line 1054 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSup))
								{
									yyerror("erreur sémantique l'operateur > n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);								
							;
    break;}
case 162:
#line 1064 "grammar.yacc"
{								
								allocExpression(new CSupOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSup,">");							
							;
    break;}
case 163:
#line 1069 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSupEq))
								{
									yyerror("erreur sémantique l'operateur >= n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
							;
    break;}
case 164:
#line 1079 "grammar.yacc"
{								
								allocExpression(new CSupEqOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSupEq,">=");
							;
    break;}
case 165:
#line 1084 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInfEq))
								{
									yyerror("erreur sémantique l'operateur <= n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 166:
#line 1094 "grammar.yacc"
{								
								allocExpression(new CInfEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInfEq,"<=");
							;
    break;}
case 167:
#line 1099 "grammar.yacc"
{
								setTypeExpressionG();	
								allocExpression(NULL);														
							;
    break;}
case 168:
#line 1104 "grammar.yacc"
{								
								allocExpression(new CEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opEq,"==");

							;
    break;}
case 169:
#line 1112 "grammar.yacc"
{
								_FacteurEval = true;	
							;
    break;}
case 170:
#line 1116 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opMul))
								{
									yyerror("erreur sémantique l'operateur * n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();								
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 171:
#line 1127 "grammar.yacc"
{									
								setTypeExpressionD(NLAIC::CTypeOfOperator::opMul,"+");
								allocExpression(new CMulOpCode,false);
								_FacteurEval = false;
							;
    break;}
case 172:
#line 1133 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiv))
								{
									yyerror("erreur sémantique l'operateur / n'est pas supporté par cette expression");
									return 0;
								}*/
											
								setTypeExpressionG();
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 173:
#line 1145 "grammar.yacc"
{																
								allocExpression(new CDivOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiv,"/");
								_FacteurEval = false;	
							;
    break;}
case 174:
#line 1154 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PExec);
							;
    break;}
case 175:
#line 1159 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAchieve);
							;
    break;}
case 176:
#line 1164 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAsk);
							;
    break;}
case 177:
#line 1169 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PBreak);
							;
    break;}
case 178:
#line 1174 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PError);
							;
    break;}
case 179:
#line 1179 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PTell);
							;
    break;}
case 180:
#line 1184 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PKill);
							;
    break;}
case 181:
#line 1189 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PEven);
							;
    break;}
case 182:
#line 1194 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVarNill();
							;
    break;}
case 183:
#line 1200 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVar();
							;
    break;}
case 184:
#line 1205 "grammar.yacc"
{								
								_IsFacteurIsExpression = false;
								if(!processingVar())
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 185:
#line 1215 "grammar.yacc"
{								
								_IsFacteurIsExpression = true;								
								setMethodVar();
							;
    break;}
case 186:
#line 1220 "grammar.yacc"
{							
								_IsFacteurIsExpression = true;
							;
    break;}
case 187:
#line 1224 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 188:
#line 1228 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 189:
#line 1232 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 190:
#line 1236 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 191:
#line 1240 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 192:
#line 1244 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 193:
#line 1248 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 194:
#line 1252 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 195:
#line 1259 "grammar.yacc"
{
								_LasVarStr.clear();
								_LasVarStr.push_back(NLAISCRIPT::CStringType(LastyyText[1]));
								_LastFact.VarType = varTypeUndef;
								_IsFacteurIsExpression = false;	
								_FromStack.push_back(false);							
							;
    break;}
case 196:
#line 1268 "grammar.yacc"
{
								_LasVarStr.clear();
								cleanTypeList();
								_LasVarStr.push_back(LastyyText[1]);
								setMethodVar();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);

							;
    break;}
case 197:
#line 1280 "grammar.yacc"
{	
								cleanTypeList();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);
							;
    break;}
case 198:
#line 1289 "grammar.yacc"
{									
								if(_IsFacteurIsExpression)
								{
									IOpType *c = _TypeList.back();
									_TypeList.pop_back();
									c->release();
									_TypeList.push_back(_FlotingExpressionType);
									_FlotingExpressionType->incRef();
									_LasVarStr.clear();
									_FromStack.pop_back();
								}
								_LasVarStr.push_back(LastyyText[1]);
							;
    break;}
case 199:
#line 1306 "grammar.yacc"
{									
								setListVar();
							;
    break;}
case 201:
#line 1314 "grammar.yacc"
{									
								setChaineVar();
							;
    break;}
case 202:
#line 1320 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));								
							;
    break;}
case 203:
#line 1324 "grammar.yacc"
{								
								_LastBloc->addCode((new CAddOpCode));
							;
    break;}
case 204:
#line 1330 "grammar.yacc"
{
								_LastStringParam.push_back(new NLAIAGENT::CGroupType());								

							;
    break;}
case 205:
#line 1335 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
							;
    break;}
case 207:
#line 1341 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 208:
#line 1345 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 209:
#line 1352 "grammar.yacc"
{							
								_LastStringParam.back()->cpy(NLAIAGENT::CStringType(NLAIAGENT::CStringVarName(LastyyText[1])));
								_Param.push_back(new CParam);								
							;
    break;}
case 210:
#line 1359 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );				
						;
    break;}
case 211:
#line 1364 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 212:
#line 1368 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
//							_LastBloc->addCode( new CLdbNewOpCode(CRule()) );		
							setStackVar( CVar::IdVar );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tUndef);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::Rule::idRule;
						;
    break;}
case 214:
#line 1383 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 215:
#line 1387 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbNewOpCode( CClause() ) );
							//_LastBloc->addCode( new CAddOpCode() );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::CClause::idCClause;
						;
    break;}
case 216:
#line 1399 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 217:
#line 1403 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 218:
#line 1407 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );							
						;
    break;}
case 219:
#line 1412 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );													
						;
    break;}
case 220:
#line 1418 "grammar.yacc"
{
							_LastBloc->addCode( new CTellOpCode() );
						;
    break;}
case 221:
#line 1424 "grammar.yacc"
{
							/*char buf[256];
							strcpy(buf, LastyyText[1]);
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CBoolType( NLAIAGENT::CStringVarName(LastyyText[1]) ) ) );
							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
							_LastFact.varType = varForFunc;
							_LastFact.isUsed = false;
							_lastIdentType = NLAIAGENT::CVar::idBoolType;
							*/
						;
    break;}
case 222:
#line 1437 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
							char *txt = LastyyText[1];
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode(new CAddOpCode() );
							//_LastAssert = NLAIAGENT::CStringVarName(LastyyText[1]);
						;
    break;}
case 223:
#line 1445 "grammar.yacc"
{
/*							setStackVar( CFactPattern::IdFactPattern );
							IBaseAssert *my_assert = _FactBase->addAssert( _LastAssert, _NbLogicParams );
							_NbLogicParams = 0;
							_LastBloc->addCode(new CLdbNewOpCode( CFactPattern( my_assert ) ) );
							*/
						;
    break;}
case 224:
#line 1455 "grammar.yacc"
{
						;
    break;}
case 225:
#line 1462 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 226:
#line 1468 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 228:
#line 1477 "grammar.yacc"
{
							char buf[256];
							strcpy(buf, LastyyText[1]);
							setStackVar( CVar::IdVar );
							_LastBloc->addCode( new CLdbOpCode(CVar( LastyyText[1] )) );
						;
    break;}
case 229:
#line 1487 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
						;
    break;}
case 231:
#line 1494 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 232:
#line 1498 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 233:
#line 1502 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 234:
#line 1506 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 235:
#line 1512 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );
						;
    break;}
case 236:
#line 1517 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 237:
#line 1521 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyRule() ) );		
							setStackVar(CFuzzyRule::IdFuzzyRule);
						;
    break;}
case 238:
#line 1529 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 239:
#line 1533 "grammar.yacc"
{
							
						;
    break;}
case 240:
#line 1539 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 241:
#line 1543 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 243:
#line 1550 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							// Composant?
							char *txt = LastyyText[0];
/*							_lastFVarIndex = ((IClassInterpret *)_selfClass.get())->getComponentIndex(NLAIAGENT::CStringVarName(LastyyText[1]));
							if (_lastFVarIndex != -1 )
							{
								_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CDigitalType(_lastFVarIndex) ) );
								_LastBloc->addCode( new CAddOpCode() );
							}
							else
							{
								// Variable locale?
							}
							*/

						;
    break;}
case 244:
#line 1568 "grammar.yacc"
{
							_LastString = NLAIAGENT::CStringVarName( LastyyText[0] );
						;
    break;}
case 245:
#line 1572 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++ );
							_LastBloc->addCode(new CLdbNewOpCode( CSimpleFuzzyCond(NULL, NULL) ) );
						;
    break;}
case 246:
#line 1579 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 247:
#line 1583 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 248:
#line 1588 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 249:
#line 1592 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyVar(NLAIAGENT::CStringVarName("Inst"),0,1) ) );
						;
    break;}
case 250:
#line 1599 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 251:
#line 1603 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 253:
#line 1610 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1614 "grammar.yacc"

