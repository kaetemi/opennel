
/*  A Bison parser, made from grammar.yacc
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FIN	258
#define	NOMBRE	259
#define	IDENT	260
#define	PAR_G	261
#define	PAR_D	262
#define	ACCOL_G	263
#define	ACCOL_D	264
#define	CROCHER_G	265
#define	CROCHER_D	266
#define	EG_MATH	267
#define	VIRGULE	268
#define	EG_LOG	269
#define	SUP	270
#define	INF	271
#define	SUP_EG	272
#define	INF_EG	273
#define	DIFF	274
#define	OR_LOG	275
#define	AND_LOG	276
#define	NON_BIN	277
#define	OR_BIN	278
#define	AND_BIN	279
#define	XOR_BIN	280
#define	SCOP	281
#define	PLUS	282
#define	MOINS	283
#define	FOIS	284
#define	DIV	285
#define	POWER	286
#define	POINT_VI	287
#define	LEPOINT	288
#define	POINT_DEUX	289
#define	INTERROGATION	290
#define	CHAINE	291
#define	NILL	292
#define	EXEC	293
#define	ACHIEVE	294
#define	ASK	295
#define	BREAK	296
#define	TELL	297
#define	KILL	298
#define	PERROR	299
#define	EVEN	300
#define	BEGIN_GRAMMAR	301
#define	FROM	302
#define	DEFINE	303
#define	GROUP	304
#define	COMPONENT	305
#define	CONSTRUCTION	306
#define	DESTRUCTION	307
#define	MESSAGE_MANAGER	308
#define	MAESSAGELOOP	309
#define	LOCAL	310
#define	STATIC	311
#define	AS	312
#define	DIGITAL	313
#define	COLLECTOR	314
#define	WITH	315
#define	DO	316
#define	END	317
#define	IF	318
#define	THEN	319
#define	BEGINING	320
#define	END_GRAMMAR	321
#define	NEW	322
#define	TRIGGER	323
#define	PRECONDITION	324
#define	POSTCONDITION	325
#define	GOAL	326
#define	RETURN	327
#define	COMMENT	328
#define	STEPS	329
#define	UPDATEEVERY	330
#define	PRIORITY	331
#define	MSG	332
#define	LOGICVAR	333
#define	RULE	334
#define	IA_ASSERT	335
#define	OR	336
#define	AND	337
#define	FUZZY	338
#define	FUZZYRULE	339
#define	FUZZYRULESET	340
#define	SETS	341
#define	FUZZYVAR	342
#define	FIS	343
#define	COS	344
#define	SIN	345
#define	TAN	346
#define	POW	347
#define	LN	348
#define	LOG	349
#define	FACT	350

#line 1 "grammar.yacc"

#include <malloc.h>
#include <list>
#define PARSER_NO_REDEF_YYTABLE_H_
#include "nel/ai/script/compilateur.h"
#include "nel/ai/script/constraint.h"
#include "nel/ai/script/type_def.h"
#include "nel/ai/script/object_unknown.h"
#include "nel/ai/logic/logic.h"
#include "nel/ai/fuzzy/fuzzy.h"
#include "nel/ai/logic/interpret_object_operator.h"
#include "nel/ai/script/interpret_fsm.h"

using  namespace NLAISCRIPT;
using  namespace NLAILOGIC;
using  namespace NLAIFUZZY;
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		419
#define	YYFLAG		-32768
#define	YYNTBASE	96

#define YYTRANSLATE(x) ((unsigned)(x) <= 350 ? yytranslate[x] : 253)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,    10,    14,    16,    21,    22,    29,    31,
    34,    35,    40,    43,    46,    47,    55,    57,    61,    63,
    65,    67,    70,    72,    74,    76,    78,    80,    85,    89,
    91,    94,    98,    99,   103,   104,   108,   110,   112,   114,
   116,   118,   120,   124,   125,   126,   133,   134,   135,   142,
   143,   149,   153,   155,   156,   160,   161,   162,   169,   171,
   174,   177,   180,   181,   182,   188,   190,   193,   195,   197,
   199,   200,   201,   211,   212,   220,   221,   222,   223,   234,
   235,   242,   244,   245,   249,   252,   254,   257,   258,   264,
   268,   270,   272,   274,   276,   277,   281,   282,   287,   289,
   293,   295,   299,   302,   304,   305,   306,   313,   315,   319,
   321,   323,   325,   328,   331,   333,   336,   339,   342,   345,
   346,   347,   357,   358,   363,   365,   366,   371,   372,   378,
   379,   384,   386,   388,   390,   394,   397,   399,   401,   402,
   408,   409,   410,   420,   422,   425,   428,   432,   434,   436,
   439,   440,   446,   448,   449,   455,   456,   461,   466,   473,
   475,   479,   481,   483,   488,   490,   492,   495,   496,   501,
   502,   507,   510,   511,   516,   517,   522,   523,   528,   529,
   534,   535,   540,   541,   546,   548,   549,   554,   555,   560,
   562,   564,   566,   568,   570,   572,   574,   576,   578,   580,
   582,   584,   588,   590,   592,   594,   596,   598,   600,   602,
   604,   606,   610,   614,   618,   619,   624,   626,   628,   631,
   632,   633,   640,   643,   645,   647,   648,   649,   656,   658,
   659,   663,   665,   666,   671,   675,   678,   681,   682,   689,
   692,   694,   695,   699,   702,   703,   708,   709,   713,   714,
   718,   719,   720,   727,   728,   732,   734,   735,   740,   741,
   742,   750,   751,   752,   753,   761,   763,   764,   768
};

static const short yyrhs[] = {    97,
     0,    96,    97,     0,   101,     8,   108,     9,     0,   101,
     8,     9,     0,    98,     0,   100,     6,     7,    62,     0,
     0,   100,     6,     7,    99,   168,    62,     0,    53,     0,
   102,   104,     0,     0,    47,     5,   103,    34,     0,    48,
   105,     0,    48,     5,     0,     0,    49,    16,   202,   106,
    13,   107,    15,     0,     5,     0,   107,    13,     5,     0,
   109,     0,   108,     0,   110,     0,   110,   109,     0,   111,
     0,   152,     0,   113,     0,   114,     0,   112,     0,    50,
    34,   190,    62,     0,    50,    34,    62,     0,   118,     0,
   118,   113,     0,    74,    34,   115,     0,     0,     5,   116,
    32,     0,     0,     5,   117,   115,     0,   119,     0,   120,
     0,   131,     0,   123,     0,   126,     0,   128,     0,    73,
    34,    36,     0,     0,     0,    69,    34,   121,   134,   122,
    62,     0,     0,     0,    71,   124,    34,   147,   125,    32,
     0,     0,    75,    34,     4,   127,    32,     0,    76,    34,
   129,     0,   143,     0,     0,     4,   130,    32,     0,     0,
     0,    70,    34,   132,   134,   133,    62,     0,   135,     0,
   135,   134,     0,   138,    32,     0,   147,    32,     0,     0,
     0,     8,   136,   168,   137,     9,     0,   140,     0,    35,
     5,     0,    40,     0,    42,     0,    39,     0,     0,     0,
    77,     6,     5,   141,   139,     5,   142,     7,    32,     0,
     0,    40,     6,     5,     0,     8,   168,     9,     0,     0,
     0,     0,    83,     6,     5,   144,    88,   145,     5,   146,
     7,    32,     0,     0,    35,     6,     5,   148,   149,     7,
     0,   151,     0,     0,   151,   150,   149,     0,    35,     5,
     0,   153,     0,   152,   153,     0,     0,   155,   156,   168,
   154,    62,     0,   155,   156,    62,     0,     5,     0,    52,
     0,   157,     0,   159,     0,     0,     6,   158,     7,     0,
     0,     6,   160,   161,     7,     0,   162,     0,   161,    13,
   107,     0,   107,     0,   162,    32,   107,     0,   163,   166,
     0,     5,     0,     0,     0,     5,   164,    16,     5,   165,
    15,     0,   167,     0,   166,    13,   167,     0,     5,     0,
   169,     0,   184,     0,   168,   169,     0,   168,   184,     0,
    32,     0,   173,    32,     0,   170,    32,     0,   175,    32,
     0,   183,    32,     0,     0,     0,     5,   171,    28,    15,
    57,     6,     5,   172,     7,     0,     0,   216,   174,    12,
   203,     0,   177,     0,     0,   175,    33,   176,   177,     0,
     0,   180,     6,   178,   182,   181,     0,     0,   180,     6,
   179,   181,     0,   216,     0,     7,     0,   203,     0,   182,
    13,   203,     0,    72,   203,     0,   187,     0,   185,     0,
     0,   203,    35,   186,   168,    62,     0,     0,     0,    63,
   203,    35,   188,   168,    34,   189,   168,    62,     0,    32,
     0,   191,    32,     0,   190,    32,     0,   190,   191,    32,
     0,   192,     0,   198,     0,   196,    15,     0,     0,   196,
    13,    55,   193,    15,     0,   194,     0,     0,   196,    13,
    56,   195,    15,     0,     0,     5,   197,    16,    36,     0,
    59,    16,   202,    15,     0,    59,    16,   202,    13,   199,
    15,     0,   200,     0,   199,    13,   200,     0,     5,     0,
   201,     0,   215,    33,    33,   215,     0,    36,     0,   212,
     0,    28,   212,     0,     0,   203,   204,    27,   212,     0,
     0,   203,   205,    28,   212,     0,    22,   212,     0,     0,
   203,   206,    19,   212,     0,     0,   203,   207,    16,   212,
     0,     0,   203,   208,    15,   212,     0,     0,   203,   209,
    17,   212,     0,     0,   203,   210,    18,   212,     0,     0,
   203,   211,    14,   212,     0,   215,     0,     0,   212,   213,
    29,   215,     0,     0,   212,   214,    30,   215,     0,    38,
     0,    39,     0,    40,     0,    41,     0,    44,     0,    42,
     0,    43,     0,    45,     0,    37,     0,     4,     0,   216,
     0,   175,     0,     6,   203,     7,     0,   217,     0,   221,
     0,   219,     0,   237,     0,   233,     0,   226,     0,   243,
     0,   238,     0,     5,     0,   175,    33,     5,     0,   215,
    33,     5,     0,   216,    33,     5,     0,     0,    10,   218,
   220,    11,     0,    36,     0,   203,     0,   220,   203,     0,
     0,     0,    67,   222,   225,     6,   223,   224,     0,   182,
     7,     0,     7,     0,     5,     0,     0,     0,    79,   229,
   227,    64,   228,   231,     0,   229,     0,     0,    63,   230,
   231,     0,   233,     0,     0,   233,   232,    82,   231,     0,
   233,    81,   231,     0,    80,   233,     0,    31,     5,     0,
     0,    35,     6,     5,   234,   235,     7,     0,    35,     5,
     0,   203,     0,     0,   203,   236,   235,     0,    35,     5,
     0,     0,    85,     8,   239,   240,     0,     0,   243,   241,
     9,     0,     0,   243,   242,   240,     0,     0,     0,    84,
   246,   244,    64,   245,   248,     0,     0,    63,   247,   248,
     0,   250,     0,     0,   250,   249,    82,   248,     0,     0,
     0,     6,     5,   251,    88,     5,   252,     7,     0,     0,
     0,     0,    87,     0,     5,     0,    86,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   203,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    68,    72,    75,    83,    89,    92,    96,   102,   108,   118,
   121,   137,   139,   140,   159,   162,   165,   166,   168,   169,
   172,   173,   176,   177,   178,   186,   189,   192,   193,   196,
   197,   200,   204,   214,   214,   224,   226,   227,   228,   229,
   230,   231,   236,   252,   259,   273,   276,   282,   304,   306,
   327,   329,   333,   349,   371,   373,   380,   403,   405,   406,
   410,   428,   443,   454,   511,   511,   533,   541,   545,   549,
   559,   566,   571,   575,   581,   586,   593,   597,   601,   604,
   613,   617,   621,   626,   628,   636,   637,   640,   699,   699,
   760,   768,   778,   779,   782,   787,   792,   796,   802,   803,
   806,   807,   810,   814,   819,   824,   831,   834,   835,   838,
   845,   846,   847,   848,   851,   852,   853,   854,   865,   892,
   897,   905,   907,   917,   929,   930,   935,   938,   945,   946,
   954,   956,   963,   976,   980,   987,   995,   996,   999,  1005,
  1011,  1018,  1023,  1029,  1030,  1031,  1032,  1035,  1036,  1040,
  1041,  1047,  1047,  1051,  1057,  1059,  1065,  1080,  1081,  1084,
  1085,  1088,  1089,  1092,  1094,  1097,  1105,  1111,  1123,  1128,
  1139,  1144,  1155,  1165,  1171,  1182,  1187,  1197,  1202,  1212,
  1217,  1227,  1232,  1237,  1245,  1249,  1260,  1266,  1278,  1286,
  1292,  1297,  1302,  1307,  1312,  1317,  1322,  1327,  1332,  1338,
  1348,  1353,  1357,  1361,  1365,  1369,  1373,  1377,  1381,  1385,
  1392,  1401,  1413,  1421,  1439,  1444,  1447,  1453,  1457,  1463,
  1468,  1474,  1475,  1479,  1486,  1493,  1499,  1504,  1515,  1518,
  1524,  1535,  1539,  1543,  1547,  1554,  1560,  1572,  1581,  1591,
  1598,  1604,  1611,  1613,  1623,  1628,  1630,  1635,  1638,  1643,
  1648,  1654,  1658,  1665,  1670,  1675,  1679,  1683,  1686,  1704,
  1709,  1715,  1720,  1725,  1729,  1735,  1739,  1744,  1746
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FIN","NOMBRE",
"IDENT","PAR_G","PAR_D","ACCOL_G","ACCOL_D","CROCHER_G","CROCHER_D","EG_MATH",
"VIRGULE","EG_LOG","SUP","INF","SUP_EG","INF_EG","DIFF","OR_LOG","AND_LOG","NON_BIN",
"OR_BIN","AND_BIN","XOR_BIN","SCOP","PLUS","MOINS","FOIS","DIV","POWER","POINT_VI",
"LEPOINT","POINT_DEUX","INTERROGATION","CHAINE","NILL","EXEC","ACHIEVE","ASK",
"BREAK","TELL","KILL","PERROR","EVEN","BEGIN_GRAMMAR","FROM","DEFINE","GROUP",
"COMPONENT","CONSTRUCTION","DESTRUCTION","MESSAGE_MANAGER","MAESSAGELOOP","LOCAL",
"STATIC","AS","DIGITAL","COLLECTOR","WITH","DO","END","IF","THEN","BEGINING",
"END_GRAMMAR","NEW","TRIGGER","PRECONDITION","POSTCONDITION","GOAL","RETURN",
"COMMENT","STEPS","UPDATEEVERY","PRIORITY","MSG","LOGICVAR","RULE","IA_ASSERT",
"OR","AND","FUZZY","FUZZYRULE","FUZZYRULESET","SETS","FUZZYVAR","FIS","COS",
"SIN","TAN","POW","LN","LOG","FACT","program","DefinitionClass","MessageRun",
"@1","MessageManager","CorpDeDefinition","HeritageDeType","@2","EnteteDeDefinition",
"DefinitionDeGroup","@3","CParam","DefinitionDeProgram","BlocDeDefinition","UnBloc",
"Register","RegistDesAttributs","RegisterOperator","RegisterSteps","Steps","@4",
"@5","OpBloc","OpComment","PreCondition","@6","@7","Goal","@8","@9","UpdateCycles",
"@10","Priority","PriorityVal","@11","PostCondition","@12","@13","OperatorCond",
"SingleOpCond","@14","@15","BooleanCond","Performatif","TrigMsgCond","@16","@17",
"FuzzyCond","@19","@20","@21","FirstOrderPattern","@22","OpLogicVarSet","@23",
"OpLogicVar","BlocPourLesCode","BlocAvecCode","@24","Methode","Argument","ArgumentVide",
"@25","ArgumentListe","@26","ListesDeVariables","DesParams","TypeOfParam","@27",
"@28","DeclarationVariables","NonDeVariable","DuCode","Code","StaticCast","@29",
"@30","Affectation","@31","AppelleDeFonction","@32","AppelleDeFoncDirect","@33",
"@34","NonDeFonction","CallFunction","Prametre","RetourDeFonction","Evaluation",
"EvaluationSimpleState","@35","EvaluationState","@36","@37","TypeDeDeclaration",
"RegisterAnyVar","RegisterTypeDef","@38","StaticDef","@39","TypeDeComp","@40",
"RegisterCollector","MessageType","DefMessage","Borne","Nom","Expression","@41",
"@42","@43","@44","@45","@46","@47","@48","Term","@49","@50","Facteur","Variable",
"List","@51","ChaineDeCaractaire","ElementList","NewObject","@52","@53","PrametreNew",
"NewObjectName","Rule","@54","@55","RuleCondition","@56","Clause","@57","FactPattern",
"@58","LogicVarSet","@59","LogicVar","FuzzyRuleSet","@60","ListFuzzyRule","@61",
"@62","FuzzyRule","@63","@64","FuzzyCondition","@65","FuzzyClause","@66","FuzzyFactPattern",
"@67","@68", NULL
};
#endif

static const short yyr1[] = {     0,
    96,    96,    97,    97,    97,    98,    99,    98,   100,   101,
   103,   102,   104,   104,   106,   105,   107,   107,   108,   108,
   109,   109,   110,   110,   110,   110,   111,   112,   112,   113,
   113,   114,   116,   115,   117,   115,   118,   118,   118,   118,
   118,   118,   119,   121,   122,   120,   124,   125,   123,   127,
   126,   128,   129,   130,   129,   132,   133,   131,   134,   134,
   135,   135,   136,   137,   135,   135,   138,   139,   139,   139,
   141,   142,   140,    -1,    -1,   144,   145,   146,   143,   148,
   147,   149,   150,   149,   151,   152,   152,   154,   153,   153,
   155,   155,   156,   156,   158,   157,   160,   159,   161,   161,
   162,   162,   107,   163,   164,   165,   163,   166,   166,   167,
   168,   168,   168,   168,   169,   169,   169,   169,   169,   171,
   172,   170,   174,   173,   175,   176,   175,   178,   177,   179,
   177,   180,   181,   182,   182,   183,   184,   184,   186,   185,
   188,   189,   187,   190,   190,   190,   190,   191,   191,   192,
   193,   192,   192,   195,   194,   197,   196,   198,   198,   199,
   199,   200,   200,   201,   202,   203,   203,   204,   203,   205,
   203,   203,   206,   203,   207,   203,   208,   203,   209,   203,
   210,   203,   211,   203,   212,   213,   212,   214,   212,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
   216,   216,   216,   216,   218,   217,   219,   220,   220,   222,
   223,   221,   224,   224,   225,   227,   228,   226,    -1,   230,
   229,   231,   232,   231,   231,    -1,    -1,   234,   233,   233,
   235,   236,   235,   237,   239,   238,   241,   240,   242,   240,
   244,   245,   243,   247,   246,   248,   249,   248,   251,   252,
   250,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1
};

static const short yyr2[] = {     0,
     1,     2,     4,     3,     1,     4,     0,     6,     1,     2,
     0,     4,     2,     2,     0,     7,     1,     3,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     4,     3,     1,
     2,     3,     0,     3,     0,     3,     1,     1,     1,     1,
     1,     1,     3,     0,     0,     6,     0,     0,     6,     0,
     5,     3,     1,     0,     3,     0,     0,     6,     1,     2,
     2,     2,     0,     0,     5,     1,     2,     1,     1,     1,
     0,     0,     9,     0,     7,     0,     0,     0,    10,     0,
     6,     1,     0,     3,     2,     1,     2,     0,     5,     3,
     1,     1,     1,     1,     0,     3,     0,     4,     1,     3,
     1,     3,     2,     1,     0,     0,     6,     1,     3,     1,
     1,     1,     2,     2,     1,     2,     2,     2,     2,     0,
     0,     9,     0,     4,     1,     0,     4,     0,     5,     0,
     4,     1,     1,     1,     3,     2,     1,     1,     0,     5,
     0,     0,     9,     1,     2,     2,     3,     1,     1,     2,
     0,     5,     1,     0,     5,     0,     4,     4,     6,     1,
     3,     1,     1,     4,     1,     1,     2,     0,     4,     0,
     4,     2,     0,     4,     0,     4,     0,     4,     0,     4,
     0,     4,     0,     4,     1,     0,     4,     0,     4,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     3,     3,     0,     4,     1,     1,     2,     0,
     0,     6,     2,     1,     1,     0,     0,     6,     1,     0,
     3,     1,     0,     4,     3,     2,     2,     0,     6,     2,
     1,     0,     3,     2,     0,     4,     0,     3,     0,     3,
     0,     0,     6,     0,     3,     1,     0,     4,     0,     0,
     7,     0,     0,     0,     7,     1,     0,     3,     1
};

static const short yydefact[] = {     0,
     0,     9,     0,     1,     5,     0,     0,     0,    11,     2,
     0,     0,     0,    10,     0,     7,    91,     4,     0,    92,
     0,     0,    47,     0,     0,     0,     0,     0,    19,    21,
    23,    27,    25,    26,    30,    37,    38,    40,    41,    42,
    39,    24,    86,     0,    14,     0,    13,    12,     6,     0,
     0,    44,    56,     0,     0,     0,     0,     0,     3,    22,
    31,    87,    95,     0,    93,    94,     0,   199,   211,     0,
   215,     0,     0,   115,     0,   217,   198,   190,   191,   192,
   193,   195,   196,   194,   197,     0,   220,     0,     0,     0,
     0,     0,   111,     0,     0,   201,   125,     0,     0,   112,
   138,   137,   168,   166,   185,   200,   203,   205,   204,   208,
   207,   206,   210,   209,   156,   144,     0,    29,     0,     0,
   148,   153,     0,   149,     0,     0,     0,    43,    33,    32,
    50,    54,     0,    52,    53,     0,     0,    90,    88,   165,
    15,     0,   211,   201,   168,   200,     0,   172,   167,   240,
     0,   168,     0,   136,   230,   226,   254,   251,   245,     8,
   113,   114,   117,   116,   118,   126,   128,   119,   139,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   146,    28,     0,   145,     0,   150,
    63,     0,     0,    45,    59,     0,    66,     0,    57,     0,
    48,     0,     0,     0,     0,     0,    96,    17,   101,     0,
    99,     0,     0,     0,     0,   202,   218,     0,   238,   141,
   225,     0,     0,     0,     0,     0,     0,   212,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   213,   214,     0,     0,     0,   147,   151,   154,
     0,    67,     0,     0,     0,    60,    61,    62,     0,     0,
    34,    36,    51,    55,    76,     0,     0,    98,     0,     0,
   110,   103,   108,    89,     0,     0,   216,   219,     0,     0,
   221,     0,   231,   232,   227,     0,   255,   256,   252,   246,
   247,   127,     0,     0,   134,   133,   131,     0,   169,   171,
   174,   176,   178,   180,   182,   184,   187,   189,   124,   157,
     0,   158,     0,     0,    64,    80,    71,    46,    58,    49,
     0,     0,    18,   100,   102,     0,     0,     0,   242,     0,
     0,     0,   240,     0,     0,     0,   259,     0,     0,     0,
     0,     0,   129,   140,   162,     0,   160,   163,     0,   152,
   155,     0,     0,     0,    77,   106,   109,    16,     0,     0,
   239,   142,   224,     0,   222,   235,     0,   228,     0,     0,
   253,   248,   250,   135,     0,   159,     0,    65,     0,     0,
    82,    70,    68,    69,     0,     0,     0,   121,   243,     0,
   223,   234,     0,   258,   161,     0,    85,    81,     0,    72,
    78,   107,     0,     0,   260,   164,    84,     0,     0,   122,
   143,     0,     0,     0,   261,    73,    79,     0,     0
};

static const short yydefgoto[] = {     3,
     4,     5,    50,     6,     7,     8,    15,    14,    47,   214,
   209,    28,    29,    30,    31,    32,    33,    34,   130,   202,
   203,    35,    36,    37,   125,   255,    38,    54,   260,    39,
   204,    40,   134,   205,    41,   126,   259,   194,   195,   251,
   352,   196,   385,   197,   354,   408,   135,   321,   386,   409,
   198,   353,   380,   399,   381,    42,    43,   213,    44,    64,
    65,   136,    66,   137,   210,   211,   212,   266,   387,   272,
   273,    92,    93,    94,   142,   403,    95,   182,   144,   229,
    97,   230,   231,    98,   297,   294,    99,   100,   101,   232,
   102,   280,   390,   119,   120,   121,   313,   122,   314,   123,
   183,   124,   346,   347,   348,   141,   103,   170,   171,   172,
   173,   174,   175,   176,   177,   104,   178,   179,   105,   146,
   107,   147,   108,   218,   109,   153,   332,   365,   222,   110,
   224,   336,   156,   223,   283,   335,   111,   279,   330,   360,
   112,   113,   227,   290,   340,   341,   114,   226,   339,   158,
   225,   287,   338,   288,   369,   412
};

static const short yypact[] = {   -22,
    23,-32768,    38,-32768,-32768,    58,    78,    63,-32768,-32768,
    96,   146,    14,-32768,    86,    61,-32768,-32768,   128,-32768,
   130,   134,-32768,   137,   151,   163,   165,   126,-32768,   183,
-32768,-32768,-32768,-32768,    56,-32768,-32768,-32768,-32768,-32768,
-32768,     8,-32768,   122,-32768,   184,-32768,-32768,-32768,   490,
    21,-32768,-32768,   169,   170,   200,   203,     4,-32768,-32768,
-32768,-32768,   207,    30,-32768,-32768,   172,-32768,   185,   594,
-32768,   607,   607,-32768,    51,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   594,-32768,   594,   160,   161,
   217,   264,-32768,   196,   202,    44,-32768,   226,   212,-32768,
-32768,-32768,   176,   119,   213,    89,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   229,-32768,    22,   215,
-32768,-32768,    31,-32768,     2,     2,   216,-32768,   250,-32768,
-32768,-32768,   254,-32768,-32768,   255,   256,-32768,   490,-32768,
-32768,   235,-32768,   231,   222,    26,   594,   119,   119,-32768,
   266,   361,   267,   416,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   268,   269,-32768,-32768,   248,
   251,   259,   271,   265,   272,   270,   276,   262,   253,   279,
   280,   281,   278,   172,-32768,-32768,   282,-32768,   101,-32768,
-32768,   153,   291,-32768,     2,   285,-32768,   286,-32768,   292,
-32768,   287,   200,   288,   289,   305,-32768,    17,   298,    32,
   290,   307,   261,   300,   309,-32768,   416,   102,-32768,-32768,
-32768,   319,   294,   273,   324,   275,   258,-32768,   607,   594,
   337,   490,   607,   607,   607,   607,   607,   607,   607,   607,
   607,   607,-32768,-32768,   594,   299,    83,-32768,-32768,-32768,
   490,-32768,   340,   341,   295,-32768,-32768,-32768,   296,   315,
-32768,-32768,-32768,-32768,-32768,   335,   347,-32768,   256,   256,
-32768,   346,-32768,-32768,   256,   304,-32768,   416,   594,   490,
-32768,   155,-32768,    85,-32768,   348,-32768,   301,-32768,-32768,
   297,   329,   213,    34,   416,-32768,-32768,   328,   119,   119,
   119,   119,   119,   119,   119,   119,   213,   213,   416,-32768,
   658,-32768,   359,   367,   490,-32768,-32768,-32768,-32768,-32768,
   306,   379,-32768,   298,   298,   307,   103,   387,   699,   378,
   382,   542,-32768,   294,   316,   294,-32768,   317,   324,   388,
   258,   594,-32768,-32768,    55,   139,-32768,-32768,   368,-32768,
-32768,   393,   370,    94,-32768,-32768,-32768,-32768,   398,   594,
-32768,-32768,-32768,    87,-32768,-32768,   294,-32768,   318,   324,
-32768,-32768,-32768,   416,   658,-32768,    15,-32768,   403,   402,
   376,-32768,-32768,-32768,   410,   423,   414,-32768,-32768,   490,
-32768,-32768,   431,-32768,-32768,   607,-32768,-32768,   370,-32768,
-32768,-32768,   430,   436,-32768,   213,-32768,   432,   440,-32768,
-32768,   441,   406,   418,-32768,-32768,-32768,   451,-32768
};

static const short yypgoto[] = {-32768,
   449,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -165,-32768,   425,-32768,-32768,-32768,   421,-32768,   257,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -117,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   326,-32768,    60,-32768,-32768,-32768,   415,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   136,   -62,   -89,-32768,-32768,-32768,-32768,-32768,   -50,-32768,
   234,-32768,-32768,-32768,   171,   138,-32768,   -88,-32768,-32768,
-32768,-32768,-32768,-32768,   350,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   107,-32768,   302,   -65,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   -61,-32768,-32768,  -212,   -49,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -318,-32768,  -217,-32768,   123,-32768,
-32768,-32768,-32768,   143,-32768,-32768,  -220,-32768,-32768,-32768,
-32768,  -315,-32768,-32768,-32768,-32768
};


#define	YYLAST		743


static const short yytable[] = {    96,
   106,   139,   161,   162,   145,   284,   291,   132,   199,   191,
   148,   149,    17,    96,   106,   366,   293,   368,    45,   243,
   152,  -104,   154,   371,     1,   115,   115,     9,   307,   308,
     2,  -132,  -105,    68,    69,    70,   192,   418,   268,    71,
   296,    96,   106,   189,   269,   190,   342,   396,   392,   161,
   162,    72,   116,   185,   394,   150,   151,    73,   181,    20,
  -211,    74,    46,    11,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,   165,   166,   256,   193,   117,
   117,   217,   118,   186,     1,    12,   133,  -211,    96,   106,
     2,   138,    86,   391,  -132,   311,    87,   312,   349,   342,
  -123,    88,    16,   324,   325,    68,   143,    70,    89,   327,
    13,    71,   277,    90,    91,   267,   284,   358,   284,    48,
   291,   181,    49,    72,    21,    22,    23,    63,    24,    73,
    26,    27,   382,   383,    59,   384,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,  -186,  -188,   284,
    17,   375,   278,   376,    18,   249,   250,   252,   253,   333,
   151,    51,   349,    52,   295,   334,  -233,    53,    87,   298,
    55,   299,   300,   301,   302,   303,   304,   305,   306,   309,
    89,    96,   106,   406,    56,    90,    91,    17,   315,  -183,
  -177,  -175,  -179,  -181,  -173,    19,    57,    20,    58,    67,
    96,   106,   127,  -170,   129,   128,   131,   140,   161,   162,
   169,   -97,  -120,   329,    21,    22,    23,   331,    24,    25,
    26,    27,   155,   157,   159,   161,   162,   163,   216,    96,
   106,   167,    19,   164,    20,  -183,  -177,  -175,  -179,  -181,
  -173,   161,   162,   168,   184,   180,   188,    96,   106,  -170,
   200,    21,    22,    23,   -35,    24,    25,    26,    27,   206,
   208,   207,   215,   166,    96,   106,   295,    68,    69,    70,
   219,   221,   228,    71,   233,  -130,   374,   235,   234,   237,
    96,   106,   242,   243,   244,    72,   236,   239,   238,   240,
   241,    73,   245,   246,   329,    74,   254,   253,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,   265,
   267,   271,   275,   248,   161,   162,   257,   258,   261,   263,
   264,   270,   274,   276,   281,   160,    86,   404,   282,   286,
    87,    68,    69,    70,   310,    88,   285,    71,   289,    96,
   106,    90,    89,   296,   316,   317,   320,    90,    91,    72,
   322,   323,   337,    96,   106,    73,   318,   319,   326,    74,
   328,  -125,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,   350,  -183,  -177,  -175,  -179,  -181,  -173,
  -249,   351,  -257,   356,   361,    68,    69,    70,  -170,   344,
    86,    71,   359,   355,    87,   220,   372,   367,   370,    88,
   377,   378,   388,    72,   379,   393,    89,   397,   398,    73,
   -83,    90,    91,    74,   400,   362,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,   401,   402,  -183,
  -177,  -175,  -179,  -181,  -173,   405,   410,   416,   413,    68,
    69,    70,  -168,  -170,    86,    71,   414,   415,    87,   417,
   419,    10,   201,    88,    60,    61,    62,    72,   407,   262,
    89,   357,   292,    73,   343,    90,    91,    74,   187,   364,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,   395,   389,   373,     0,   247,     0,     0,     0,     0,
     0,     0,     0,    68,    69,    70,     0,   411,    86,    71,
     0,     0,    87,     0,     0,     0,     0,    88,     0,     0,
     0,    72,     0,     0,    89,     0,     0,    73,     0,    90,
    91,    74,     0,     0,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    68,   143,    70,   363,     0,
     0,    71,    86,     0,     0,     0,    87,     0,     0,     0,
     0,    88,     0,    72,     0,     0,     0,     0,    89,    73,
     0,     0,     0,    90,    91,     0,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    68,   143,    70,
     0,     0,     0,    71,     0,     0,     0,     0,    87,     0,
    68,   143,    70,     0,     0,    72,    71,     0,     0,     0,
    89,    73,     0,     0,     0,    90,    91,     0,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,     0,
     0,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,     0,     0,     0,     0,     0,     0,     0,     0,
    87,    68,   345,    70,     0,     0,     0,    71,     0,     0,
     0,     0,    89,    87,     0,     0,     0,    90,    91,     0,
     0,     0,     0,     0,     0,    89,     0,     0,     0,     0,
    90,    91,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,     0,     0,  -241,     0,     0,     0,     0,
     0,     0,  -183,  -177,  -175,  -179,  -181,  -173,     0,     0,
     0,     0,     0,     0,    87,  -168,  -170,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    89,     0,     0,     0,
     0,    90,    91
};

static const short yycheck[] = {    50,
    50,    64,    92,    92,    70,   223,   227,     4,   126,     8,
    72,    73,     5,    64,    64,   334,   229,   336,     5,     5,
    86,     5,    88,   339,    47,     5,     5,     5,   241,   242,
    53,     6,    16,     4,     5,     6,    35,     0,     7,    10,
     7,    92,    92,    13,    13,    15,    13,    33,   367,   139,
   139,    22,    32,    32,   370,     5,     6,    28,    33,    52,
     6,    32,    49,     6,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    32,    33,   195,    77,    59,
    59,   147,    62,    62,    47,     8,    83,    33,   139,   139,
    53,    62,    63,     7,     6,    13,    67,    15,   311,    13,
    12,    72,     7,   269,   270,     4,     5,     6,    79,   275,
    48,    10,    11,    84,    85,    13,   334,    15,   336,    34,
   341,    33,    62,    22,    69,    70,    71,     6,    73,    28,
    75,    76,    39,    40,     9,    42,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    29,    30,   367,
     5,    13,   218,    15,     9,    55,    56,     5,     6,     5,
     6,    34,   375,    34,   230,    81,    82,    34,    67,   232,
    34,   233,   234,   235,   236,   237,   238,   239,   240,   245,
    79,   232,   232,   396,    34,    84,    85,     5,   251,    14,
    15,    16,    17,    18,    19,    50,    34,    52,    34,    16,
   251,   251,    34,    28,     5,    36,     4,    36,   298,   298,
    35,     5,    28,   279,    69,    70,    71,   280,    73,    74,
    75,    76,    63,    63,     8,   315,   315,    32,     7,   280,
   280,     6,    50,    32,    52,    14,    15,    16,    17,    18,
    19,   331,   331,    32,    16,    33,    32,   298,   298,    28,
    35,    69,    70,    71,     5,    73,    74,    75,    76,     6,
     5,     7,    28,    33,   315,   315,   332,     4,     5,     6,
     5,     5,     5,    10,    27,     7,   342,    19,    28,    15,
   331,   331,    30,     5,     5,    22,    16,    18,    17,    14,
    29,    28,    12,    16,   360,    32,     6,     6,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,     5,
    13,     5,    13,    32,   404,   404,    32,    32,    32,    32,
    32,    32,    62,    15,     6,    62,    63,   390,    35,     6,
    67,     4,     5,     6,    36,    72,    64,    10,    64,   390,
   390,    84,    79,     7,     5,     5,    32,    84,    85,    22,
    16,     5,     5,   404,   404,    28,    62,    62,    13,    32,
    57,    33,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    15,    14,    15,    16,    17,    18,    19,
    84,    15,    82,     5,     7,     4,     5,     6,    28,    62,
    63,    10,     6,    88,    67,    35,     9,    82,    82,    72,
    33,     9,     5,    22,    35,    88,    79,     5,     7,    28,
    35,    84,    85,    32,     5,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,     5,    15,    14,
    15,    16,    17,    18,    19,     5,     7,    32,     7,     4,
     5,     6,    27,    28,    63,    10,     7,     7,    67,    32,
     0,     3,   127,    72,    30,    35,    42,    22,   399,   203,
    79,   326,   229,    28,   294,    84,    85,    32,   119,   332,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,   375,   360,   341,    -1,   184,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     4,     5,     6,    -1,    62,    63,    10,
    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    -1,    -1,
    -1,    22,    -1,    -1,    79,    -1,    -1,    28,    -1,    84,
    85,    32,    -1,    -1,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     4,     5,     6,     7,    -1,
    -1,    10,    63,    -1,    -1,    -1,    67,    -1,    -1,    -1,
    -1,    72,    -1,    22,    -1,    -1,    -1,    -1,    79,    28,
    -1,    -1,    -1,    84,    85,    -1,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,     6,
    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    67,    -1,
     4,     5,     6,    -1,    -1,    22,    10,    -1,    -1,    -1,
    79,    28,    -1,    -1,    -1,    84,    85,    -1,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
    -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    67,     4,     5,     6,    -1,    -1,    -1,    10,    -1,    -1,
    -1,    -1,    79,    67,    -1,    -1,    -1,    84,    85,    -1,
    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
    84,    85,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    -1,     7,    -1,    -1,    -1,    -1,
    -1,    -1,    14,    15,    16,    17,    18,    19,    -1,    -1,
    -1,    -1,    -1,    -1,    67,    27,    28,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    79,    -1,    -1,    -1,
    -1,    84,    85
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
CCompilateur::yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 69 "grammar.yacc"
{
								
							;
    break;}
case 3:
#line 79 "grammar.yacc"
{						
								if(!computContraint()) return false;
								onEndClass();
							;
    break;}
case 4:
#line 86 "grammar.yacc"
{
								onEndClass();								
							;
    break;}
case 7:
#line 98 "grammar.yacc"
{
								initMessageManager();
							;
    break;}
case 8:
#line 103 "grammar.yacc"
{
								if(!endMessageManager()) return 0;
							;
    break;}
case 9:
#line 109 "grammar.yacc"
{
								if(_ResultCompile != NULL) 
								{
									yyerror("an MessageManager block had all ready declared");
									return 0;
								}								
							;
    break;}
case 11:
#line 122 "grammar.yacc"
{
								NLAIAGENT::CStringVarName interfName(LastyyText[1]);																																
								try
								{	
									NLAIC::CIdentType id = getTypeOfClass(interfName);
									_SelfClass.push((IClassInterpret *)(((CClassInterpretFactory *)id.getFactory())->getClass()->newInstance()));
									((IClassInterpret *)_SelfClass.get())->setInheritanceName(interfName);
								}
								catch(NLAIE::IException &a)
								{									
									yyerror((char *)a.what());
									return 0;
								}
							;
    break;}
case 14:
#line 141 "grammar.yacc"
{
								try
								{
									NLAIC::CIdentType id(LastyyText[1]);
									char text[1024*4];
									sprintf(text,"class '%s' all ready exist",LastyyText[1]);
									yyerror(text);
									return 0;
								}
								catch(NLAIE::IException &)
								{
									( (IClassInterpret *) _SelfClass.get() )->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
									( (IClassInterpret *) _SelfClass.get() )->buildVTable();
									RegisterClass();
								}
							;
    break;}
case 15:
#line 160 "grammar.yacc"
{
								((IClassInterpret *)_SelfClass.get())->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
							;
    break;}
case 25:
#line 179 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->buildLogicTables();
								}
							;
    break;}
case 33:
#line 205 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[1] ) );
							;
    break;}
case 35:
#line 215 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[0] ) );
							;
    break;}
case 43:
#line 239 "grammar.yacc"
{
								char *txt1 = LastyyText[0];
								char *txt2 = LastyyText[1];
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setComment( LastyyText[1] );
								}


							;
    break;}
case 44:
#line 253 "grammar.yacc"
{
								is_cond = true;
								initParam();
								_InCond = true;
							;
    break;}
case 45:
#line 259 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
								_InCond = false;
							;
    break;}
case 47:
#line 277 "grammar.yacc"
{
								if ( !classIsAnOperator() )
								 	return 0;
							;
    break;}
case 48:
#line 283 "grammar.yacc"
{
								if ( _Goal ) 
								{
									_Goal->release();
									_Goal = NULL;
								}
								
								if ( classIsAnOperator() )
								{
									// Builds a FactPattern

									// Adds it as goal to the operator class
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setGoal( _LastAsserts.back(), _LastLogicParams.back() );
//									((NLAIAGENT::IObjectIA *)(_LastAsserts.back()))->release();
									_LastAsserts.pop_back();
//									((NLAIAGENT::IObjectIA *)(_LastLogicParams.back()))->release();
									_LastLogicParams.pop_back();
								}
							;
    break;}
case 50:
#line 307 "grammar.yacc"
{
									if ( classIsAnOperator() )
									{
										sint32 update = (sint32) LastyyNum;
										COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
										op_class->setUpdateEvery( update );
										if(_LastFact.Value != NULL) 
										{
											_LastFact.Value->release();
											_LastFact.Value = NULL;
										}

										if(_FlotingExpressionType != NULL)
										{
											_FlotingExpressionType->release();
											_FlotingExpressionType = NULL;
										}
									}	
								;
    break;}
case 53:
#line 335 "grammar.yacc"
{
									if ( classIsAnOperator() )
									{

										NLAIAGENT::CStringVarName *vvar = _LastFuzzyConds.back();
										_LastFuzzyConds.pop_back();

										NLAIAGENT::CStringVarName *vset = _LastFuzzyConds.back();
										_LastFuzzyConds.pop_back();

										COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
										op_class->addFuzzyCond(vvar, vset);
									}
								;
    break;}
case 54:
#line 351 "grammar.yacc"
{
									if ( classIsAnOperator() )
									{
										float priority = (float) LastyyNum;
										COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
										op_class->setPriority( priority );
										if(_LastFact.Value != NULL) 
										{
											_LastFact.Value->release();
											_LastFact.Value = NULL;
										}

										if(_FlotingExpressionType != NULL)
										{
											_FlotingExpressionType->release();
											_FlotingExpressionType = NULL;
										}
									}	
								;
    break;}
case 56:
#line 374 "grammar.yacc"
{
								is_cond = false;
								initParam();
								_InCond = true;
							;
    break;}
case 57:
#line 380 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
/*									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
									}
									*/

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeConc( _LastCodeBranche.back() );
										_LastCodeBranche.pop_back();
									}
								}
								_InCond = false;
							;
    break;}
case 62:
#line 430 "grammar.yacc"
{									
								COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
								while ( _LastAsserts.size() )
								{
									if ( is_cond )
										op_class->addFirstOrderCond( _LastAsserts.back(), _LastLogicParams.back() );
									else
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );

									_LastAsserts.pop_back();
									_LastLogicParams.pop_back();
								}
							;
    break;}
case 63:
#line 444 "grammar.yacc"
{
								clean();
								_LastBloc = new IBlock(_Debug);
								_Heap -= (sint32)_Heap;
								CVarPStack::_LocalTableRef = &_Heap[0];
								_VarState.clear();								
								_VarState.pushMark();
								if(!_InLineParse) addOpCode((new CMarkAlloc));
							;
    break;}
case 64:
#line 454 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										addOpCode(x);
									}									
									addOpCode(new CHaltOpCode());

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
//										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_LastCodeBranche.push_back( (IOpCode *) listCode );
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}							

/*								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}				
*/				
							;
    break;}
case 66:
#line 512 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									const char *msg_name = _LastBooleanConds.back()->getString();
									_LastBooleanConds.pop_back();
									const char *class_name = _LastBooleanConds.back()->getString();
									_LastBooleanConds.pop_back();
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									try
									{	
										op_class->RegisterMessage(_LastPerf, class_name, msg_name );
									}
									catch(NLAIE::IException &a)
									{									
										yyerror((char *)a.what());
										return 0;
									}
								}
							;
    break;}
case 67:
#line 534 "grammar.yacc"
{
							char *param_name = LastyyText[1];
							_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
						;
    break;}
case 68:
#line 542 "grammar.yacc"
{
							_LastPerf = NLAIAGENT::IMessageBase::PAsk;
						;
    break;}
case 69:
#line 546 "grammar.yacc"
{
							_LastPerf = NLAIAGENT::IMessageBase::PTell;
						;
    break;}
case 70:
#line 550 "grammar.yacc"
{
							_LastPerf = NLAIAGENT::IMessageBase::PAchieve;
						;
    break;}
case 71:
#line 561 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 72:
#line 567 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 74:
#line 577 "grammar.yacc"
{
								
							;
    break;}
case 76:
#line 588 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 77:
#line 593 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 78:
#line 597 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 80:
#line 607 "grammar.yacc"
{
							const char *assert_name = LastyyText[1];
							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );
						;
    break;}
case 82:
#line 618 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 83:
#line 622 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 85:
#line 629 "grammar.yacc"
{
							char *var_name = LastyyText[1];
							_LastLogicParams.back().push_back( new NLAIAGENT::CStringVarName( var_name ) );
						;
    break;}
case 88:
#line 642 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}

								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}								
								if(!caseRunMsg()) return false;
							;
    break;}
case 90:
#line 701 "grammar.yacc"
{	
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}
								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}
								if(!caseRunMsg()) return false;

							;
    break;}
case 91:
#line 761 "grammar.yacc"
{				
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 92:
#line 769 "grammar.yacc"
{
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 95:
#line 783 "grammar.yacc"
{								
								initParam();
							;
    break;}
case 96:
#line 787 "grammar.yacc"
{
								if(!registerMethod()) return false;
							;
    break;}
case 97:
#line 793 "grammar.yacc"
{
								initParam();
							;
    break;}
case 98:
#line 797 "grammar.yacc"
{
								registerMethod();
							;
    break;}
case 104:
#line 815 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[0]);
								_BaseObjectDef = false;
							;
    break;}
case 105:
#line 820 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 106:
#line 825 "grammar.yacc"
{
								_LastBaseObjectDef = NLAIAGENT::CStringVarName(LastyyText[1]);
								_BaseObjectDef = true;

							;
    break;}
case 110:
#line 839 "grammar.yacc"
{
								if(!setParamVarName()) return 0;
							;
    break;}
case 118:
#line 855 "grammar.yacc"
{								
								if(!checkReturnMethod())
								{
									return 0;
								}
								_LastStringParam.back()->release();
								_LastStringParam.pop_back();
								_Param.back()->release();
								_Param.pop_back();								
							;
    break;}
case 119:
#line 867 "grammar.yacc"
{
								if(!_InLineParse)
								{
									
									IOpCode *x;				
									int i;
									for(i = 0; i < _VarState.markSize(); i++)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										addOpCode(x);										
									}
								}								
								addOpCode(new CHaltOpCode());


							;
    break;}
case 120:
#line 893 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 121:
#line 901 "grammar.yacc"
{					
								NLAIAGENT::CStringVarName x(LastyyText[1]);			
								if(!castVariable(_LastString,x)) return false;
							;
    break;}
case 123:
#line 908 "grammar.yacc"
{								
								std::list<NLAISCRIPT::CStringType>::iterator i = _LasVarStr.begin();
								_LasAffectationVarStr.clear();
								while(i != _LasVarStr.end())
								{
									_LasAffectationVarStr.push_back(*i++);
								}												
							;
    break;}
case 124:
#line 918 "grammar.yacc"
{
								if(!affectation()) 
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 126:
#line 931 "grammar.yacc"
{
								
							;
    break;}
case 128:
#line 939 "grammar.yacc"
{								
								addParamCont();
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 130:
#line 947 "grammar.yacc"
{	
								addParamCont();							
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 132:
#line 957 "grammar.yacc"
{
								nameMethodeProcessing();
							;
    break;}
case 133:
#line 964 "grammar.yacc"
{	
								_ExpressionType = _ExpressionTypeTmp.back();
								_ExpressionTypeTmp.pop_back();								
								if(!callFunction())
								{
									_FromStack.pop_back();
									return 0;	
								}
								_FromStack.pop_back();
							;
    break;}
case 134:
#line 977 "grammar.yacc"
{
								pushParamExpression();								
							;
    break;}
case 135:
#line 982 "grammar.yacc"
{
								pushParamExpression();
							;
    break;}
case 136:
#line 989 "grammar.yacc"
{
								if ( !_InCond )
									if(!typeOfMethod()) return false;
							;
    break;}
case 139:
#line 1001 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 140:
#line 1006 "grammar.yacc"
{
								interrogationEnd();
							;
    break;}
case 141:
#line 1014 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 142:
#line 1019 "grammar.yacc"
{								
								ifInterrogationPoint()
							;
    break;}
case 143:
#line 1024 "grammar.yacc"
{
								ifInterrogationEnd();
							;
    break;}
case 151:
#line 1042 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Local = true;								
							;
    break;}
case 154:
#line 1052 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Static = true;
							;
    break;}
case 156:
#line 1060 "grammar.yacc"
{								
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
								_LastRegistered = ((IClassInterpret *)_SelfClass.get())->registerComponent(_LastString);
							;
    break;}
case 157:
#line 1066 "grammar.yacc"
{
								if(((IClassInterpret *)_SelfClass.get())->getComponent(NLAIAGENT::CStringVarName(LastyyText[1])) == NULL)
								{
									CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);
									c->ObjectName = new NLAIAGENT::CStringVarName(LastyyText[1]);									
								}
								else
								{
									yyerror("variable all ready declared in the Register components");
									return 0;			
								}
							;
    break;}
case 166:
#line 1098 "grammar.yacc"
{	
								if(_FacteurEval)
								{								
									allocExpression(NULL);
									setTypeExpression();
								}
							;
    break;}
case 167:
#line 1106 "grammar.yacc"
{								
								allocExpression(new CNegOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opAdd,"(-)");
								
							;
    break;}
case 168:
#line 1112 "grammar.yacc"
{	
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opAdd))
								{
									yyerror("erreur sémantique l'operateur + n'est pas supporté par cette expression");
									return 0;
								}*/								
								setTypeExpressionG();
								allocExpression(NULL);
								
								
							;
    break;}
case 169:
#line 1124 "grammar.yacc"
{									
								allocExpression(new CAddOpCode,true);		
								setTypeExpressionD(NLAIC::CTypeOfOperator::opAdd,"+");	
							;
    break;}
case 170:
#line 1129 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSub))
								{
									yyerror("erreur sémantique l'operateur - n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);
								
							;
    break;}
case 171:
#line 1140 "grammar.yacc"
{								
								allocExpression(new CSubOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSub,"-");							
							;
    break;}
case 172:
#line 1145 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opNot))
								{
									yyerror("erreur sémantique l'operateur ! n'est pas supporté par cette expression");
									return 0;
								}*/								
								allocExpression(new CNotOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opNot,"!");
								
							;
    break;}
case 173:
#line 1156 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiff))
								{
									yyerror("erreur sémantique l'operateur != n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 174:
#line 1166 "grammar.yacc"
{								
								allocExpression(new CDiffOpCode,true);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiff,"!=");
								
							;
    break;}
case 175:
#line 1172 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInf))
								{
									yyerror("erreur sémantique l'operateur < n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
								
							;
    break;}
case 176:
#line 1183 "grammar.yacc"
{								
								allocExpression(new CInfOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInf,"<");							
							;
    break;}
case 177:
#line 1188 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSup))
								{
									yyerror("erreur sémantique l'operateur > n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);								
							;
    break;}
case 178:
#line 1198 "grammar.yacc"
{								
								allocExpression(new CSupOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSup,">");							
							;
    break;}
case 179:
#line 1203 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSupEq))
								{
									yyerror("erreur sémantique l'operateur >= n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
							;
    break;}
case 180:
#line 1213 "grammar.yacc"
{								
								allocExpression(new CSupEqOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSupEq,">=");
							;
    break;}
case 181:
#line 1218 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInfEq))
								{
									yyerror("erreur sémantique l'operateur <= n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 182:
#line 1228 "grammar.yacc"
{								
								allocExpression(new CInfEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInfEq,"<=");
							;
    break;}
case 183:
#line 1233 "grammar.yacc"
{
								setTypeExpressionG();	
								allocExpression(NULL);														
							;
    break;}
case 184:
#line 1238 "grammar.yacc"
{								
								allocExpression(new CEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opEq,"==");

							;
    break;}
case 185:
#line 1246 "grammar.yacc"
{
								_FacteurEval = true;	
							;
    break;}
case 186:
#line 1250 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opMul))
								{
									yyerror("erreur sémantique l'operateur * n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();								
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 187:
#line 1261 "grammar.yacc"
{									
								setTypeExpressionD(NLAIC::CTypeOfOperator::opMul,"+");
								allocExpression(new CMulOpCode,false);
								_FacteurEval = false;
							;
    break;}
case 188:
#line 1267 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiv))
								{
									yyerror("erreur sémantique l'operateur / n'est pas supporté par cette expression");
									return 0;
								}*/
											
								setTypeExpressionG();
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 189:
#line 1279 "grammar.yacc"
{																
								allocExpression(new CDivOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiv,"/");
								_FacteurEval = false;	
							;
    break;}
case 190:
#line 1288 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PExec);
							;
    break;}
case 191:
#line 1293 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAchieve);
							;
    break;}
case 192:
#line 1298 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAsk);
							;
    break;}
case 193:
#line 1303 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PBreak);
							;
    break;}
case 194:
#line 1308 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PError);
							;
    break;}
case 195:
#line 1313 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PTell);
							;
    break;}
case 196:
#line 1318 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PKill);
							;
    break;}
case 197:
#line 1323 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PEven);
							;
    break;}
case 198:
#line 1328 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVarNill();
							;
    break;}
case 199:
#line 1334 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVar();
							;
    break;}
case 200:
#line 1339 "grammar.yacc"
{								
								_IsFacteurIsExpression = false;
								if(!processingVar())
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 201:
#line 1349 "grammar.yacc"
{								
								_IsFacteurIsExpression = true;								
								setMethodVar();
							;
    break;}
case 202:
#line 1354 "grammar.yacc"
{							
								_IsFacteurIsExpression = true;
							;
    break;}
case 203:
#line 1358 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 204:
#line 1362 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 205:
#line 1366 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 206:
#line 1370 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 207:
#line 1374 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 208:
#line 1378 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 209:
#line 1382 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 210:
#line 1386 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 211:
#line 1393 "grammar.yacc"
{
								_LasVarStr.clear();
								_LasVarStr.push_back(NLAISCRIPT::CStringType(LastyyText[1]));
								_LastFact.VarType = varTypeUndef;
								_IsFacteurIsExpression = false;	
								_FromStack.push_back(false);							
							;
    break;}
case 212:
#line 1402 "grammar.yacc"
{
								_LasVarStr.clear();
								cleanTypeList();
								_LasVarStr.push_back(LastyyText[1]);
								setMethodVar();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);

							;
    break;}
case 213:
#line 1414 "grammar.yacc"
{	
								cleanTypeList();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);
							;
    break;}
case 214:
#line 1423 "grammar.yacc"
{									
								if(_IsFacteurIsExpression)
								{
									IOpType *c = _TypeList.back();
									_TypeList.pop_back();
									c->release();
									_TypeList.push_back(_FlotingExpressionType);
									_FlotingExpressionType->incRef();
									_LasVarStr.clear();
									_FromStack.pop_back();
								}
								_LasVarStr.push_back(LastyyText[1]);
							;
    break;}
case 215:
#line 1440 "grammar.yacc"
{									
								setListVar();
							;
    break;}
case 217:
#line 1448 "grammar.yacc"
{									
								setChaineVar();
							;
    break;}
case 218:
#line 1454 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));								
							;
    break;}
case 219:
#line 1458 "grammar.yacc"
{								
								_LastBloc->addCode((new CAddOpCode));
							;
    break;}
case 220:
#line 1464 "grammar.yacc"
{
								_LastStringParam.push_back(new NLAIAGENT::CGroupType());								

							;
    break;}
case 221:
#line 1469 "grammar.yacc"
{
								addParamCont();
								//addOpCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
							;
    break;}
case 223:
#line 1476 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 224:
#line 1480 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 225:
#line 1487 "grammar.yacc"
{							
								_LastStringParam.back()->cpy(NLAIAGENT::CStringType(NLAIAGENT::CStringVarName(LastyyText[1])));
								_Param.push_back(new CParam);								
							;
    break;}
case 226:
#line 1494 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );				
						;
    break;}
case 227:
#line 1499 "grammar.yacc"
{
							//_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							addParamRuleCont();
						;
    break;}
case 228:
#line 1504 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
//							_LastBloc->addCode( new CLdbNewOpCode(CRule()) );		
							setStackVar( CVar::IdVar );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tUndef);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::Rule::idRule;
						;
    break;}
case 230:
#line 1519 "grammar.yacc"
{
							//_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							addParamRuleCont();
						;
    break;}
case 231:
#line 1524 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbNewOpCode( CClause() ) );
							//_LastBloc->addCode( new CAddOpCode() );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::CClause::idCClause;
						;
    break;}
case 232:
#line 1536 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 233:
#line 1540 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 234:
#line 1544 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );							
						;
    break;}
case 235:
#line 1549 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );													
						;
    break;}
case 236:
#line 1555 "grammar.yacc"
{
							_LastBloc->addCode( new CTellOpCode() );
						;
    break;}
case 237:
#line 1561 "grammar.yacc"
{
							/*char buf[256];
							strcpy(buf, LastyyText[1]);
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CBoolType( NLAIAGENT::CStringVarName(LastyyText[1]) ) ) );
							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
							_LastFact.varType = varForFunc;
							_LastFact.isUsed = false;
							_lastIdentType = NLAIAGENT::CVar::idBoolType;
							*/
						;
    break;}
case 238:
#line 1574 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
							char *txt = LastyyText[1];
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode(new CAddOpCode() );
							//_LastAssert = NLAIAGENT::CStringVarName(LastyyText[1]);
						;
    break;}
case 239:
#line 1582 "grammar.yacc"
{
/*							setStackVar( CFactPattern::IdFactPattern );
							IBaseAssert *my_assert = _FactBase->addAssert( _LastAssert, _NbLogicParams );
							_NbLogicParams = 0;
							_LastBloc->addCode(new CLdbNewOpCode( CFactPattern( my_assert ) ) );
							*/
						;
    break;}
case 240:
#line 1592 "grammar.yacc"
{
						;
    break;}
case 241:
#line 1599 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 242:
#line 1605 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 244:
#line 1614 "grammar.yacc"
{
							char buf[256];
							strcpy(buf, LastyyText[1]);
							setStackVar( CVar::IdVar );
							_LastBloc->addCode( new CLdbOpCode(CVar( LastyyText[1] )) );
						;
    break;}
case 245:
#line 1624 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
						;
    break;}
case 247:
#line 1631 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 248:
#line 1635 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 249:
#line 1639 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 250:
#line 1643 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 251:
#line 1649 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );
						;
    break;}
case 252:
#line 1654 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 253:
#line 1658 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyRule() ) );		
							setStackVar(CFuzzyRule::IdFuzzyRule);
						;
    break;}
case 254:
#line 1666 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 255:
#line 1670 "grammar.yacc"
{
							
						;
    break;}
case 256:
#line 1676 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 257:
#line 1680 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 259:
#line 1687 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							// Composant?
							char *txt = LastyyText[0];
/*							_lastFVarIndex = ((IClassInterpret *)_selfClass.get())->getComponentIndex(NLAIAGENT::CStringVarName(LastyyText[1]));
							if (_lastFVarIndex != -1 )
							{
								_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CDigitalType(_lastFVarIndex) ) );
								_LastBloc->addCode( new CAddOpCode() );
							}
							else
							{
								// Variable locale?
							}
							*/

						;
    break;}
case 260:
#line 1705 "grammar.yacc"
{
							_LastString = NLAIAGENT::CStringVarName( LastyyText[0] );
						;
    break;}
case 261:
#line 1709 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++ );
							_LastBloc->addCode(new CLdbNewOpCode( CSimpleFuzzyCond(NULL, NULL) ) );
						;
    break;}
case 262:
#line 1716 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 263:
#line 1720 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 264:
#line 1725 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 265:
#line 1729 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyVar(NLAIAGENT::CStringVarName("Inst"),0,1) ) );
						;
    break;}
case 266:
#line 1736 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 267:
#line 1740 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 269:
#line 1747 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1751 "grammar.yacc"

