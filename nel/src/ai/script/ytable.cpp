
/*  A Bison parser, made from grammar.yacc
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FIN	258
#define	NOMBRE	259
#define	IDENT	260
#define	PAR_G	261
#define	PAR_D	262
#define	ACCOL_G	263
#define	ACCOL_D	264
#define	CROCHER_G	265
#define	CROCHER_D	266
#define	EG_MATH	267
#define	VIRGULE	268
#define	EG_LOG	269
#define	SUP	270
#define	INF	271
#define	SUP_EG	272
#define	INF_EG	273
#define	DIFF	274
#define	OR_LOG	275
#define	AND_LOG	276
#define	NON_BIN	277
#define	OR_BIN	278
#define	AND_BIN	279
#define	XOR_BIN	280
#define	SCOP	281
#define	PLUS	282
#define	MOINS	283
#define	FOIS	284
#define	DIV	285
#define	POWER	286
#define	POINT_VI	287
#define	LEPOINT	288
#define	POINT_DEUX	289
#define	INTERROGATION	290
#define	CHAINE	291
#define	NILL	292
#define	EXEC	293
#define	ACHIEVE	294
#define	ASK	295
#define	BREAK	296
#define	TELL	297
#define	KILL	298
#define	PERROR	299
#define	EVEN	300
#define	BEGIN_GRAMMAR	301
#define	FROM	302
#define	DEFINE	303
#define	GROUP	304
#define	COMPONENT	305
#define	CONSTRUCTION	306
#define	DESTRUCTION	307
#define	MESSAGE_MANAGER	308
#define	MAESSAGELOOP	309
#define	LOCAL	310
#define	STATIC	311
#define	AS	312
#define	DIGITAL	313
#define	COLLECTOR	314
#define	WITH	315
#define	DO	316
#define	END	317
#define	IF	318
#define	THEN	319
#define	BEGINING	320
#define	END_GRAMMAR	321
#define	NEW	322
#define	TRIGGER	323
#define	PRECONDITION	324
#define	POSTCONDITION	325
#define	GOAL	326
#define	RETURN	327
#define	COMMENT	328
#define	STEPS	329
#define	UPDATEEVERY	330
#define	PRIORITY	331
#define	LOGICVAR	332
#define	RULE	333
#define	IA_ASSERT	334
#define	OR	335
#define	AND	336
#define	FUZZY	337
#define	FUZZYRULE	338
#define	FUZZYRULESET	339
#define	SETS	340
#define	FUZZYVAR	341
#define	FIS	342
#define	COS	343
#define	SIN	344
#define	TAN	345
#define	POW	346
#define	LN	347
#define	LOG	348
#define	FACT	349

#line 1 "grammar.yacc"

#include <malloc.h>
#include <list>
#define PARSER_NO_REDEF_YYTABLE_H_
#include "nel/ai/script/compilateur.h"
#include "nel/ai/script/constraint.h"
#include "nel/ai/script/type_def.h"
#include "nel/ai/script/object_unknown.h"
#include "nel/ai/logic/logic.h"
#include "nel/ai/fuzzy/fuzzy.h"
#include "nel/ai/logic/interpret_object_operator.h"
#include "nel/ai/script/interpret_fsm.h"

using  namespace NLAISCRIPT;
using  namespace NLAILOGIC;
using  namespace NLAIFUZZY;
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		406
#define	YYFLAG		-32768
#define	YYNTBASE	95

#define YYTRANSLATE(x) ((unsigned)(x) <= 349 ? yytranslate[x] : 248)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,    10,    14,    16,    21,    22,    29,    31,
    34,    35,    40,    43,    46,    47,    55,    57,    61,    63,
    65,    67,    70,    72,    74,    76,    78,    80,    85,    89,
    91,    94,    98,    99,   103,   104,   108,   110,   112,   114,
   116,   118,   120,   124,   125,   126,   133,   134,   135,   142,
   143,   149,   150,   156,   157,   158,   165,   167,   168,   172,
   173,   177,   179,   182,   183,   188,   191,   192,   193,   194,
   205,   206,   213,   215,   216,   220,   223,   225,   228,   229,
   235,   239,   241,   243,   245,   247,   248,   252,   253,   258,
   260,   264,   266,   270,   273,   275,   276,   277,   284,   286,
   290,   292,   294,   296,   299,   302,   304,   307,   310,   313,
   316,   317,   318,   328,   329,   334,   336,   337,   342,   343,
   349,   350,   355,   357,   359,   361,   365,   368,   370,   372,
   373,   379,   380,   381,   391,   393,   396,   399,   403,   405,
   407,   410,   411,   417,   419,   420,   426,   427,   432,   437,
   444,   446,   450,   452,   454,   459,   461,   463,   466,   467,
   472,   473,   478,   481,   482,   487,   488,   493,   494,   499,
   500,   505,   506,   511,   512,   517,   519,   520,   525,   526,
   531,   533,   535,   537,   539,   541,   543,   545,   547,   549,
   551,   553,   555,   559,   561,   563,   565,   567,   569,   571,
   573,   575,   577,   581,   585,   589,   590,   595,   597,   599,
   602,   603,   604,   611,   614,   616,   618,   619,   620,   627,
   629,   630,   634,   636,   637,   642,   646,   649,   652,   653,
   660,   663,   665,   666,   670,   673,   674,   679,   680,   684,
   685,   689,   690,   691,   698,   699,   703,   705,   706,   711,
   712,   713,   721,   722,   723,   724,   732,   734,   735,   739
};

static const short yyrhs[] = {    96,
     0,    95,    96,     0,   100,     8,   107,     9,     0,   100,
     8,     9,     0,    97,     0,    99,     6,     7,    62,     0,
     0,    99,     6,     7,    98,   163,    62,     0,    53,     0,
   101,   103,     0,     0,    47,     5,   102,    34,     0,    48,
   104,     0,    48,     5,     0,     0,    49,    16,   197,   105,
    13,   106,    15,     0,     5,     0,   106,    13,     5,     0,
   108,     0,   107,     0,   109,     0,   109,   108,     0,   110,
     0,   147,     0,   112,     0,   113,     0,   111,     0,    50,
    34,   185,    62,     0,    50,    34,    62,     0,   117,     0,
   117,   112,     0,    74,    34,   114,     0,     0,     5,   115,
    32,     0,     0,     5,   116,   114,     0,   118,     0,   119,
     0,   129,     0,   122,     0,   125,     0,   127,     0,    73,
    34,    36,     0,     0,     0,    69,    34,   120,   132,   121,
    62,     0,     0,     0,    71,   123,    34,   142,   124,    32,
     0,     0,    75,    34,     4,   126,    32,     0,     0,    76,
    34,     4,   128,    32,     0,     0,     0,    70,    34,   130,
   132,   131,    62,     0,   134,     0,     0,   134,   133,   132,
     0,     0,   137,   135,    32,     0,   138,     0,   142,    32,
     0,     0,     8,   163,   136,     9,     0,    35,     5,     0,
     0,     0,     0,    82,     6,     5,   139,    87,   140,     5,
   141,     7,    32,     0,     0,    35,     6,     5,   143,   144,
     7,     0,   146,     0,     0,   146,   145,   144,     0,    35,
     5,     0,   148,     0,   147,   148,     0,     0,   150,   151,
   163,   149,    62,     0,   150,   151,    62,     0,     5,     0,
    52,     0,   152,     0,   154,     0,     0,     6,   153,     7,
     0,     0,     6,   155,   156,     7,     0,   157,     0,   156,
    13,   106,     0,   106,     0,   157,    32,   106,     0,   158,
   161,     0,     5,     0,     0,     0,     5,   159,    16,     5,
   160,    15,     0,   162,     0,   161,    13,   162,     0,     5,
     0,   164,     0,   179,     0,   163,   164,     0,   163,   179,
     0,    32,     0,   168,    32,     0,   165,    32,     0,   170,
    32,     0,   178,    32,     0,     0,     0,     5,   166,    28,
    15,    57,     6,     5,   167,     7,     0,     0,   211,   169,
    12,   198,     0,   172,     0,     0,   170,    33,   171,   172,
     0,     0,   175,     6,   173,   177,   176,     0,     0,   175,
     6,   174,   176,     0,   211,     0,     7,     0,   198,     0,
   177,    13,   198,     0,    72,   198,     0,   182,     0,   180,
     0,     0,   198,    35,   181,   163,    62,     0,     0,     0,
    63,   198,    35,   183,   163,    34,   184,   163,    62,     0,
    32,     0,   186,    32,     0,   185,    32,     0,   185,   186,
    32,     0,   187,     0,   193,     0,   191,    15,     0,     0,
   191,    13,    55,   188,    15,     0,   189,     0,     0,   191,
    13,    56,   190,    15,     0,     0,     5,   192,    16,    36,
     0,    59,    16,   197,    15,     0,    59,    16,   197,    13,
   194,    15,     0,   195,     0,   194,    13,   195,     0,     5,
     0,   196,     0,   210,    33,    33,   210,     0,    36,     0,
   207,     0,    28,   207,     0,     0,   198,   199,    27,   207,
     0,     0,   198,   200,    28,   207,     0,    22,   207,     0,
     0,   198,   201,    19,   207,     0,     0,   198,   202,    16,
   207,     0,     0,   198,   203,    15,   207,     0,     0,   198,
   204,    17,   207,     0,     0,   198,   205,    18,   207,     0,
     0,   198,   206,    14,   207,     0,   210,     0,     0,   207,
   208,    29,   210,     0,     0,   207,   209,    30,   210,     0,
    38,     0,    39,     0,    40,     0,    41,     0,    44,     0,
    42,     0,    43,     0,    45,     0,    37,     0,     4,     0,
   211,     0,   170,     0,     6,   198,     7,     0,   212,     0,
   216,     0,   214,     0,   232,     0,   228,     0,   221,     0,
   238,     0,   233,     0,     5,     0,   170,    33,     5,     0,
   210,    33,     5,     0,   211,    33,     5,     0,     0,    10,
   213,   215,    11,     0,    36,     0,   198,     0,   215,   198,
     0,     0,     0,    67,   217,   220,     6,   218,   219,     0,
   177,     7,     0,     7,     0,     5,     0,     0,     0,    78,
   224,   222,    64,   223,   226,     0,   224,     0,     0,    63,
   225,   226,     0,   228,     0,     0,   228,   227,    81,   226,
     0,   228,    80,   226,     0,    79,   228,     0,    31,     5,
     0,     0,    35,     6,     5,   229,   230,     7,     0,    35,
     5,     0,   198,     0,     0,   198,   231,   230,     0,    35,
     5,     0,     0,    84,     8,   234,   235,     0,     0,   238,
   236,     9,     0,     0,   238,   237,   235,     0,     0,     0,
    83,   241,   239,    64,   240,   243,     0,     0,    63,   242,
   243,     0,   245,     0,     0,   245,   244,    81,   243,     0,
     0,     0,     6,     5,   246,    87,     5,   247,     7,     0,
     0,     0,     0,    86,     0,     5,     0,    85,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   198,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    67,    71,    74,    82,    88,    91,    95,   101,   107,   117,
   120,   136,   138,   139,   158,   161,   164,   165,   167,   168,
   171,   172,   175,   176,   177,   185,   188,   191,   192,   195,
   196,   199,   203,   213,   213,   223,   225,   226,   227,   228,
   229,   230,   235,   251,   258,   272,   275,   281,   301,   303,
   324,   326,   347,   352,   359,   382,   384,   388,   393,   399,
   404,   404,   420,   435,   494,   496,   504,   511,   515,   519,
   522,   531,   535,   539,   544,   546,   554,   555,   558,   617,
   617,   678,   686,   696,   697,   700,   705,   710,   714,   720,
   721,   724,   725,   728,   732,   737,   742,   749,   752,   753,
   756,   763,   764,   765,   766,   769,   770,   771,   772,   779,
   786,   791,   799,   801,   811,   823,   824,   829,   832,   839,
   840,   848,   850,   857,   870,   874,   881,   889,   890,   893,
   899,   905,   912,   917,   923,   924,   925,   926,   929,   930,
   934,   935,   941,   941,   945,   951,   953,   959,   974,   975,
   978,   979,   982,   983,   986,   988,   991,   999,  1005,  1017,
  1022,  1033,  1038,  1049,  1059,  1065,  1076,  1081,  1091,  1096,
  1106,  1111,  1121,  1126,  1131,  1139,  1143,  1154,  1160,  1172,
  1180,  1186,  1191,  1196,  1201,  1206,  1211,  1216,  1221,  1226,
  1232,  1242,  1247,  1251,  1255,  1259,  1263,  1267,  1271,  1275,
  1279,  1286,  1295,  1307,  1315,  1333,  1338,  1341,  1347,  1351,
  1357,  1362,  1367,  1368,  1372,  1379,  1386,  1392,  1396,  1407,
  1410,  1415,  1426,  1430,  1434,  1438,  1445,  1451,  1463,  1472,
  1482,  1489,  1495,  1502,  1504,  1514,  1519,  1521,  1526,  1529,
  1534,  1539,  1545,  1549,  1556,  1561,  1566,  1570,  1574,  1577,
  1595,  1600,  1606,  1611,  1616,  1620,  1626,  1630,  1635,  1637
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FIN","NOMBRE",
"IDENT","PAR_G","PAR_D","ACCOL_G","ACCOL_D","CROCHER_G","CROCHER_D","EG_MATH",
"VIRGULE","EG_LOG","SUP","INF","SUP_EG","INF_EG","DIFF","OR_LOG","AND_LOG","NON_BIN",
"OR_BIN","AND_BIN","XOR_BIN","SCOP","PLUS","MOINS","FOIS","DIV","POWER","POINT_VI",
"LEPOINT","POINT_DEUX","INTERROGATION","CHAINE","NILL","EXEC","ACHIEVE","ASK",
"BREAK","TELL","KILL","PERROR","EVEN","BEGIN_GRAMMAR","FROM","DEFINE","GROUP",
"COMPONENT","CONSTRUCTION","DESTRUCTION","MESSAGE_MANAGER","MAESSAGELOOP","LOCAL",
"STATIC","AS","DIGITAL","COLLECTOR","WITH","DO","END","IF","THEN","BEGINING",
"END_GRAMMAR","NEW","TRIGGER","PRECONDITION","POSTCONDITION","GOAL","RETURN",
"COMMENT","STEPS","UPDATEEVERY","PRIORITY","LOGICVAR","RULE","IA_ASSERT","OR",
"AND","FUZZY","FUZZYRULE","FUZZYRULESET","SETS","FUZZYVAR","FIS","COS","SIN",
"TAN","POW","LN","LOG","FACT","program","DefinitionClass","MessageRun","@1",
"MessageManager","CorpDeDefinition","HeritageDeType","@2","EnteteDeDefinition",
"DefinitionDeGroup","@3","CParam","DefinitionDeProgram","BlocDeDefinition","UnBloc",
"Register","RegistDesAttributs","RegisterOperator","RegisterSteps","Steps","@4",
"@5","OpBloc","OpComment","PreCondition","@6","@7","Goal","@8","@9","UpdateCycles",
"@10","Priority","@11","PostCondition","@12","@13","OperatorCond","@14","SingleOpCond",
"@15","@16","BooleanCond","FuzzyCond","@17","@18","@19","FirstOrderPattern",
"@20","OpLogicVarSet","@21","OpLogicVar","BlocPourLesCode","BlocAvecCode","@22",
"Methode","Argument","ArgumentVide","@23","ArgumentListe","@24","ListesDeVariables",
"DesParams","TypeOfParam","@25","@26","DeclarationVariables","NonDeVariable",
"DuCode","Code","StaticCast","@27","@28","Affectation","@29","AppelleDeFonction",
"@30","AppelleDeFoncDirect","@31","@32","NonDeFonction","CallFunction","Prametre",
"RetourDeFonction","Evaluation","EvaluationSimpleState","@33","EvaluationState",
"@34","@35","TypeDeDeclaration","RegisterAnyVar","RegisterTypeDef","@36","StaticDef",
"@37","TypeDeComp","@38","RegisterCollector","MessageType","DefMessage","Borne",
"Nom","Expression","@39","@40","@41","@42","@43","@44","@45","@46","Term","@47",
"@48","Facteur","Variable","List","@49","ChaineDeCaractaire","ElementList","NewObject",
"@50","@51","PrametreNew","NewObjectName","Rule","@52","@53","RuleCondition",
"@54","Clause","@55","FactPattern","@56","LogicVarSet","@57","LogicVar","FuzzyRuleSet",
"@58","ListFuzzyRule","@59","@60","FuzzyRule","@61","@62","FuzzyCondition","@63",
"FuzzyClause","@64","FuzzyFactPattern","@65","@66", NULL
};
#endif

static const short yyr1[] = {     0,
    95,    95,    96,    96,    96,    97,    98,    97,    99,   100,
   102,   101,   103,   103,   105,   104,   106,   106,   107,   107,
   108,   108,   109,   109,   109,   109,   110,   111,   111,   112,
   112,   113,   115,   114,   116,   114,   117,   117,   117,   117,
   117,   117,   118,   120,   121,   119,   123,   124,   122,   126,
   125,   128,   127,   130,   131,   129,   132,   133,   132,   135,
   134,   134,   134,   136,   134,   137,   139,   140,   141,   138,
   143,   142,   144,   145,   144,   146,   147,   147,   149,   148,
   148,   150,   150,   151,   151,   153,   152,   155,   154,   156,
   156,   157,   157,   106,   158,   159,   160,   158,   161,   161,
   162,   163,   163,   163,   163,   164,   164,   164,   164,   164,
   166,   167,   165,   169,   168,   170,   171,   170,   173,   172,
   174,   172,   175,   176,   177,   177,   178,   179,   179,   181,
   180,   183,   184,   182,   185,   185,   185,   185,   186,   186,
   187,   188,   187,   187,   190,   189,   192,   191,   193,   193,
   194,   194,   195,   195,   196,   197,   198,   198,   199,   198,
   200,   198,   198,   201,   198,   202,   198,   203,   198,   204,
   198,   205,   198,   206,   198,   207,   208,   207,   209,   207,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
   210,   211,   211,   211,   211,   213,   212,   214,   215,   215,
   217,   218,   216,   219,   219,   220,   222,   223,   221,    -1,
   225,   224,   226,   227,   226,   226,    -1,    -1,   229,   228,
   228,   230,   231,   230,   232,   234,   233,   236,   235,   237,
   235,   239,   240,   238,   242,   241,   243,   244,   243,   246,
   247,   245,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1
};

static const short yyr2[] = {     0,
     1,     2,     4,     3,     1,     4,     0,     6,     1,     2,
     0,     4,     2,     2,     0,     7,     1,     3,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     4,     3,     1,
     2,     3,     0,     3,     0,     3,     1,     1,     1,     1,
     1,     1,     3,     0,     0,     6,     0,     0,     6,     0,
     5,     0,     5,     0,     0,     6,     1,     0,     3,     0,
     3,     1,     2,     0,     4,     2,     0,     0,     0,    10,
     0,     6,     1,     0,     3,     2,     1,     2,     0,     5,
     3,     1,     1,     1,     1,     0,     3,     0,     4,     1,
     3,     1,     3,     2,     1,     0,     0,     6,     1,     3,
     1,     1,     1,     2,     2,     1,     2,     2,     2,     2,
     0,     0,     9,     0,     4,     1,     0,     4,     0,     5,
     0,     4,     1,     1,     1,     3,     2,     1,     1,     0,
     5,     0,     0,     9,     1,     2,     2,     3,     1,     1,
     2,     0,     5,     1,     0,     5,     0,     4,     4,     6,
     1,     3,     1,     1,     4,     1,     1,     2,     0,     4,
     0,     4,     2,     0,     4,     0,     4,     0,     4,     0,
     4,     0,     4,     0,     4,     1,     0,     4,     0,     4,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     3,     3,     0,     4,     1,     1,     2,
     0,     0,     6,     2,     1,     1,     0,     0,     6,     1,
     0,     3,     1,     0,     4,     3,     2,     2,     0,     6,
     2,     1,     0,     3,     2,     0,     4,     0,     3,     0,
     3,     0,     0,     6,     0,     3,     1,     0,     4,     0,
     0,     7,     0,     0,     0,     7,     1,     0,     3,     1
};

static const short yydefact[] = {     0,
     0,     9,     0,     1,     5,     0,     0,     0,    11,     2,
     0,     0,     0,    10,     0,     7,    82,     4,     0,    83,
     0,     0,    47,     0,     0,     0,     0,     0,    19,    21,
    23,    27,    25,    26,    30,    37,    38,    40,    41,    42,
    39,    24,    77,     0,    14,     0,    13,    12,     6,     0,
     0,    44,    54,     0,     0,     0,     0,     0,     3,    22,
    31,    78,    86,     0,    84,    85,     0,   190,   202,     0,
   206,     0,     0,   106,     0,   208,   189,   181,   182,   183,
   184,   186,   187,   185,   188,     0,   211,     0,     0,     0,
     0,     0,   102,     0,     0,   192,   116,     0,     0,   103,
   129,   128,   159,   157,   176,   191,   194,   196,   195,   199,
   198,   197,   201,   200,   147,   135,     0,    29,     0,     0,
   139,   144,     0,   140,     0,     0,     0,    43,    33,    32,
    50,    52,     0,     0,    81,    79,   156,    15,     0,   202,
   192,   159,   191,     0,   163,   158,   231,     0,   159,     0,
   127,   221,   217,   245,   242,   236,     8,   104,   105,   108,
   107,   109,   117,   119,   110,   130,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   137,    28,     0,   136,     0,   141,     0,     0,     0,
    45,    58,    60,    62,     0,    55,     0,    48,     0,     0,
     0,     0,    87,    17,    92,     0,    90,     0,     0,     0,
     0,   193,   209,     0,   229,   132,   216,     0,     0,     0,
     0,     0,     0,   203,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   204,   205,
     0,     0,     0,   138,   142,   145,    64,    66,     0,     0,
     0,     0,     0,    63,     0,     0,    34,    36,    51,    53,
     0,     0,    89,     0,     0,   101,    94,    99,    80,     0,
     0,   207,   210,     0,     0,   212,     0,   222,   223,   218,
     0,   246,   247,   243,   237,   238,   118,     0,     0,   125,
   124,   122,     0,   160,   162,   165,   167,   169,   171,   173,
   175,   178,   180,   115,   148,     0,   149,     0,     0,     0,
    71,    67,    46,    59,    61,    56,    49,     0,    18,    91,
    93,     0,     0,     0,   233,     0,     0,     0,   231,     0,
     0,     0,   250,     0,     0,     0,     0,     0,   120,   131,
   153,     0,   151,   154,     0,   143,   146,    65,     0,     0,
    97,   100,    16,     0,     0,   230,   133,   215,     0,   213,
   226,     0,   219,     0,     0,   244,   239,   241,   126,     0,
   150,     0,     0,     0,    73,    68,     0,   112,   234,     0,
   214,   225,     0,   249,   152,     0,    76,    72,     0,     0,
    98,     0,     0,   251,   155,    75,    69,   113,   134,     0,
     0,   252,     0,    70,     0,     0
};

static const short yydefgoto[] = {     3,
     4,     5,    50,     6,     7,     8,    15,    14,    47,   210,
   205,    28,    29,    30,    31,    32,    33,    34,   130,   199,
   200,    35,    36,    37,   125,   251,    38,    54,   256,    39,
   201,    40,   202,    41,   126,   255,   191,   252,   192,   253,
   310,   193,   194,   350,   390,   401,   195,   349,   374,   389,
   375,    42,    43,   209,    44,    64,    65,   133,    66,   134,
   206,   207,   208,   261,   377,   267,   268,    92,    93,    94,
   139,   392,    95,   179,   141,   225,    97,   226,   227,    98,
   292,   289,    99,   100,   101,   228,   102,   275,   380,   119,
   120,   121,   308,   122,   309,   123,   180,   124,   342,   343,
   344,   138,   103,   167,   168,   169,   170,   171,   172,   173,
   174,   104,   175,   176,   105,   143,   107,   144,   108,   214,
   109,   150,   328,   360,   218,   110,   220,   332,   153,   219,
   278,   331,   111,   274,   326,   355,   112,   113,   223,   285,
   336,   337,   114,   222,   335,   155,   221,   282,   334,   283,
   364,   400
};

static const short yypact[] = {    46,
    12,-32768,    41,-32768,-32768,    52,    21,    27,-32768,-32768,
    83,    54,    13,-32768,    61,    18,-32768,-32768,    64,-32768,
    97,   103,-32768,   114,   123,   128,   131,   151,-32768,   158,
-32768,-32768,-32768,-32768,   239,-32768,-32768,-32768,-32768,-32768,
-32768,     8,-32768,   129,-32768,   161,-32768,-32768,-32768,   459,
    22,-32768,-32768,   133,   160,   194,   199,   202,-32768,-32768,
-32768,-32768,   206,    29,-32768,-32768,   171,-32768,   184,   612,
-32768,   625,   625,-32768,    32,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   612,-32768,   612,   152,   153,
   212,   213,-32768,   182,   189,    77,-32768,   216,   192,-32768,
-32768,-32768,   167,    16,   197,    44,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   220,-32768,    23,   205,
-32768,-32768,   101,-32768,     1,     1,   207,-32768,   235,-32768,
-32768,-32768,   240,   241,-32768,   459,-32768,-32768,   231,-32768,
   228,   253,    20,   612,    16,    16,-32768,   257,   335,   259,
   173,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   260,   267,-32768,-32768,   252,   238,   263,   268,
   271,   266,   269,   274,   264,   262,   284,   289,   283,   282,
   171,-32768,-32768,   279,-32768,    91,-32768,   459,   146,   293,
-32768,   244,-32768,-32768,   281,-32768,   294,-32768,   285,   194,
   288,   290,-32768,    73,   303,    90,   291,   316,   265,   311,
   313,-32768,   173,   510,-32768,-32768,-32768,   320,   310,   298,
   340,   301,   275,-32768,   625,   612,   341,   459,   625,   625,
   625,   625,   625,   625,   625,   625,   625,   625,-32768,-32768,
   612,   330,   102,-32768,-32768,-32768,   459,-32768,   342,   362,
   306,     1,   339,-32768,   312,   344,-32768,-32768,-32768,-32768,
   356,   372,-32768,   241,   241,-32768,   365,-32768,-32768,   241,
   325,-32768,   173,   612,   459,-32768,   150,-32768,   113,-32768,
   379,-32768,   317,-32768,-32768,   314,   366,   197,    95,   173,
-32768,-32768,   297,    16,    16,    16,    16,    16,    16,    16,
    16,   197,   197,   173,-32768,   676,-32768,   385,   386,   393,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   398,-32768,   303,
   303,   316,   106,   399,   126,   397,   351,   561,-32768,   310,
   326,   310,-32768,   327,   340,   403,   275,   612,-32768,-32768,
    43,   121,-32768,-32768,   373,-32768,-32768,-32768,   378,   329,
-32768,-32768,-32768,   412,   612,-32768,-32768,-32768,    98,-32768,
-32768,   310,-32768,   332,   340,-32768,-32768,-32768,   173,   676,
-32768,    11,   415,   414,   387,-32768,   409,-32768,-32768,   459,
-32768,-32768,   420,-32768,-32768,   625,-32768,-32768,   378,   421,
-32768,   423,   405,-32768,   197,-32768,-32768,-32768,-32768,   424,
   425,-32768,   396,-32768,   436,-32768
};

static const short yypgoto[] = {-32768,
   435,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -240,-32768,   422,-32768,-32768,-32768,   404,-32768,   251,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -120,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   328,-32768,    65,-32768,
-32768,-32768,   411,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   134,   -62,   -89,-32768,
-32768,-32768,-32768,-32768,   -50,-32768,   232,-32768,-32768,-32768,
   169,   132,-32768,   -88,-32768,-32768,-32768,-32768,-32768,-32768,
   343,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    89,
-32768,   280,   -65,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -61,-32768,-32768,  -206,   -49,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -310,-32768,  -212,-32768,   111,-32768,-32768,-32768,-32768,   136,
-32768,-32768,  -215,-32768,-32768,-32768,-32768,  -325,-32768,-32768,
-32768,-32768
};


#define	YYLAST		760


static const short yytable[] = {    96,
   106,   136,   158,   159,   142,   196,   279,   286,   188,   366,
   145,   146,    17,    96,   106,   239,     9,    45,   288,   361,
   149,   363,   151,   320,   321,  -123,   115,   115,    12,   323,
   302,   303,    68,    69,    70,   189,   147,   148,    71,   384,
   405,    96,   106,   386,  -177,  -179,   158,   159,  -202,  -123,
    72,   382,   178,   116,   182,  -114,    73,    11,    17,    20,
    74,    46,    18,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    13,  -202,   178,   -95,   213,    49,
   117,   117,   190,   118,   183,    96,   106,     1,   -96,    16,
   135,    86,     1,     2,    48,    87,   263,    51,     2,   345,
    88,   291,   264,    19,   381,    20,    89,   338,   162,   163,
   338,    90,    91,   186,   306,   187,   307,   279,   262,   279,
   353,   286,    21,    22,    23,   247,    24,    25,    26,    27,
    52,   314,  -232,   370,    63,   371,    53,    96,   106,  -174,
  -168,  -166,  -170,  -172,  -164,   245,   246,    55,   273,   279,
   248,   249,  -159,  -161,   329,   148,    56,   158,   159,    59,
   290,    57,    17,   345,    58,   293,   127,   294,   295,   296,
   297,   298,   299,   300,   301,   304,    67,    96,   106,   395,
  -174,  -168,  -166,  -170,  -172,  -164,  -174,  -168,  -166,  -170,
  -172,  -164,   330,  -224,  -161,   128,    96,   106,   129,  -159,
  -161,   166,   131,   158,   159,   132,   137,    19,   325,    20,
   -88,  -111,   327,   160,   152,   154,    68,    69,    70,   156,
   161,   164,    71,   165,    96,   106,    21,    22,    23,   177,
    24,    25,    26,    27,    72,   181,   185,   158,   159,   -35,
    73,   197,    96,   106,    74,   204,   203,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,   211,   212,
   163,   215,   290,   217,   224,   230,  -174,  -168,  -166,  -170,
  -172,  -164,   369,  -121,   157,    86,    96,   106,   229,    87,
  -161,   231,   234,   232,    88,   233,   235,   236,   239,   325,
    89,   238,   237,   240,   241,    90,    91,   242,   250,   249,
    68,    69,    70,   158,   159,   -57,    71,    21,    22,    23,
   244,    24,   254,    26,    27,   262,   257,   393,    72,   259,
   266,   260,   265,   270,    73,   276,   269,   271,    74,    96,
   106,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    96,   106,   277,   281,   311,   291,  -174,  -168,
  -166,  -170,  -172,  -164,    68,    69,    70,    90,   340,    86,
    71,   280,  -161,    87,   284,   305,   312,   313,    88,   216,
   315,   318,    72,   316,    89,   317,   319,   322,    73,    90,
    91,   324,    74,   333,   357,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,  -240,  -248,  -116,   346,
   347,   348,   351,   356,   354,   372,   362,   365,    68,    69,
    70,   367,   373,    86,    71,   376,   378,    87,   383,   387,
   388,   -74,    88,   391,   394,   397,    72,   404,    89,   398,
   402,   403,    73,    90,    91,   406,    74,    10,    61,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
   258,    60,    62,   396,   198,   352,   287,   339,   385,   359,
   243,   184,    68,    69,    70,   379,   399,    86,    71,     0,
     0,    87,   368,     0,     0,     0,    88,     0,     0,     0,
    72,     0,    89,     0,     0,     0,    73,    90,    91,     0,
    74,     0,     0,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    68,   140,    70,     0,     0,     0,    71,
   272,    86,     0,     0,     0,    87,     0,     0,     0,     0,
    88,    72,     0,     0,     0,     0,    89,    73,     0,     0,
     0,    90,    91,     0,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    68,   140,    70,   358,     0,     0,
    71,     0,     0,     0,     0,     0,    87,     0,     0,     0,
     0,     0,    72,     0,     0,     0,     0,    89,    73,     0,
     0,     0,    90,    91,     0,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    68,   140,    70,     0,     0,
     0,    71,     0,     0,     0,     0,     0,    87,    68,   140,
    70,     0,     0,    72,    71,     0,     0,     0,    89,    73,
     0,     0,     0,    90,    91,     0,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,     0,     0,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
     0,     0,     0,     0,     0,     0,     0,     0,    87,    68,
   341,    70,     0,     0,     0,    71,     0,     0,     0,    89,
     0,    87,     0,     0,    90,    91,     0,     0,     0,     0,
     0,     0,    89,     0,     0,     0,     0,    90,    91,     0,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    87,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    89,     0,     0,     0,     0,    90,    91
};

static const short yycheck[] = {    50,
    50,    64,    92,    92,    70,   126,   219,   223,     8,   335,
    72,    73,     5,    64,    64,     5,     5,     5,   225,   330,
    86,   332,    88,   264,   265,     6,     5,     5,     8,   270,
   237,   238,     4,     5,     6,    35,     5,     6,    10,   365,
     0,    92,    92,    33,    29,    30,   136,   136,     6,     6,
    22,   362,    33,    32,    32,    12,    28,     6,     5,    52,
    32,    49,     9,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    48,    33,    33,     5,   144,    62,
    59,    59,    82,    62,    62,   136,   136,    47,    16,     7,
    62,    63,    47,    53,    34,    67,     7,    34,    53,   306,
    72,     7,    13,    50,     7,    52,    78,    13,    32,    33,
    13,    83,    84,    13,    13,    15,    15,   330,    13,   332,
    15,   337,    69,    70,    71,   188,    73,    74,    75,    76,
    34,   252,     7,    13,     6,    15,    34,   188,   188,    14,
    15,    16,    17,    18,    19,    55,    56,    34,   214,   362,
     5,     6,    27,    28,     5,     6,    34,   247,   247,     9,
   226,    34,     5,   370,    34,   228,    34,   229,   230,   231,
   232,   233,   234,   235,   236,   241,    16,   228,   228,   386,
    14,    15,    16,    17,    18,    19,    14,    15,    16,    17,
    18,    19,    80,    81,    28,    36,   247,   247,     5,    27,
    28,    35,     4,   293,   293,     4,    36,    50,   274,    52,
     5,    28,   275,    32,    63,    63,     4,     5,     6,     8,
    32,     6,    10,    32,   275,   275,    69,    70,    71,    33,
    73,    74,    75,    76,    22,    16,    32,   327,   327,     5,
    28,    35,   293,   293,    32,     5,     7,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    28,     7,
    33,     5,   328,     5,     5,    28,    14,    15,    16,    17,
    18,    19,   338,     7,    62,    63,   327,   327,    27,    67,
    28,    19,    17,    16,    72,    15,    18,    14,     5,   355,
    78,    30,    29,     5,    12,    83,    84,    16,     6,     6,
     4,     5,     6,   393,   393,    62,    10,    69,    70,    71,
    32,    73,    32,    75,    76,    13,    32,   380,    22,    32,
     5,    32,    32,    13,    28,     6,    62,    15,    32,   380,
   380,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,   393,   393,    35,     6,     5,     7,    14,    15,
    16,    17,    18,    19,     4,     5,     6,    83,    62,    63,
    10,    64,    28,    67,    64,    36,     5,    62,    72,    35,
    32,    16,    22,    62,    78,    32,     5,    13,    28,    83,
    84,    57,    32,     5,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    83,    81,    33,    15,
    15,     9,     5,     7,     6,    33,    81,    81,     4,     5,
     6,     9,    35,    63,    10,    87,     5,    67,    87,     5,
     7,    35,    72,    15,     5,     5,    22,    32,    78,     7,
     7,     7,    28,    83,    84,     0,    32,     3,    35,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
   200,    30,    42,   389,   127,   322,   225,   289,   370,   328,
   181,   119,     4,     5,     6,   355,    62,    63,    10,    -1,
    -1,    67,   337,    -1,    -1,    -1,    72,    -1,    -1,    -1,
    22,    -1,    78,    -1,    -1,    -1,    28,    83,    84,    -1,
    32,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     4,     5,     6,    -1,    -1,    -1,    10,
    11,    63,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
    72,    22,    -1,    -1,    -1,    -1,    78,    28,    -1,    -1,
    -1,    83,    84,    -1,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     4,     5,     6,     7,    -1,    -1,
    10,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
    -1,    -1,    22,    -1,    -1,    -1,    -1,    78,    28,    -1,
    -1,    -1,    83,    84,    -1,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     4,     5,     6,    -1,    -1,
    -1,    10,    -1,    -1,    -1,    -1,    -1,    67,     4,     5,
     6,    -1,    -1,    22,    10,    -1,    -1,    -1,    78,    28,
    -1,    -1,    -1,    83,    84,    -1,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    -1,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,     4,
     5,     6,    -1,    -1,    -1,    10,    -1,    -1,    -1,    78,
    -1,    67,    -1,    -1,    83,    84,    -1,    -1,    -1,    -1,
    -1,    -1,    78,    -1,    -1,    -1,    -1,    83,    84,    -1,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    83,    84
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
CCompilateur::yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 68 "grammar.yacc"
{
								
							;
    break;}
case 3:
#line 78 "grammar.yacc"
{						
								if(!computContraint()) return false;
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 4:
#line 85 "grammar.yacc"
{
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 7:
#line 97 "grammar.yacc"
{
								initMessageManager();
							;
    break;}
case 8:
#line 102 "grammar.yacc"
{
								if(!endMessageManager()) return 0;
							;
    break;}
case 9:
#line 108 "grammar.yacc"
{
								if(_ResultCompile != NULL) 
								{
									yyerror("an MessageManager block had all ready declared");
									return 0;
								}								
							;
    break;}
case 11:
#line 121 "grammar.yacc"
{
								NLAIAGENT::CStringVarName interfName(LastyyText[1]);																																
								try
								{	
									NLAIC::CIdentType id = getTypeOfClass(interfName);
									_SelfClass.push((IClassInterpret *)(((CClassInterpretFactory *)id.getFactory())->getClass()->newInstance()));
									((IClassInterpret *)_SelfClass.get())->setInheritanceName(interfName);
								}
								catch(NLAIE::IException &a)
								{									
									yyerror((char *)a.what());
									return 0;
								}
							;
    break;}
case 14:
#line 140 "grammar.yacc"
{
								try
								{
									NLAIC::CIdentType id(LastyyText[1]);
									char text[1024*4];
									sprintf(text,"class '%s' all ready exist",LastyyText[1]);
									yyerror(text);
									return 0;
								}
								catch(NLAIE::IException &)
								{
									( (IClassInterpret *) _SelfClass.get() )->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
									( (IClassInterpret *) _SelfClass.get() )->buildVTable();
									RegisterClass();
								}
							;
    break;}
case 15:
#line 159 "grammar.yacc"
{
								((IClassInterpret *)_SelfClass.get())->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
							;
    break;}
case 25:
#line 178 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->buildLogicTables();
								}
							;
    break;}
case 33:
#line 204 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[1] ) );
							;
    break;}
case 35:
#line 214 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[0] ) );
							;
    break;}
case 43:
#line 238 "grammar.yacc"
{
								char *txt1 = LastyyText[0];
								char *txt2 = LastyyText[1];
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setComment( LastyyText[1] );
								}


							;
    break;}
case 44:
#line 252 "grammar.yacc"
{
								is_cond = true;
								initParam();
								_InCond = true;
							;
    break;}
case 45:
#line 258 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
								_InCond = false;
							;
    break;}
case 47:
#line 276 "grammar.yacc"
{
								if ( !classIsAnOperator() )
								 	return 0;
							;
    break;}
case 48:
#line 282 "grammar.yacc"
{
								if ( _Goal ) 
								{
									_Goal->release();
									_Goal = NULL;
								}
								
								if ( classIsAnOperator() )
								{
									// Builds a FactPattern

									// Adds it as goal to the operator class
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setGoal( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
								}
							;
    break;}
case 50:
#line 304 "grammar.yacc"
{
									if ( classIsAnOperator() )
									{
										sint32 update = (sint32) LastyyNum;
										COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
										op_class->setUpdateEvery( update );
										if(_LastFact.Value != NULL) 
										{
											_LastFact.Value->release();
											_LastFact.Value = NULL;
										}

										if(_FlotingExpressionType != NULL)
										{
											_FlotingExpressionType->release();
											_FlotingExpressionType = NULL;
										}
									}	
								;
    break;}
case 52:
#line 327 "grammar.yacc"
{
									if ( classIsAnOperator() )
									{
										float priority = (float) LastyyNum;
										COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
										op_class->setPriority( priority );
										if(_LastFact.Value != NULL) 
										{
											_LastFact.Value->release();
											_LastFact.Value = NULL;
										}

										if(_FlotingExpressionType != NULL)
										{
											_FlotingExpressionType->release();
											_FlotingExpressionType = NULL;
										}
									}	
								;
    break;}
case 54:
#line 353 "grammar.yacc"
{
								is_cond = false;
								initParam();
								_InCond = true;
							;
    break;}
case 55:
#line 359 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
/*									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
									}
									*/

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeConc( _LastCodeBranche.back() );
										_LastCodeBranche.pop_back();
									}
								}
								_InCond = false;
							;
    break;}
case 57:
#line 385 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 58:
#line 389 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 59:
#line 393 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 60:
#line 400 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 62:
#line 405 "grammar.yacc"
{

								if ( classIsAnOperator() )
								{

									NLAIAGENT::CStringVarName *vvar = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									NLAIAGENT::CStringVarName *vset = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->addFuzzyCond(vvar, vset);
								}
							;
    break;}
case 63:
#line 422 "grammar.yacc"
{									
								COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
								while ( _LastAsserts.size() )
								{
									if ( is_cond )
										op_class->addFirstOrderCond( _LastAsserts.back(), _LastLogicParams.back() );
									else
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );

									_LastAsserts.pop_back();
									_LastLogicParams.pop_back();
								}
							;
    break;}
case 64:
#line 436 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
//										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_LastCodeBranche.push_back( (IOpCode *) listCode );
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}							

/*								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}				
*/				
							;
    break;}
case 66:
#line 497 "grammar.yacc"
{
							char *param_name = LastyyText[1];
							_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
						;
    break;}
case 67:
#line 506 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 68:
#line 511 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 69:
#line 515 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 71:
#line 525 "grammar.yacc"
{
							const char *assert_name = LastyyText[1];
							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );
						;
    break;}
case 73:
#line 536 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 74:
#line 540 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 76:
#line 547 "grammar.yacc"
{
							char *var_name = LastyyText[1];
							_LastLogicParams.back().push_back( new NLAIAGENT::CStringVarName( var_name ) );
						;
    break;}
case 79:
#line 560 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}

								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}								
								if(!caseRunMsg()) return false;
							;
    break;}
case 81:
#line 619 "grammar.yacc"
{	
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}
								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}
								if(!caseRunMsg()) return false;

							;
    break;}
case 82:
#line 679 "grammar.yacc"
{				
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 83:
#line 687 "grammar.yacc"
{
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 86:
#line 701 "grammar.yacc"
{								
								initParam();
							;
    break;}
case 87:
#line 705 "grammar.yacc"
{
								if(!registerMethod()) return false;
							;
    break;}
case 88:
#line 711 "grammar.yacc"
{
								initParam();
							;
    break;}
case 89:
#line 715 "grammar.yacc"
{
								registerMethod();
							;
    break;}
case 95:
#line 733 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[0]);
								_BaseObjectDef = false;
							;
    break;}
case 96:
#line 738 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 97:
#line 743 "grammar.yacc"
{
								_LastBaseObjectDef = NLAIAGENT::CStringVarName(LastyyText[1]);
								_BaseObjectDef = true;

							;
    break;}
case 101:
#line 757 "grammar.yacc"
{
								if(!setParamVarName()) return 0;
							;
    break;}
case 109:
#line 773 "grammar.yacc"
{
								_LastStringParam.back()->release();
								_LastStringParam.pop_back();
								_Param.back()->release();
								_Param.pop_back();								
							;
    break;}
case 110:
#line 781 "grammar.yacc"
{
								_LastBloc->addCode((new CHaltOpCode));
							;
    break;}
case 111:
#line 787 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 112:
#line 795 "grammar.yacc"
{					
								NLAIAGENT::CStringVarName x(LastyyText[1]);			
								if(!castVariable(_LastString,x)) return false;
							;
    break;}
case 114:
#line 802 "grammar.yacc"
{								
								std::list<NLAISCRIPT::CStringType>::iterator i = _LasVarStr.begin();
								_LasAffectationVarStr.clear();
								while(i != _LasVarStr.end())
								{
									_LasAffectationVarStr.push_back(*i++);
								}												
							;
    break;}
case 115:
#line 812 "grammar.yacc"
{
								if(!affectation()) 
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 117:
#line 825 "grammar.yacc"
{
								
							;
    break;}
case 119:
#line 833 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 121:
#line 841 "grammar.yacc"
{								
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 123:
#line 851 "grammar.yacc"
{
								nameMethodeProcessing();
							;
    break;}
case 124:
#line 858 "grammar.yacc"
{	
								_ExpressionType = _ExpressionTypeTmp.back();
								_ExpressionTypeTmp.pop_back();								
								if(!callFunction())
								{
									_FromStack.pop_back();
									return 0;	
								}
								_FromStack.pop_back();
							;
    break;}
case 125:
#line 871 "grammar.yacc"
{
								pushParamExpression();								
							;
    break;}
case 126:
#line 876 "grammar.yacc"
{
								pushParamExpression();
							;
    break;}
case 127:
#line 883 "grammar.yacc"
{
								if ( !_InCond )
									if(!typeOfMethod()) return false;
							;
    break;}
case 130:
#line 895 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 131:
#line 900 "grammar.yacc"
{
								interrogationEnd();
							;
    break;}
case 132:
#line 908 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 133:
#line 913 "grammar.yacc"
{								
								ifInterrogationPoint()
							;
    break;}
case 134:
#line 918 "grammar.yacc"
{
								ifInterrogationEnd();
							;
    break;}
case 142:
#line 936 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Local = true;								
							;
    break;}
case 145:
#line 946 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Static = true;
							;
    break;}
case 147:
#line 954 "grammar.yacc"
{								
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
								_LastRegistered = ((IClassInterpret *)_SelfClass.get())->registerComponent(_LastString);
							;
    break;}
case 148:
#line 960 "grammar.yacc"
{
								if(((IClassInterpret *)_SelfClass.get())->getComponent(NLAIAGENT::CStringVarName(LastyyText[1])) == NULL)
								{
									CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);
									c->ObjectName = new NLAIAGENT::CStringVarName(LastyyText[1]);									
								}
								else
								{
									yyerror("variable all ready declared in the Register components");
									return 0;			
								}
							;
    break;}
case 157:
#line 992 "grammar.yacc"
{	
								if(_FacteurEval)
								{								
									allocExpression(NULL);
									setTypeExpression();
								}
							;
    break;}
case 158:
#line 1000 "grammar.yacc"
{								
								allocExpression(new CNegOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opAdd,"(-)");
								
							;
    break;}
case 159:
#line 1006 "grammar.yacc"
{	
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opAdd))
								{
									yyerror("erreur sémantique l'operateur + n'est pas supporté par cette expression");
									return 0;
								}*/								
								setTypeExpressionG();
								allocExpression(NULL);
								
								
							;
    break;}
case 160:
#line 1018 "grammar.yacc"
{									
								allocExpression(new CAddOpCode,true);		
								setTypeExpressionD(NLAIC::CTypeOfOperator::opAdd,"+");	
							;
    break;}
case 161:
#line 1023 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSub))
								{
									yyerror("erreur sémantique l'operateur - n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);
								
							;
    break;}
case 162:
#line 1034 "grammar.yacc"
{								
								allocExpression(new CSubOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSub,"-");							
							;
    break;}
case 163:
#line 1039 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opNot))
								{
									yyerror("erreur sémantique l'operateur ! n'est pas supporté par cette expression");
									return 0;
								}*/								
								allocExpression(new CNotOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opNot,"!");
								
							;
    break;}
case 164:
#line 1050 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiff))
								{
									yyerror("erreur sémantique l'operateur != n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 165:
#line 1060 "grammar.yacc"
{								
								allocExpression(new CDiffOpCode,true);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiff,"!=");
								
							;
    break;}
case 166:
#line 1066 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInf))
								{
									yyerror("erreur sémantique l'operateur < n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
								
							;
    break;}
case 167:
#line 1077 "grammar.yacc"
{								
								allocExpression(new CInfOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInf,"<");							
							;
    break;}
case 168:
#line 1082 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSup))
								{
									yyerror("erreur sémantique l'operateur > n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);								
							;
    break;}
case 169:
#line 1092 "grammar.yacc"
{								
								allocExpression(new CSupOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSup,">");							
							;
    break;}
case 170:
#line 1097 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSupEq))
								{
									yyerror("erreur sémantique l'operateur >= n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
							;
    break;}
case 171:
#line 1107 "grammar.yacc"
{								
								allocExpression(new CSupEqOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSupEq,">=");
							;
    break;}
case 172:
#line 1112 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInfEq))
								{
									yyerror("erreur sémantique l'operateur <= n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 173:
#line 1122 "grammar.yacc"
{								
								allocExpression(new CInfEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInfEq,"<=");
							;
    break;}
case 174:
#line 1127 "grammar.yacc"
{
								setTypeExpressionG();	
								allocExpression(NULL);														
							;
    break;}
case 175:
#line 1132 "grammar.yacc"
{								
								allocExpression(new CEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opEq,"==");

							;
    break;}
case 176:
#line 1140 "grammar.yacc"
{
								_FacteurEval = true;	
							;
    break;}
case 177:
#line 1144 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opMul))
								{
									yyerror("erreur sémantique l'operateur * n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();								
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 178:
#line 1155 "grammar.yacc"
{									
								setTypeExpressionD(NLAIC::CTypeOfOperator::opMul,"+");
								allocExpression(new CMulOpCode,false);
								_FacteurEval = false;
							;
    break;}
case 179:
#line 1161 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiv))
								{
									yyerror("erreur sémantique l'operateur / n'est pas supporté par cette expression");
									return 0;
								}*/
											
								setTypeExpressionG();
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 180:
#line 1173 "grammar.yacc"
{																
								allocExpression(new CDivOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiv,"/");
								_FacteurEval = false;	
							;
    break;}
case 181:
#line 1182 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PExec);
							;
    break;}
case 182:
#line 1187 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAchieve);
							;
    break;}
case 183:
#line 1192 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAsk);
							;
    break;}
case 184:
#line 1197 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PBreak);
							;
    break;}
case 185:
#line 1202 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PError);
							;
    break;}
case 186:
#line 1207 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PTell);
							;
    break;}
case 187:
#line 1212 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PKill);
							;
    break;}
case 188:
#line 1217 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PEven);
							;
    break;}
case 189:
#line 1222 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVarNill();
							;
    break;}
case 190:
#line 1228 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVar();
							;
    break;}
case 191:
#line 1233 "grammar.yacc"
{								
								_IsFacteurIsExpression = false;
								if(!processingVar())
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 192:
#line 1243 "grammar.yacc"
{								
								_IsFacteurIsExpression = true;								
								setMethodVar();
							;
    break;}
case 193:
#line 1248 "grammar.yacc"
{							
								_IsFacteurIsExpression = true;
							;
    break;}
case 194:
#line 1252 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 195:
#line 1256 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 196:
#line 1260 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 197:
#line 1264 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 198:
#line 1268 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 199:
#line 1272 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 200:
#line 1276 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 201:
#line 1280 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 202:
#line 1287 "grammar.yacc"
{
								_LasVarStr.clear();
								_LasVarStr.push_back(NLAISCRIPT::CStringType(LastyyText[1]));
								_LastFact.VarType = varTypeUndef;
								_IsFacteurIsExpression = false;	
								_FromStack.push_back(false);							
							;
    break;}
case 203:
#line 1296 "grammar.yacc"
{
								_LasVarStr.clear();
								cleanTypeList();
								_LasVarStr.push_back(LastyyText[1]);
								setMethodVar();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);

							;
    break;}
case 204:
#line 1308 "grammar.yacc"
{	
								cleanTypeList();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);
							;
    break;}
case 205:
#line 1317 "grammar.yacc"
{									
								if(_IsFacteurIsExpression)
								{
									IOpType *c = _TypeList.back();
									_TypeList.pop_back();
									c->release();
									_TypeList.push_back(_FlotingExpressionType);
									_FlotingExpressionType->incRef();
									_LasVarStr.clear();
									_FromStack.pop_back();
								}
								_LasVarStr.push_back(LastyyText[1]);
							;
    break;}
case 206:
#line 1334 "grammar.yacc"
{									
								setListVar();
							;
    break;}
case 208:
#line 1342 "grammar.yacc"
{									
								setChaineVar();
							;
    break;}
case 209:
#line 1348 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));								
							;
    break;}
case 210:
#line 1352 "grammar.yacc"
{								
								_LastBloc->addCode((new CAddOpCode));
							;
    break;}
case 211:
#line 1358 "grammar.yacc"
{
								_LastStringParam.push_back(new NLAIAGENT::CGroupType());								

							;
    break;}
case 212:
#line 1363 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
							;
    break;}
case 214:
#line 1369 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 215:
#line 1373 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 216:
#line 1380 "grammar.yacc"
{							
								_LastStringParam.back()->cpy(NLAIAGENT::CStringType(NLAIAGENT::CStringVarName(LastyyText[1])));
								_Param.push_back(new CParam);								
							;
    break;}
case 217:
#line 1387 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );				
						;
    break;}
case 218:
#line 1392 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 219:
#line 1396 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
//							_LastBloc->addCode( new CLdbNewOpCode(CRule()) );		
							setStackVar( CVar::IdVar );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tUndef);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::Rule::idRule;
						;
    break;}
case 221:
#line 1411 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 222:
#line 1415 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbNewOpCode( CClause() ) );
							//_LastBloc->addCode( new CAddOpCode() );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::CClause::idCClause;
						;
    break;}
case 223:
#line 1427 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 224:
#line 1431 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 225:
#line 1435 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );							
						;
    break;}
case 226:
#line 1440 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );													
						;
    break;}
case 227:
#line 1446 "grammar.yacc"
{
							_LastBloc->addCode( new CTellOpCode() );
						;
    break;}
case 228:
#line 1452 "grammar.yacc"
{
							/*char buf[256];
							strcpy(buf, LastyyText[1]);
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CBoolType( NLAIAGENT::CStringVarName(LastyyText[1]) ) ) );
							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
							_LastFact.varType = varForFunc;
							_LastFact.isUsed = false;
							_lastIdentType = NLAIAGENT::CVar::idBoolType;
							*/
						;
    break;}
case 229:
#line 1465 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
							char *txt = LastyyText[1];
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode(new CAddOpCode() );
							//_LastAssert = NLAIAGENT::CStringVarName(LastyyText[1]);
						;
    break;}
case 230:
#line 1473 "grammar.yacc"
{
/*							setStackVar( CFactPattern::IdFactPattern );
							IBaseAssert *my_assert = _FactBase->addAssert( _LastAssert, _NbLogicParams );
							_NbLogicParams = 0;
							_LastBloc->addCode(new CLdbNewOpCode( CFactPattern( my_assert ) ) );
							*/
						;
    break;}
case 231:
#line 1483 "grammar.yacc"
{
						;
    break;}
case 232:
#line 1490 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 233:
#line 1496 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 235:
#line 1505 "grammar.yacc"
{
							char buf[256];
							strcpy(buf, LastyyText[1]);
							setStackVar( CVar::IdVar );
							_LastBloc->addCode( new CLdbOpCode(CVar( LastyyText[1] )) );
						;
    break;}
case 236:
#line 1515 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
						;
    break;}
case 238:
#line 1522 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 239:
#line 1526 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 240:
#line 1530 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 241:
#line 1534 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 242:
#line 1540 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );
						;
    break;}
case 243:
#line 1545 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 244:
#line 1549 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyRule() ) );		
							setStackVar(CFuzzyRule::IdFuzzyRule);
						;
    break;}
case 245:
#line 1557 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 246:
#line 1561 "grammar.yacc"
{
							
						;
    break;}
case 247:
#line 1567 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 248:
#line 1571 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 250:
#line 1578 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							// Composant?
							char *txt = LastyyText[0];
/*							_lastFVarIndex = ((IClassInterpret *)_selfClass.get())->getComponentIndex(NLAIAGENT::CStringVarName(LastyyText[1]));
							if (_lastFVarIndex != -1 )
							{
								_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CDigitalType(_lastFVarIndex) ) );
								_LastBloc->addCode( new CAddOpCode() );
							}
							else
							{
								// Variable locale?
							}
							*/

						;
    break;}
case 251:
#line 1596 "grammar.yacc"
{
							_LastString = NLAIAGENT::CStringVarName( LastyyText[0] );
						;
    break;}
case 252:
#line 1600 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++ );
							_LastBloc->addCode(new CLdbNewOpCode( CSimpleFuzzyCond(NULL, NULL) ) );
						;
    break;}
case 253:
#line 1607 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 254:
#line 1611 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 255:
#line 1616 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 256:
#line 1620 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyVar(NLAIAGENT::CStringVarName("Inst"),0,1) ) );
						;
    break;}
case 257:
#line 1627 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 258:
#line 1631 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 260:
#line 1638 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1642 "grammar.yacc"

