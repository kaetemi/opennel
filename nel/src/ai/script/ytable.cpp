
/*  A Bison parser, made from grammar.yacc
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FIN	258
#define	NOMBRE	259
#define	IDENT	260
#define	PAR_G	261
#define	PAR_D	262
#define	ACCOL_G	263
#define	ACCOL_D	264
#define	CROCHER_G	265
#define	CROCHER_D	266
#define	EG_MATH	267
#define	VIRGULE	268
#define	EG_LOG	269
#define	SUP	270
#define	INF	271
#define	SUP_EG	272
#define	INF_EG	273
#define	DIFF	274
#define	OR_LOG	275
#define	AND_LOG	276
#define	NON_BIN	277
#define	OR_BIN	278
#define	AND_BIN	279
#define	XOR_BIN	280
#define	SCOP	281
#define	PLUS	282
#define	MOINS	283
#define	FOIS	284
#define	DIV	285
#define	POWER	286
#define	POINT_VI	287
#define	LEPOINT	288
#define	POINT_DEUX	289
#define	INTERROGATION	290
#define	CHAINE	291
#define	NILL	292
#define	EXEC	293
#define	ACHIEVE	294
#define	ASK	295
#define	BREAK	296
#define	TELL	297
#define	KILL	298
#define	PERROR	299
#define	EVEN	300
#define	BEGIN_GRAMMAR	301
#define	FROM	302
#define	DEFINE	303
#define	GROUP	304
#define	COMPONENT	305
#define	CONSTRUCTION	306
#define	DESTRUCTION	307
#define	MESSAGE_MANAGER	308
#define	MAESSAGELOOP	309
#define	TRIGGER	310
#define	PRECONDITION	311
#define	POSTCONDITION	312
#define	GOAL	313
#define	RETURN	314
#define	COS	315
#define	SIN	316
#define	TAN	317
#define	POW	318
#define	LN	319
#define	LOG	320
#define	FACT	321
#define	AS	322
#define	DIGITAL	323
#define	COLLECTOR	324
#define	WITH	325
#define	DO	326
#define	END	327
#define	IF	328
#define	THEN	329
#define	BEGINING	330
#define	END_GRAMMAR	331
#define	LOGICVAR	332
#define	RULE	333
#define	IA_ASSERT	334
#define	FUZZY	335
#define	FUZZYRULE	336
#define	FUZZYRULESET	337
#define	SETS	338
#define	FUZZYVAR	339
#define	FIS	340
#define	OR	341
#define	COMMENT	342
#define	STEPS	343
#define	NEW	344
#define	AND	345
#define	LOCAL	346

#line 1 "grammar.yacc"

#include <malloc.h>
#include <list>
#define PARSER_NO_REDEF_YYTABLE_H_
#include "nel/ai/script/compilateur.h"
#include "nel/ai/script/constraint.h"
#include "nel/ai/script/type_def.h"
#include "nel/ai/script/object_unknown.h"
#include "nel/ai/logic/logic.h"
#include "nel/ai/fuzzy/fuzzy.h"
#include "nel/ai/logic/interpret_object_operator.h"
#include "nel/ai/script/interpret_fsm.h"

using  namespace NLAISCRIPT;
using  namespace NLAILOGIC;
using  namespace NLAIFUZZY;
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		386
#define	YYFLAG		-32768
#define	YYNTBASE	92

#define YYTRANSLATE(x) ((unsigned)(x) <= 346 ? yytranslate[x] : 239)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,    10,    14,    16,    21,    22,    29,    31,
    34,    35,    40,    43,    46,    47,    55,    57,    61,    63,
    65,    67,    70,    72,    74,    76,    78,    80,    85,    89,
    91,    94,    98,    99,   103,   104,   108,   110,   112,   114,
   116,   120,   121,   122,   129,   130,   135,   136,   137,   144,
   146,   147,   151,   152,   156,   158,   159,   163,   165,   168,
   169,   170,   171,   172,   184,   185,   192,   194,   195,   199,
   202,   204,   207,   208,   214,   218,   220,   222,   224,   226,
   227,   231,   232,   237,   239,   243,   245,   249,   252,   254,
   255,   256,   263,   265,   269,   271,   273,   275,   278,   281,
   283,   286,   289,   292,   295,   296,   297,   307,   308,   313,
   315,   316,   321,   322,   328,   329,   334,   336,   338,   340,
   344,   347,   349,   351,   352,   358,   359,   360,   370,   372,
   375,   378,   382,   384,   386,   389,   390,   396,   397,   402,
   407,   414,   416,   420,   422,   424,   429,   431,   433,   436,
   437,   442,   443,   448,   451,   452,   457,   458,   463,   464,
   469,   470,   475,   476,   481,   482,   487,   489,   490,   495,
   496,   501,   503,   505,   507,   509,   511,   513,   515,   517,
   519,   521,   523,   525,   529,   531,   533,   535,   537,   539,
   541,   543,   545,   547,   551,   555,   559,   560,   565,   567,
   569,   572,   573,   574,   581,   584,   586,   588,   589,   590,
   597,   599,   600,   604,   606,   607,   612,   616,   619,   622,
   623,   630,   633,   635,   636,   640,   643,   644,   649,   650,
   654,   655,   659,   660,   661,   668,   669,   673,   675,   676,
   681,   682,   683,   691,   692,   693,   694,   702,   704,   705,
   709
};

static const short yyrhs[] = {    93,
     0,    92,    93,     0,    97,     8,   104,     9,     0,    97,
     8,     9,     0,    94,     0,    96,     6,     7,    72,     0,
     0,    96,     6,     7,    95,   156,    72,     0,    53,     0,
    98,   100,     0,     0,    47,     5,    99,    34,     0,    48,
   101,     0,    48,     5,     0,     0,    49,    16,   188,   102,
    13,   103,    15,     0,     5,     0,   103,    13,     5,     0,
   105,     0,   104,     0,   106,     0,   106,   105,     0,   107,
     0,   140,     0,   109,     0,   110,     0,   108,     0,    50,
    34,   178,    72,     0,    50,    34,    72,     0,   114,     0,
   114,   109,     0,    88,    34,   111,     0,     0,     5,   112,
    32,     0,     0,     5,   113,   111,     0,   115,     0,   116,
     0,   121,     0,   119,     0,    87,    34,    36,     0,     0,
     0,    56,    34,   117,   124,   118,    72,     0,     0,    58,
   120,    34,     5,     0,     0,     0,    57,    34,   122,   124,
   123,    72,     0,   126,     0,     0,   126,   125,   124,     0,
     0,   129,   127,    32,     0,   130,     0,     0,   135,   128,
    32,     0,   156,     0,    35,     5,     0,     0,     0,     0,
     0,    80,     6,   189,   131,    85,   132,   189,   133,     7,
   134,    32,     0,     0,    35,     6,     5,   136,   137,     7,
     0,   139,     0,     0,   139,   138,   137,     0,    35,     5,
     0,   141,     0,   140,   141,     0,     0,   143,   144,   156,
   142,    72,     0,   143,   144,    72,     0,     5,     0,    52,
     0,   145,     0,   147,     0,     0,     6,   146,     7,     0,
     0,     6,   148,   149,     7,     0,   150,     0,   149,    13,
   103,     0,   103,     0,   150,    32,   103,     0,   151,   154,
     0,     5,     0,     0,     0,     5,   152,    16,     5,   153,
    15,     0,   155,     0,   154,    13,   155,     0,     5,     0,
   157,     0,   172,     0,   156,   157,     0,   156,   172,     0,
    32,     0,   161,    32,     0,   158,    32,     0,   163,    32,
     0,   171,    32,     0,     0,     0,     5,   159,    28,    15,
    67,     6,     5,   160,     7,     0,     0,   202,   162,    12,
   189,     0,   165,     0,     0,   163,    33,   164,   165,     0,
     0,   168,     6,   166,   170,   169,     0,     0,   168,     6,
   167,   169,     0,   202,     0,     7,     0,   189,     0,   170,
    13,   189,     0,    59,   189,     0,   175,     0,   173,     0,
     0,   189,    35,   174,   156,    72,     0,     0,     0,    73,
   189,    35,   176,   156,    34,   177,   156,    72,     0,    32,
     0,   179,    32,     0,   178,    32,     0,   178,   179,    32,
     0,   180,     0,   184,     0,   182,    15,     0,     0,   182,
    13,    91,   181,    15,     0,     0,     5,   183,    16,    36,
     0,    69,    16,   188,    15,     0,    69,    16,   188,    13,
   185,    15,     0,   186,     0,   185,    13,   186,     0,     5,
     0,   187,     0,   201,    33,    33,   201,     0,    36,     0,
   198,     0,    28,   198,     0,     0,   189,   190,    27,   198,
     0,     0,   189,   191,    28,   198,     0,    22,   198,     0,
     0,   189,   192,    19,   198,     0,     0,   189,   193,    16,
   198,     0,     0,   189,   194,    15,   198,     0,     0,   189,
   195,    17,   198,     0,     0,   189,   196,    18,   198,     0,
     0,   189,   197,    14,   198,     0,   201,     0,     0,   198,
   199,    29,   201,     0,     0,   198,   200,    30,   201,     0,
    38,     0,    39,     0,    40,     0,    41,     0,    44,     0,
    42,     0,    43,     0,    45,     0,    37,     0,     4,     0,
   202,     0,   163,     0,     6,   189,     7,     0,   203,     0,
   207,     0,   205,     0,   223,     0,   219,     0,   212,     0,
   229,     0,   224,     0,     5,     0,   163,    33,     5,     0,
   201,    33,     5,     0,   202,    33,     5,     0,     0,    10,
   204,   206,    11,     0,    36,     0,   189,     0,   206,   189,
     0,     0,     0,    89,   208,   211,     6,   209,   210,     0,
   170,     7,     0,     7,     0,     5,     0,     0,     0,    78,
   215,   213,    74,   214,   217,     0,   215,     0,     0,    73,
   216,   217,     0,   219,     0,     0,   219,   218,    90,   217,
     0,   219,    86,   217,     0,    79,   219,     0,    31,     5,
     0,     0,    35,     6,     5,   220,   221,     7,     0,    35,
     5,     0,   189,     0,     0,   189,   222,   221,     0,    35,
     5,     0,     0,    82,     8,   225,   226,     0,     0,   229,
   227,     9,     0,     0,   229,   228,   226,     0,     0,     0,
    81,   232,   230,    74,   231,   234,     0,     0,    73,   233,
   234,     0,   236,     0,     0,   236,   235,    90,   234,     0,
     0,     0,     6,     5,   237,    85,     5,   238,     7,     0,
     0,     0,     0,    84,     0,     5,     0,    83,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   189,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    51,    55,    58,    66,    72,    75,    79,    85,    91,   101,
   104,   120,   122,   123,   142,   145,   148,   149,   151,   152,
   155,   156,   159,   160,   161,   169,   172,   175,   176,   179,
   180,   183,   187,   197,   197,   207,   209,   210,   211,   212,
   216,   233,   238,   258,   261,   267,   287,   292,   313,   315,
   319,   324,   330,   335,   335,   344,   349,   349,   410,   418,
   424,   428,   432,   436,   442,   449,   456,   460,   465,   467,
   475,   476,   479,   538,   538,   599,   607,   617,   618,   621,
   626,   631,   635,   641,   642,   645,   646,   649,   653,   658,
   663,   670,   673,   674,   677,   684,   685,   686,   687,   690,
   691,   692,   693,   700,   707,   712,   720,   722,   732,   744,
   745,   750,   753,   760,   761,   769,   771,   778,   791,   795,
   802,   809,   810,   813,   819,   825,   832,   837,   843,   844,
   845,   846,   849,   850,   854,   855,   861,   863,   869,   884,
   885,   888,   889,   892,   893,   896,   898,   901,   909,   915,
   927,   932,   943,   948,   959,   969,   975,   986,   991,  1001,
  1006,  1016,  1021,  1031,  1036,  1041,  1049,  1053,  1064,  1070,
  1082,  1090,  1096,  1101,  1106,  1111,  1116,  1121,  1126,  1131,
  1136,  1142,  1152,  1157,  1161,  1165,  1169,  1173,  1177,  1181,
  1185,  1189,  1196,  1205,  1217,  1225,  1243,  1248,  1251,  1257,
  1261,  1267,  1272,  1277,  1278,  1282,  1289,  1296,  1302,  1306,
  1317,  1320,  1325,  1336,  1340,  1344,  1348,  1355,  1361,  1373,
  1382,  1392,  1399,  1405,  1412,  1414,  1424,  1429,  1431,  1436,
  1439,  1444,  1449,  1455,  1459,  1466,  1471,  1476,  1480,  1484,
  1487,  1505,  1510,  1516,  1521,  1526,  1530,  1536,  1540,  1545,
  1547
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FIN","NOMBRE",
"IDENT","PAR_G","PAR_D","ACCOL_G","ACCOL_D","CROCHER_G","CROCHER_D","EG_MATH",
"VIRGULE","EG_LOG","SUP","INF","SUP_EG","INF_EG","DIFF","OR_LOG","AND_LOG","NON_BIN",
"OR_BIN","AND_BIN","XOR_BIN","SCOP","PLUS","MOINS","FOIS","DIV","POWER","POINT_VI",
"LEPOINT","POINT_DEUX","INTERROGATION","CHAINE","NILL","EXEC","ACHIEVE","ASK",
"BREAK","TELL","KILL","PERROR","EVEN","BEGIN_GRAMMAR","FROM","DEFINE","GROUP",
"COMPONENT","CONSTRUCTION","DESTRUCTION","MESSAGE_MANAGER","MAESSAGELOOP","TRIGGER",
"PRECONDITION","POSTCONDITION","GOAL","RETURN","COS","SIN","TAN","POW","LN",
"LOG","FACT","AS","DIGITAL","COLLECTOR","WITH","DO","END","IF","THEN","BEGINING",
"END_GRAMMAR","LOGICVAR","RULE","IA_ASSERT","FUZZY","FUZZYRULE","FUZZYRULESET",
"SETS","FUZZYVAR","FIS","OR","COMMENT","STEPS","NEW","AND","LOCAL","program",
"DefinitionClass","MessageRun","@1","MessageManager","CorpDeDefinition","HeritageDeType",
"@2","EnteteDeDefinition","DefinitionDeGroup","@3","CParam","DefinitionDeProgram",
"BlocDeDefinition","UnBloc","Register","RegistDesAttributs","RegisterOperator",
"RegisterSteps","Steps","@4","@5","OpBloc","OpComment","PreCondition","@6","@7",
"Goal","@8","PostCondition","@9","@10","OperatorCond","@11","SingleOpCond","@12",
"@13","BooleanCond","FuzzyCond","@14","@15","@16","@17","FirstOrderPattern",
"@18","OpLogicVarSet","@19","OpLogicVar","BlocPourLesCode","BlocAvecCode","@20",
"Methode","Argument","ArgumentVide","@21","ArgumentListe","@22","ListesDeVariables",
"DesParams","TypeOfParam","@23","@24","DeclarationVariables","NonDeVariable",
"DuCode","Code","StaticCast","@25","@26","Affectation","@27","AppelleDeFonction",
"@28","AppelleDeFoncDirect","@29","@30","NonDeFonction","CallFunction","Prametre",
"RetourDeFonction","Evaluation","EvaluationSimpleState","@31","EvaluationState",
"@32","@33","TypeDeDeclaration","RegisterAnyVar","RegisterTypeDef","@34","TypeDeComp",
"@35","RegisterCollector","MessageType","DefMessage","Borne","Nom","Expression",
"@36","@37","@38","@39","@40","@41","@42","@43","Term","@44","@45","Facteur",
"Variable","List","@46","ChaineDeCaractaire","ElementList","NewObject","@47",
"@48","PrametreNew","NewObjectName","Rule","@49","@50","RuleCondition","@51",
"Clause","@52","FactPattern","@53","LogicVarSet","@54","LogicVar","FuzzyRuleSet",
"@55","ListFuzzyRule","@56","@57","FuzzyRule","@58","@59","FuzzyCondition","@60",
"FuzzyClause","@61","FuzzyFactPattern","@62","@63", NULL
};
#endif

static const short yyr1[] = {     0,
    92,    92,    93,    93,    93,    94,    95,    94,    96,    97,
    99,    98,   100,   100,   102,   101,   103,   103,   104,   104,
   105,   105,   106,   106,   106,   106,   107,   108,   108,   109,
   109,   110,   112,   111,   113,   111,   114,   114,   114,   114,
   115,   117,   118,   116,   120,   119,   122,   123,   121,   124,
   125,   124,   127,   126,   126,   128,   126,   126,   129,   131,
   132,   133,   134,   130,   136,   135,   137,   138,   137,   139,
   140,   140,   142,   141,   141,   143,   143,   144,   144,   146,
   145,   148,   147,   149,   149,   150,   150,   103,   151,   152,
   153,   151,   154,   154,   155,   156,   156,   156,   156,   157,
   157,   157,   157,   157,   159,   160,   158,   162,   161,   163,
   164,   163,   166,   165,   167,   165,   168,   169,   170,   170,
   171,   172,   172,   174,   173,   176,   177,   175,   178,   178,
   178,   178,   179,   179,   180,   181,   180,   183,   182,   184,
   184,   185,   185,   186,   186,   187,   188,   189,   189,   190,
   189,   191,   189,   189,   192,   189,   193,   189,   194,   189,
   195,   189,   196,   189,   197,   189,   198,   199,   198,   200,
   198,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
   201,   201,   202,   202,   202,   202,   204,   203,   205,   206,
   206,   208,   209,   207,   210,   210,   211,   213,   214,   212,
    -1,   216,   215,   217,   218,   217,   217,    -1,    -1,   220,
   219,   219,   221,   222,   221,   223,   225,   224,   227,   226,
   228,   226,   230,   231,   229,   233,   232,   234,   235,   234,
   237,   238,   236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1
};

static const short yyr2[] = {     0,
     1,     2,     4,     3,     1,     4,     0,     6,     1,     2,
     0,     4,     2,     2,     0,     7,     1,     3,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     4,     3,     1,
     2,     3,     0,     3,     0,     3,     1,     1,     1,     1,
     3,     0,     0,     6,     0,     4,     0,     0,     6,     1,
     0,     3,     0,     3,     1,     0,     3,     1,     2,     0,
     0,     0,     0,    11,     0,     6,     1,     0,     3,     2,
     1,     2,     0,     5,     3,     1,     1,     1,     1,     0,
     3,     0,     4,     1,     3,     1,     3,     2,     1,     0,
     0,     6,     1,     3,     1,     1,     1,     2,     2,     1,
     2,     2,     2,     2,     0,     0,     9,     0,     4,     1,
     0,     4,     0,     5,     0,     4,     1,     1,     1,     3,
     2,     1,     1,     0,     5,     0,     0,     9,     1,     2,
     2,     3,     1,     1,     2,     0,     5,     0,     4,     4,
     6,     1,     3,     1,     1,     4,     1,     1,     2,     0,
     4,     0,     4,     2,     0,     4,     0,     4,     0,     4,
     0,     4,     0,     4,     0,     4,     1,     0,     4,     0,
     4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     3,     3,     0,     4,     1,     1,
     2,     0,     0,     6,     2,     1,     1,     0,     0,     6,
     1,     0,     3,     1,     0,     4,     3,     2,     2,     0,
     6,     2,     1,     0,     3,     2,     0,     4,     0,     3,
     0,     3,     0,     0,     6,     0,     3,     1,     0,     4,
     0,     0,     7,     0,     0,     0,     7,     1,     0,     3,
     1
};

static const short yydefact[] = {     0,
     0,     9,     0,     1,     5,     0,     0,     0,    11,     2,
     0,     0,     0,    10,     0,     7,    76,     4,     0,    77,
     0,     0,    45,     0,     0,     0,    19,    21,    23,    27,
    25,    26,    30,    37,    38,    40,    39,    24,    71,     0,
    14,     0,    13,    12,     6,     0,     0,    42,    47,     0,
     0,     0,     3,    22,    31,    72,    80,     0,    78,    79,
     0,   181,   193,     0,   197,     0,     0,   100,     0,   199,
   180,   172,   173,   174,   175,   177,   178,   176,   179,     0,
     0,     0,     0,     0,   202,     0,    96,     0,     0,   183,
   110,     0,     0,    97,   123,   122,   150,   148,   167,   182,
   185,   187,   186,   190,   189,   188,   192,   191,   138,   129,
     0,    29,     0,     0,   133,     0,   134,     0,     0,     0,
    41,    33,    32,     0,     0,    75,    73,   147,    15,     0,
   193,   183,   150,   182,     0,   154,   149,   222,     0,   121,
   150,   212,   208,   236,   233,   227,     0,     8,    98,    99,
   102,   101,   103,   111,   113,   104,   124,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   131,    28,     0,   130,     0,   135,     0,     0,
    43,    51,    53,    55,    56,    58,    48,    46,     0,     0,
    81,    17,    86,     0,    84,     0,     0,     0,     0,   184,
   200,     0,   220,   126,     0,     0,     0,     0,     0,   207,
     0,   194,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   195,   196,     0,     0,
     0,   132,   136,   222,     0,     0,     0,     0,     0,     0,
     0,    34,    36,     0,     0,    83,     0,     0,    95,    88,
    93,    74,     0,     0,   198,   201,     0,     0,     0,   213,
   214,   209,     0,   237,   238,   234,   228,   229,   203,   112,
     0,     0,   119,   118,   116,     0,   151,   153,   156,   158,
   160,   162,   164,   166,   169,   171,   109,   139,     0,   140,
     0,   220,    60,    44,    52,    54,    57,    49,     0,    18,
    85,    87,     0,     0,     0,   224,     0,     0,   222,     0,
     0,     0,   241,     0,     0,     0,     0,     0,     0,   114,
   125,   144,     0,   142,   145,     0,   137,     0,     0,    91,
    94,    16,     0,     0,   221,   127,   217,     0,   210,     0,
     0,   235,   230,   232,   206,     0,   204,   120,     0,   141,
     0,     0,     0,    67,    61,     0,   106,   225,     0,   216,
     0,   240,   205,   143,     0,    70,    66,     0,     0,    92,
     0,     0,   242,   146,    69,    62,   107,   128,     0,     0,
   243,    63,     0,    64,     0,     0
};

static const short yydefgoto[] = {     3,
     4,     5,    46,     6,     7,     8,    15,    14,    43,   198,
   193,    26,    27,    28,    29,    30,    31,    32,   123,   189,
   190,    33,    34,    35,   118,   237,    36,    50,    37,   119,
   241,   181,   238,   182,   239,   240,   183,   184,   329,   369,
   380,   383,   185,   328,   353,   368,   354,    38,    39,   197,
    40,    58,    59,   124,    60,   125,   194,   195,   196,   244,
   356,   250,   251,   186,    87,    88,   130,   371,    89,   170,
   132,   213,    91,   214,   215,    92,   275,   272,    93,    94,
    95,   216,    96,   258,   359,   113,   114,   115,   291,   116,
   171,   117,   323,   324,   325,   129,    97,   158,   159,   160,
   161,   162,   163,   164,   165,    98,   166,   167,    99,   134,
   101,   135,   102,   202,   103,   147,   318,   347,   211,   104,
   206,   312,   143,   205,   260,   311,   105,   257,   307,   334,
   106,   107,   209,   267,   316,   317,   108,   208,   315,   145,
   207,   264,   314,   265,   340,   379
};

static const short yypact[] = {   -37,
    45,-32768,    32,-32768,-32768,    64,    86,    74,-32768,-32768,
   112,    60,    31,-32768,    96,    66,-32768,-32768,   135,-32768,
   168,   169,-32768,   175,   181,   137,-32768,    71,-32768,-32768,
-32768,-32768,   -19,-32768,-32768,-32768,-32768,    14,-32768,   202,
-32768,   159,-32768,-32768,-32768,   501,    17,-32768,-32768,   184,
   180,   214,-32768,-32768,-32768,-32768,   215,    19,-32768,-32768,
   185,-32768,   194,   668,-32768,   682,   682,-32768,    25,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   668,
   668,   151,   155,   218,-32768,   201,-32768,   199,   203,   141,
-32768,   228,   221,-32768,-32768,-32768,   182,   148,   222,    65,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   238,-32768,    21,   224,-32768,    91,-32768,   265,   265,   252,
-32768,   253,-32768,   256,   254,-32768,   501,-32768,-32768,   239,
-32768,   243,   117,    12,   668,   148,   148,-32768,   267,   360,
   233,-32768,-32768,-32768,-32768,-32768,   272,-32768,-32768,-32768,
-32768,-32768,-32768,   273,   277,-32768,-32768,   258,   260,   261,
   270,   279,   275,   278,   281,   269,   282,   294,   306,   305,
   302,   185,-32768,-32768,   287,-32768,   229,-32768,   174,   315,
-32768,   250,-32768,-32768,-32768,   501,-32768,-32768,   291,   214,
-32768,    83,   312,    89,   295,   324,   262,   317,   320,-32768,
   360,   558,-32768,-32768,   301,   266,   333,   268,   263,-32768,
   335,-32768,   682,   668,   341,   501,   682,   682,   682,   682,
   682,   682,   682,   682,   682,   682,-32768,-32768,   668,   314,
   126,-32768,-32768,   319,   347,   668,   284,   265,   321,   325,
   286,-32768,-32768,   344,   356,-32768,   254,   254,-32768,   367,
-32768,-32768,   254,   316,-32768,   360,   668,   501,   176,-32768,
   -38,-32768,   368,-32768,   292,-32768,-32768,   300,-32768,   351,
   222,   100,   360,-32768,-32768,   327,   148,   148,   148,   148,
   148,   148,   148,   148,   222,   222,   360,-32768,   737,-32768,
   370,   357,   360,-32768,-32768,-32768,-32768,-32768,   388,-32768,
   312,   312,   324,   152,   390,   136,   387,   385,-32768,   301,
   307,   301,-32768,   308,   333,   392,   263,   613,   668,-32768,
-32768,    81,   153,-32768,-32768,   369,-32768,   371,   318,-32768,
-32768,-32768,   399,   668,-32768,-32768,-32768,   301,-32768,   326,
   333,-32768,-32768,-32768,-32768,   113,-32768,   360,   737,-32768,
    62,   405,   407,   377,-32768,   400,-32768,-32768,   501,-32768,
   413,-32768,-32768,-32768,   682,-32768,-32768,   371,   668,-32768,
   424,   443,-32768,   222,-32768,   360,-32768,-32768,   425,   426,
-32768,-32768,   402,-32768,   435,-32768
};

static const short yypgoto[] = {-32768,
   433,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -91,-32768,   409,-32768,-32768,-32768,   406,-32768,   248,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -113,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    72,-32768,-32768,-32768,   403,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   139,   -45,   -83,-32768,-32768,-32768,-32768,-32768,
   -46,-32768,   230,-32768,-32768,-32768,   173,   128,-32768,   -81,
-32768,-32768,-32768,-32768,-32768,-32768,   337,-32768,-32768,-32768,
-32768,-32768,-32768,   102,-32768,   280,   -53,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   -33,-32768,-32768,  -205,   -44,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -295,-32768,  -201,-32768,   120,-32768,
-32768,-32768,-32768,   138,-32768,-32768,  -202,-32768,-32768,-32768,
-32768,  -306,-32768,-32768,-32768,-32768
};


#define	YYLAST		826


static const short yytable[] = {    90,
    86,   100,   149,   261,   150,   187,   268,   271,   342,     1,
   133,    90,   127,   100,   337,     2,   339,  -117,    17,   285,
   286,   109,    62,    63,    64,   109,   140,   141,    65,   138,
   139,   385,   136,   137,   362,    41,    21,    22,    23,    90,
    66,   100,   360,   149,   169,   150,    67,   310,   110,     9,
    68,  -215,   173,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    17,    20,   227,    24,    18,    11,
  -117,    90,    90,   100,   100,    17,  -108,    80,     1,    42,
    90,   201,   100,   326,     2,   111,  -193,   -89,   112,   111,
   126,    81,   174,    12,   365,   246,    82,   169,   -90,    83,
    84,   247,   149,   177,   150,   178,   274,    85,   261,    19,
   261,    20,   319,  -193,   268,    21,    22,    23,    16,   363,
    19,    13,    20,   200,   295,   319,    21,    22,    23,    44,
  -165,  -159,  -157,  -161,  -163,  -155,   261,    45,   289,    90,
   290,   100,  -223,   326,  -152,    53,    24,    25,   256,  -165,
  -159,  -157,  -161,  -163,  -155,   301,   302,    24,    25,   374,
   273,   304,  -150,  -152,   245,   349,   332,   350,    47,    90,
   276,   100,   153,   154,    61,   287,  -168,  -170,   234,   235,
   309,   139,   293,   277,   278,   279,   280,   281,   282,   283,
   284,    90,   149,   100,   150,  -165,  -159,  -157,  -161,  -163,
  -155,    48,    49,   306,    62,    63,    64,    57,    51,  -152,
    65,    90,   308,   100,    52,   121,   157,   120,   122,   -82,
   128,  -105,    66,   142,   149,   146,   150,   144,    67,    90,
   151,   100,    68,   155,   152,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,  -165,  -159,  -157,  -161,
  -163,  -155,   156,   172,   168,   176,   188,   -35,   192,    80,
  -152,    90,   191,   100,   273,   348,   199,   204,    62,    63,
    64,   203,   148,    81,    65,   154,   210,   212,    82,   219,
   306,    83,    84,  -115,   217,   220,    66,   218,   149,    85,
   150,   222,    67,   221,   224,   223,    68,   225,   227,   179,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
   228,   226,    90,   372,   100,   376,   229,   230,   232,   233,
   236,   -50,   242,    80,   245,    90,   248,   100,   249,   253,
    62,    63,    64,   252,   254,   259,    65,    81,   263,   262,
   269,   266,    82,    83,   180,    83,    84,   274,    66,   288,
   -59,   292,   296,    85,    67,   294,   297,   298,    68,   299,
   300,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,   313,  -165,  -159,  -157,  -161,  -163,  -155,   303,
  -231,  -239,   305,  -110,   327,    80,  -150,  -152,    62,    63,
    64,   -65,   330,   335,    65,   333,   338,   341,   321,    81,
   343,   351,   355,   357,    82,   352,    66,    83,    84,   366,
   361,   -68,    67,   367,   370,    85,    68,   373,   336,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
   377,   381,   382,   384,   386,    10,    54,   243,    55,   375,
    56,   331,   270,    80,   320,   346,    62,    63,    64,   175,
   364,   231,    65,   358,   344,     0,     0,    81,     0,     0,
     0,     0,    82,     0,    66,    83,    84,     0,     0,     0,
    67,     0,     0,    85,    68,     0,     0,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    80,     0,     0,    62,    63,    64,     0,     0,     0,
    65,     0,     0,     0,   378,    81,     0,     0,     0,     0,
    82,     0,    66,    83,    84,     0,     0,     0,    67,     0,
     0,    85,    68,     0,     0,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
     0,    62,   131,    64,     0,     0,     0,    65,   255,     0,
     0,     0,     0,    81,     0,     0,     0,     0,    82,    66,
     0,    83,    84,     0,     0,    67,     0,     0,     0,    85,
     0,     0,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    62,   131,    64,   345,
     0,     0,    65,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    66,    82,     0,     0,    83,    84,
    67,     0,     0,     0,     0,     0,    85,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    62,   131,    64,     0,     0,     0,    65,     0,     0,
     0,     0,     0,     0,     0,    62,   131,    64,     0,    66,
    82,    65,     0,    83,    84,    67,     0,     0,     0,     0,
     0,    85,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,     0,     0,     0,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    62,   322,    64,     0,     0,    82,    65,     0,    83,    84,
     0,     0,     0,     0,     0,     0,    85,     0,     0,    82,
     0,     0,    83,    84,     0,     0,     0,     0,     0,     0,
    85,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    82,     0,     0,    83,    84,     0,
     0,     0,     0,     0,     0,    85
};

static const short yycheck[] = {    46,
    46,    46,    86,   205,    86,   119,   209,   213,   315,    47,
    64,    58,    58,    58,   310,    53,   312,     6,     5,   225,
   226,     5,     4,     5,     6,     5,    80,    81,    10,     5,
     6,     0,    66,    67,   341,     5,    56,    57,    58,    86,
    22,    86,   338,   127,    33,   127,    28,    86,    32,     5,
    32,    90,    32,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,     5,    52,     5,    87,     9,     6,
     6,   118,   119,   118,   119,     5,    12,    59,    47,    49,
   127,   135,   127,   289,    53,    69,     6,     5,    72,    69,
    72,    73,    72,     8,    33,     7,    78,    33,    16,    81,
    82,    13,   186,    13,   186,    15,     7,    89,   310,    50,
   312,    52,    13,    33,   317,    56,    57,    58,     7,     7,
    50,    48,    52,     7,   238,    13,    56,    57,    58,    34,
    14,    15,    16,    17,    18,    19,   338,    72,    13,   186,
    15,   186,     7,   349,    28,     9,    87,    88,   202,    14,
    15,    16,    17,    18,    19,   247,   248,    87,    88,   365,
   214,   253,    27,    28,    13,    13,    15,    15,    34,   216,
   216,   216,    32,    33,    16,   229,    29,    30,     5,     6,
     5,     6,   236,   217,   218,   219,   220,   221,   222,   223,
   224,   238,   276,   238,   276,    14,    15,    16,    17,    18,
    19,    34,    34,   257,     4,     5,     6,     6,    34,    28,
    10,   258,   258,   258,    34,    36,    35,    34,     5,     5,
    36,    28,    22,    73,   308,     8,   308,    73,    28,   276,
    32,   276,    32,     6,    32,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    14,    15,    16,    17,
    18,    19,    32,    16,    33,    32,     5,     5,     5,    59,
    28,   308,     7,   308,   318,   319,    28,    35,     4,     5,
     6,     5,    72,    73,    10,    33,     5,     5,    78,    19,
   334,    81,    82,     7,    27,    16,    22,    28,   372,    89,
   372,    17,    28,    15,    14,    18,    32,    29,     5,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
     5,    30,   359,   359,   359,   369,    12,    16,    32,    91,
     6,    72,    32,    59,    13,   372,    32,   372,     5,    13,
     4,     5,     6,    72,    15,    35,    10,    73,     6,    74,
     6,    74,    78,    81,    80,    81,    82,     7,    22,    36,
    32,     5,    32,    89,    28,    72,    32,    72,    32,    16,
     5,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,     5,    14,    15,    16,    17,    18,    19,    13,
    81,    90,    67,    33,    15,    59,    27,    28,     4,     5,
     6,    35,     5,     7,    10,     6,    90,    90,    72,    73,
     9,    33,    85,     5,    78,    35,    22,    81,    82,     5,
    85,    35,    28,     7,    15,    89,    32,     5,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
     7,     7,     7,    32,     0,     3,    28,   190,    33,   368,
    38,   303,   213,    59,   272,   318,     4,     5,     6,   113,
   349,   172,    10,   334,   317,    -1,    -1,    73,    -1,    -1,
    -1,    -1,    78,    -1,    22,    81,    82,    -1,    -1,    -1,
    28,    -1,    -1,    89,    32,    -1,    -1,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    -1,     4,     5,     6,    -1,    -1,    -1,
    10,    -1,    -1,    -1,    72,    73,    -1,    -1,    -1,    -1,
    78,    -1,    22,    81,    82,    -1,    -1,    -1,    28,    -1,
    -1,    89,    32,    -1,    -1,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
    -1,     4,     5,     6,    -1,    -1,    -1,    10,    11,    -1,
    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    78,    22,
    -1,    81,    82,    -1,    -1,    28,    -1,    -1,    -1,    89,
    -1,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,     6,     7,
    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    22,    78,    -1,    -1,    81,    82,
    28,    -1,    -1,    -1,    -1,    -1,    89,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     4,     5,     6,    -1,    -1,    -1,    10,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     4,     5,     6,    -1,    22,
    78,    10,    -1,    81,    82,    28,    -1,    -1,    -1,    -1,
    -1,    89,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    -1,    -1,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     4,     5,     6,    -1,    -1,    78,    10,    -1,    81,    82,
    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,    78,
    -1,    -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,
    89,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    78,    -1,    -1,    81,    82,    -1,
    -1,    -1,    -1,    -1,    -1,    89
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
CCompilateur::yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 52 "grammar.yacc"
{
								
							;
    break;}
case 3:
#line 62 "grammar.yacc"
{						
								if(!computContraint()) return false;
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 4:
#line 69 "grammar.yacc"
{
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 7:
#line 81 "grammar.yacc"
{
								initMessageManager();
							;
    break;}
case 8:
#line 86 "grammar.yacc"
{
								if(!endMessageManager()) return 0;
							;
    break;}
case 9:
#line 92 "grammar.yacc"
{
								if(_ResultCompile != NULL) 
								{
									yyerror("an MessageManager block had all ready declared");
									return 0;
								}								
							;
    break;}
case 11:
#line 105 "grammar.yacc"
{
								NLAIAGENT::CStringVarName interfName(LastyyText[1]);																																
								try
								{	
									NLAIC::CIdentType id = getTypeOfClass(interfName);
									_SelfClass.push((IClassInterpret *)(((CClassInterpretFactory *)id.getFactory())->getClass()->newInstance()));
									((IClassInterpret *)_SelfClass.get())->setInheritanceName(interfName);
								}
								catch(NLAIE::IException &a)
								{									
									yyerror((char *)a.what());
									return 0;
								}
							;
    break;}
case 14:
#line 124 "grammar.yacc"
{
								try
								{
									NLAIC::CIdentType id(LastyyText[1]);
									char text[1024*4];
									sprintf(text,"class '%s' all ready exist",LastyyText[1]);
									yyerror(text);
									return 0;
								}
								catch(NLAIE::IException &)
								{
									( (IClassInterpret *) _SelfClass.get() )->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
									( (IClassInterpret *) _SelfClass.get() )->buildVTable();
									RegisterClass();
								}
							;
    break;}
case 15:
#line 143 "grammar.yacc"
{
								((IClassInterpret *)_SelfClass.get())->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
							;
    break;}
case 25:
#line 162 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->buildLogicTables();
								}
							;
    break;}
case 33:
#line 188 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[1] ) );
							;
    break;}
case 35:
#line 198 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[0] ) );
							;
    break;}
case 41:
#line 219 "grammar.yacc"
{
								char *txt1 = LastyyText[0];
								char *txt2 = LastyyText[1];
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setComment( LastyyText[1] );
								}


							;
    break;}
case 42:
#line 234 "grammar.yacc"
{
								initParam()
							;
    break;}
case 43:
#line 238 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderCond( _LastAsserts.front(), _LastLogicParams.front() );
										_LastAsserts.pop_front();
										_LastLogicParams.pop_front();
									}

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
							;
    break;}
case 45:
#line 262 "grammar.yacc"
{
								if ( !classIsAnOperator() )
								 	return 0;
							;
    break;}
case 46:
#line 268 "grammar.yacc"
{
								if ( _Goal ) 
								{
									_Goal->release();
									_Goal = NULL;
								}
								
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									NLAIAGENT::CStringVarName goal_name( LastyyText[1] );
									op_class->setGoal( (NLAIAGENT::CStringVarName &) goal_name );
								}
							;
    break;}
case 47:
#line 288 "grammar.yacc"
{
								initParam()
							;
    break;}
case 48:
#line 292 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderConc( _LastAsserts.front(), _LastLogicParams.front() );
										_LastAsserts.pop_front();
										_LastLogicParams.pop_front();
									}

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeConc( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
							;
    break;}
case 50:
#line 316 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 51:
#line 320 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 52:
#line 324 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 53:
#line 331 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 55:
#line 336 "grammar.yacc"
{

								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->addFuzzyCond(NLAIAGENT::CStringVarName("MaVar"), (NLAILOGIC::CBoolType *) NULL);
								}
							;
    break;}
case 56:
#line 345 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 58:
#line 350 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
//										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_LastCodeBranche.push_back( (IOpCode *) listCode );
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}							

/*								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}				
*/				

							;
    break;}
case 59:
#line 411 "grammar.yacc"
{
							char *param_name = LastyyText[1];
							_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
						;
    break;}
case 60:
#line 420 "grammar.yacc"
{
								
							;
    break;}
case 61:
#line 424 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 62:
#line 428 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 63:
#line 432 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 64:
#line 436 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 65:
#line 444 "grammar.yacc"
{
							const char *assert_name = LastyyText[1];
							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );
						;
    break;}
case 66:
#line 450 "grammar.yacc"
{
								for (int i = 0; i < 20; i++); // To put breakpoints for debugging...
						;
    break;}
case 67:
#line 457 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 68:
#line 461 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 70:
#line 468 "grammar.yacc"
{
							char *var_name = LastyyText[1];
							_LastLogicParams.back().push_back( new NLAIAGENT::CStringVarName( var_name ) );
						;
    break;}
case 73:
#line 481 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}

								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}								
								if(!caseRunMsg()) return false;
							;
    break;}
case 75:
#line 540 "grammar.yacc"
{	
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}
								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}
								if(!caseRunMsg()) return false;

							;
    break;}
case 76:
#line 600 "grammar.yacc"
{				
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 77:
#line 608 "grammar.yacc"
{
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 80:
#line 622 "grammar.yacc"
{								
								initParam();
							;
    break;}
case 81:
#line 626 "grammar.yacc"
{
								if(!registerMethod()) return false;
							;
    break;}
case 82:
#line 632 "grammar.yacc"
{
								initParam();
							;
    break;}
case 83:
#line 636 "grammar.yacc"
{
								registerMethod();
							;
    break;}
case 89:
#line 654 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[0]);
								_BaseObjectDef = false;
							;
    break;}
case 90:
#line 659 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 91:
#line 664 "grammar.yacc"
{
								_LastBaseObjectDef = NLAIAGENT::CStringVarName(LastyyText[1]);
								_BaseObjectDef = true;

							;
    break;}
case 95:
#line 678 "grammar.yacc"
{
								if(!setParamVarName()) return 0;
							;
    break;}
case 103:
#line 694 "grammar.yacc"
{
								_LastStringParam.back()->release();
								_LastStringParam.pop_back();
								_Param.back()->release();
								_Param.pop_back();								
							;
    break;}
case 104:
#line 702 "grammar.yacc"
{
								_LastBloc->addCode((new CHaltOpCode));
							;
    break;}
case 105:
#line 708 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 106:
#line 716 "grammar.yacc"
{					
								NLAIAGENT::CStringVarName x(LastyyText[1]);			
								if(!castVariable(_LastString,x)) return false;
							;
    break;}
case 108:
#line 723 "grammar.yacc"
{								
								std::list<NLAISCRIPT::CStringType>::iterator i = _LasVarStr.begin();
								_LasAffectationVarStr.clear();
								while(i != _LasVarStr.end())
								{
									_LasAffectationVarStr.push_back(*i++);
								}												
							;
    break;}
case 109:
#line 733 "grammar.yacc"
{
								if(!affectation()) 
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 111:
#line 746 "grammar.yacc"
{
								
							;
    break;}
case 113:
#line 754 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 115:
#line 762 "grammar.yacc"
{								
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 117:
#line 772 "grammar.yacc"
{
								nameMethodeProcessing();
							;
    break;}
case 118:
#line 779 "grammar.yacc"
{	
								_ExpressionType = _ExpressionTypeTmp.back();
								_ExpressionTypeTmp.pop_back();								
								if(!callFunction())
								{
									_FromStack.pop_back();
									return 0;	
								}
								_FromStack.pop_back();
							;
    break;}
case 119:
#line 792 "grammar.yacc"
{
								pushParamExpression();								
							;
    break;}
case 120:
#line 797 "grammar.yacc"
{
								pushParamExpression();
							;
    break;}
case 121:
#line 804 "grammar.yacc"
{
								if(!typeOfMethod()) return false;
							;
    break;}
case 124:
#line 815 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 125:
#line 820 "grammar.yacc"
{
								interrogationEnd();
							;
    break;}
case 126:
#line 828 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 127:
#line 833 "grammar.yacc"
{								
								ifInterrogationPoint()
							;
    break;}
case 128:
#line 838 "grammar.yacc"
{
								ifInterrogationEnd();
							;
    break;}
case 136:
#line 856 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Local = true;								
							;
    break;}
case 138:
#line 864 "grammar.yacc"
{								
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
								_LastRegistered = ((IClassInterpret *)_SelfClass.get())->registerComponent(_LastString);
							;
    break;}
case 139:
#line 870 "grammar.yacc"
{
								if(((IClassInterpret *)_SelfClass.get())->getComponent(NLAIAGENT::CStringVarName(LastyyText[1])) == NULL)
								{
									CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);
									c->ObjectName = new NLAIAGENT::CStringVarName(LastyyText[1]);									
								}
								else
								{
									yyerror("variable all ready declared in the Register components");
									return 0;			
								}
							;
    break;}
case 148:
#line 902 "grammar.yacc"
{	
								if(_FacteurEval)
								{								
									allocExpression(NULL);
									setTypeExpression();
								}
							;
    break;}
case 149:
#line 910 "grammar.yacc"
{								
								allocExpression(new CNegOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opAdd,"(-)");
								
							;
    break;}
case 150:
#line 916 "grammar.yacc"
{	
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opAdd))
								{
									yyerror("erreur sémantique l'operateur + n'est pas supporté par cette expression");
									return 0;
								}*/								
								setTypeExpressionG();
								allocExpression(NULL);
								
								
							;
    break;}
case 151:
#line 928 "grammar.yacc"
{									
								allocExpression(new CAddOpCode,true);		
								setTypeExpressionD(NLAIC::CTypeOfOperator::opAdd,"+");	
							;
    break;}
case 152:
#line 933 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSub))
								{
									yyerror("erreur sémantique l'operateur - n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);
								
							;
    break;}
case 153:
#line 944 "grammar.yacc"
{								
								allocExpression(new CSubOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSub,"-");							
							;
    break;}
case 154:
#line 949 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opNot))
								{
									yyerror("erreur sémantique l'operateur ! n'est pas supporté par cette expression");
									return 0;
								}*/								
								allocExpression(new CNotOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opNot,"!");
								
							;
    break;}
case 155:
#line 960 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiff))
								{
									yyerror("erreur sémantique l'operateur != n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 156:
#line 970 "grammar.yacc"
{								
								allocExpression(new CDiffOpCode,true);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiff,"!=");
								
							;
    break;}
case 157:
#line 976 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInf))
								{
									yyerror("erreur sémantique l'operateur < n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
								
							;
    break;}
case 158:
#line 987 "grammar.yacc"
{								
								allocExpression(new CInfOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInf,"<");							
							;
    break;}
case 159:
#line 992 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSup))
								{
									yyerror("erreur sémantique l'operateur > n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);								
							;
    break;}
case 160:
#line 1002 "grammar.yacc"
{								
								allocExpression(new CSupOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSup,">");							
							;
    break;}
case 161:
#line 1007 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSupEq))
								{
									yyerror("erreur sémantique l'operateur >= n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
							;
    break;}
case 162:
#line 1017 "grammar.yacc"
{								
								allocExpression(new CSupEqOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSupEq,">=");
							;
    break;}
case 163:
#line 1022 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInfEq))
								{
									yyerror("erreur sémantique l'operateur <= n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 164:
#line 1032 "grammar.yacc"
{								
								allocExpression(new CInfEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInfEq,"<=");
							;
    break;}
case 165:
#line 1037 "grammar.yacc"
{
								setTypeExpressionG();	
								allocExpression(NULL);														
							;
    break;}
case 166:
#line 1042 "grammar.yacc"
{								
								allocExpression(new CEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opEq,"==");

							;
    break;}
case 167:
#line 1050 "grammar.yacc"
{
								_FacteurEval = true;	
							;
    break;}
case 168:
#line 1054 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opMul))
								{
									yyerror("erreur sémantique l'operateur * n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();								
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 169:
#line 1065 "grammar.yacc"
{									
								setTypeExpressionD(NLAIC::CTypeOfOperator::opMul,"+");
								allocExpression(new CMulOpCode,false);
								_FacteurEval = false;
							;
    break;}
case 170:
#line 1071 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiv))
								{
									yyerror("erreur sémantique l'operateur / n'est pas supporté par cette expression");
									return 0;
								}*/
											
								setTypeExpressionG();
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 171:
#line 1083 "grammar.yacc"
{																
								allocExpression(new CDivOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiv,"/");
								_FacteurEval = false;	
							;
    break;}
case 172:
#line 1092 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PExec);
							;
    break;}
case 173:
#line 1097 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAchieve);
							;
    break;}
case 174:
#line 1102 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAsk);
							;
    break;}
case 175:
#line 1107 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PBreak);
							;
    break;}
case 176:
#line 1112 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PError);
							;
    break;}
case 177:
#line 1117 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PTell);
							;
    break;}
case 178:
#line 1122 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PKill);
							;
    break;}
case 179:
#line 1127 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PEven);
							;
    break;}
case 180:
#line 1132 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVarNill();
							;
    break;}
case 181:
#line 1138 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVar();
							;
    break;}
case 182:
#line 1143 "grammar.yacc"
{								
								_IsFacteurIsExpression = false;
								if(!processingVar())
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 183:
#line 1153 "grammar.yacc"
{								
								_IsFacteurIsExpression = true;								
								setMethodVar();
							;
    break;}
case 184:
#line 1158 "grammar.yacc"
{							
								_IsFacteurIsExpression = true;
							;
    break;}
case 185:
#line 1162 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 186:
#line 1166 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 187:
#line 1170 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 188:
#line 1174 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 189:
#line 1178 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 190:
#line 1182 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 191:
#line 1186 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 192:
#line 1190 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 193:
#line 1197 "grammar.yacc"
{
								_LasVarStr.clear();
								_LasVarStr.push_back(NLAISCRIPT::CStringType(LastyyText[1]));
								_LastFact.VarType = varTypeUndef;
								_IsFacteurIsExpression = false;	
								_FromStack.push_back(false);							
							;
    break;}
case 194:
#line 1206 "grammar.yacc"
{
								_LasVarStr.clear();
								cleanTypeList();
								_LasVarStr.push_back(LastyyText[1]);
								setMethodVar();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);

							;
    break;}
case 195:
#line 1218 "grammar.yacc"
{	
								cleanTypeList();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);
							;
    break;}
case 196:
#line 1227 "grammar.yacc"
{									
								if(_IsFacteurIsExpression)
								{
									IOpType *c = _TypeList.back();
									_TypeList.pop_back();
									c->release();
									_TypeList.push_back(_FlotingExpressionType);
									_FlotingExpressionType->incRef();
									_LasVarStr.clear();
									_FromStack.pop_back();
								}
								_LasVarStr.push_back(LastyyText[1]);
							;
    break;}
case 197:
#line 1244 "grammar.yacc"
{									
								setListVar();
							;
    break;}
case 199:
#line 1252 "grammar.yacc"
{									
								setChaineVar();
							;
    break;}
case 200:
#line 1258 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));								
							;
    break;}
case 201:
#line 1262 "grammar.yacc"
{								
								_LastBloc->addCode((new CAddOpCode));
							;
    break;}
case 202:
#line 1268 "grammar.yacc"
{
								_LastStringParam.push_back(new NLAIAGENT::CGroupType());								

							;
    break;}
case 203:
#line 1273 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
							;
    break;}
case 205:
#line 1279 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 206:
#line 1283 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 207:
#line 1290 "grammar.yacc"
{							
								_LastStringParam.back()->cpy(NLAIAGENT::CStringType(NLAIAGENT::CStringVarName(LastyyText[1])));
								_Param.push_back(new CParam);								
							;
    break;}
case 208:
#line 1297 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );				
						;
    break;}
case 209:
#line 1302 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 210:
#line 1306 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
//							_LastBloc->addCode( new CLdbNewOpCode(CRule()) );		
							setStackVar( CVar::IdVar );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tUndef);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::Rule::idRule;
						;
    break;}
case 212:
#line 1321 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 213:
#line 1325 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbNewOpCode( CClause() ) );
							//_LastBloc->addCode( new CAddOpCode() );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::CClause::idCClause;
						;
    break;}
case 214:
#line 1337 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 215:
#line 1341 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 216:
#line 1345 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );							
						;
    break;}
case 217:
#line 1350 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );													
						;
    break;}
case 218:
#line 1356 "grammar.yacc"
{
							_LastBloc->addCode( new CTellOpCode() );
						;
    break;}
case 219:
#line 1362 "grammar.yacc"
{
							/*char buf[256];
							strcpy(buf, LastyyText[1]);
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CBoolType( NLAIAGENT::CStringVarName(LastyyText[1]) ) ) );
							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
							_LastFact.varType = varForFunc;
							_LastFact.isUsed = false;
							_lastIdentType = NLAIAGENT::CVar::idBoolType;
							*/
						;
    break;}
case 220:
#line 1375 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
							char *txt = LastyyText[1];
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode(new CAddOpCode() );
							//_LastAssert = NLAIAGENT::CStringVarName(LastyyText[1]);
						;
    break;}
case 221:
#line 1383 "grammar.yacc"
{
/*							setStackVar( CFactPattern::IdFactPattern );
							IBaseAssert *my_assert = _FactBase->addAssert( _LastAssert, _NbLogicParams );
							_NbLogicParams = 0;
							_LastBloc->addCode(new CLdbNewOpCode( CFactPattern( my_assert ) ) );
							*/
						;
    break;}
case 222:
#line 1393 "grammar.yacc"
{
						;
    break;}
case 223:
#line 1400 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 224:
#line 1406 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 226:
#line 1415 "grammar.yacc"
{
							char buf[256];
							strcpy(buf, LastyyText[1]);
							setStackVar( CVar::IdVar );
							_LastBloc->addCode( new CLdbOpCode(CVar( LastyyText[1] )) );
						;
    break;}
case 227:
#line 1425 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
						;
    break;}
case 229:
#line 1432 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 230:
#line 1436 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 231:
#line 1440 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 232:
#line 1444 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 233:
#line 1450 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );
						;
    break;}
case 234:
#line 1455 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 235:
#line 1459 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyRule() ) );		
							setStackVar(CFuzzyRule::IdFuzzyRule);
						;
    break;}
case 236:
#line 1467 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 237:
#line 1471 "grammar.yacc"
{
							
						;
    break;}
case 238:
#line 1477 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 239:
#line 1481 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 241:
#line 1488 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							// Composant?
							char *txt = LastyyText[0];
/*							_lastFVarIndex = ((IClassInterpret *)_selfClass.get())->getComponentIndex(NLAIAGENT::CStringVarName(LastyyText[1]));
							if (_lastFVarIndex != -1 )
							{
								_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CDigitalType(_lastFVarIndex) ) );
								_LastBloc->addCode( new CAddOpCode() );
							}
							else
							{
								// Variable locale?
							}
							*/

						;
    break;}
case 242:
#line 1506 "grammar.yacc"
{
							_LastString = NLAIAGENT::CStringVarName( LastyyText[0] );
						;
    break;}
case 243:
#line 1510 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++ );
							_LastBloc->addCode(new CLdbNewOpCode( CSimpleFuzzyCond(NULL, NULL) ) );
						;
    break;}
case 244:
#line 1517 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 245:
#line 1521 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 246:
#line 1526 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 247:
#line 1530 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyVar(NLAIAGENT::CStringVarName("Inst"),0,1) ) );
						;
    break;}
case 248:
#line 1537 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 249:
#line 1541 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 251:
#line 1548 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1552 "grammar.yacc"

 