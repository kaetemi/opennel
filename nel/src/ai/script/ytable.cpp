
/*  A Bison parser, made from grammar.yacc
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FIN	258
#define	NOMBRE	259
#define	IDENT	260
#define	PAR_G	261
#define	PAR_D	262
#define	ACCOL_G	263
#define	ACCOL_D	264
#define	CROCHER_G	265
#define	CROCHER_D	266
#define	EG_MATH	267
#define	VIRGULE	268
#define	EG_LOG	269
#define	SUP	270
#define	INF	271
#define	SUP_EG	272
#define	INF_EG	273
#define	DIFF	274
#define	OR_LOG	275
#define	AND_LOG	276
#define	NON_BIN	277
#define	OR_BIN	278
#define	AND_BIN	279
#define	XOR_BIN	280
#define	SCOP	281
#define	PLUS	282
#define	MOINS	283
#define	FOIS	284
#define	DIV	285
#define	POWER	286
#define	POINT_VI	287
#define	LEPOINT	288
#define	POINT_DEUX	289
#define	INTERROGATION	290
#define	CHAINE	291
#define	NILL	292
#define	EXEC	293
#define	ACHIEVE	294
#define	ASK	295
#define	BREAK	296
#define	TELL	297
#define	KILL	298
#define	PERROR	299
#define	EVEN	300
#define	BEGIN_GRAMMAR	301
#define	FROM	302
#define	DEFINE	303
#define	GROUP	304
#define	COMPONENT	305
#define	CONSTRUCTION	306
#define	DESTRUCTION	307
#define	MESSAGE_MANAGER	308
#define	MAESSAGELOOP	309
#define	TRIGGER	310
#define	PRECONDITION	311
#define	POSTCONDITION	312
#define	GOAL	313
#define	RETURN	314
#define	COS	315
#define	SIN	316
#define	TAN	317
#define	POW	318
#define	LN	319
#define	LOG	320
#define	FACT	321
#define	AS	322
#define	DIGITAL	323
#define	COLLECTOR	324
#define	WITH	325
#define	DO	326
#define	END	327
#define	IF	328
#define	THEN	329
#define	BEGINING	330
#define	END_GRAMMAR	331
#define	LOGICVAR	332
#define	RULE	333
#define	IA_ASSERT	334
#define	FUZZYRULE	335
#define	FUZZYRULESET	336
#define	SETS	337
#define	FUZZYVAR	338
#define	FIS	339
#define	OR	340
#define	COMMENT	341
#define	STEPS	342
#define	NEW	343
#define	AND	344
#define	LOCAL	345

#line 1 "grammar.yacc"

#include <malloc.h>
#include <list>
#define PARSER_NO_REDEF_YYTABLE_H_
#include "nel/ai/script/compilateur.h"
#include "nel/ai/script/constraint.h"
#include "nel/ai/script/type_def.h"
#include "nel/ai/script/object_unknown.h"
#include "nel/ai/logic/logic.h"
#include "nel/ai/fuzzy/fuzzy.h"
#include "nel/ai/logic/interpret_object_operator.h"
#include "nel/ai/script/interpret_fsm.h"

using  namespace NLAISCRIPT;
using  namespace NLAILOGIC;
using  namespace NLAIFUZZY;
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		374
#define	YYFLAG		-32768
#define	YYNTBASE	91

#define YYTRANSLATE(x) ((unsigned)(x) <= 345 ? yytranslate[x] : 233)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,    10,    14,    16,    21,    22,    29,    31,
    34,    35,    40,    43,    46,    47,    55,    57,    61,    63,
    65,    67,    70,    72,    74,    76,    78,    80,    85,    89,
    91,    94,    98,    99,   103,   104,   108,   110,   112,   114,
   116,   120,   121,   122,   129,   130,   135,   136,   137,   144,
   146,   147,   151,   152,   156,   157,   161,   163,   166,   167,
   174,   176,   177,   181,   184,   186,   189,   190,   196,   200,
   202,   204,   206,   208,   209,   213,   214,   219,   221,   225,
   227,   231,   234,   236,   237,   238,   245,   247,   251,   253,
   255,   257,   260,   263,   265,   268,   271,   274,   277,   278,
   279,   289,   290,   295,   297,   298,   303,   304,   310,   311,
   316,   318,   320,   322,   326,   329,   331,   333,   334,   340,
   341,   342,   352,   354,   357,   360,   364,   366,   368,   371,
   372,   378,   379,   384,   389,   396,   398,   402,   404,   406,
   411,   413,   415,   418,   419,   424,   425,   430,   433,   434,
   439,   440,   445,   446,   451,   452,   457,   458,   463,   464,
   469,   471,   472,   477,   478,   483,   485,   487,   489,   491,
   493,   495,   497,   499,   501,   503,   505,   507,   511,   513,
   515,   517,   519,   521,   523,   525,   527,   529,   533,   537,
   541,   542,   547,   549,   551,   554,   555,   556,   563,   566,
   568,   570,   571,   572,   579,   581,   582,   586,   588,   589,
   594,   598,   601,   604,   605,   612,   615,   617,   618,   622,
   625,   626,   631,   632,   636,   637,   641,   642,   643,   650,
   651,   655,   657,   658,   663,   664,   665,   673,   674,   675,
   676,   684,   686,   687,   691
};

static const short yyrhs[] = {    92,
     0,    91,    92,     0,    96,     8,   103,     9,     0,    96,
     8,     9,     0,    93,     0,    95,     6,     7,    72,     0,
     0,    95,     6,     7,    94,   150,    72,     0,    53,     0,
    97,    99,     0,     0,    47,     5,    98,    34,     0,    48,
   100,     0,    48,     5,     0,     0,    49,    16,   182,   101,
    13,   102,    15,     0,     5,     0,   102,    13,     5,     0,
   104,     0,   103,     0,   105,     0,   105,   104,     0,   106,
     0,   134,     0,   108,     0,   109,     0,   107,     0,    50,
    34,   172,    72,     0,    50,    34,    72,     0,   113,     0,
   113,   108,     0,    87,    34,   110,     0,     0,     5,   111,
    32,     0,     0,     5,   112,   110,     0,   114,     0,   115,
     0,   120,     0,   118,     0,    86,    34,    36,     0,     0,
     0,    56,    34,   116,   123,   117,    72,     0,     0,    58,
   119,    34,     5,     0,     0,     0,    57,    34,   121,   123,
   122,    72,     0,   125,     0,     0,   125,   124,   123,     0,
     0,   128,   126,    32,     0,     0,   129,   127,    32,     0,
   150,     0,    35,     5,     0,     0,    35,     6,     5,   130,
   131,     7,     0,   133,     0,     0,   133,   132,   131,     0,
    35,     5,     0,   135,     0,   134,   135,     0,     0,   137,
   138,   150,   136,    72,     0,   137,   138,    72,     0,     5,
     0,    52,     0,   139,     0,   141,     0,     0,     6,   140,
     7,     0,     0,     6,   142,   143,     7,     0,   144,     0,
   143,    13,   102,     0,   102,     0,   144,    32,   102,     0,
   145,   148,     0,     5,     0,     0,     0,     5,   146,    16,
     5,   147,    15,     0,   149,     0,   148,    13,   149,     0,
     5,     0,   151,     0,   166,     0,   150,   151,     0,   150,
   166,     0,    32,     0,   155,    32,     0,   152,    32,     0,
   157,    32,     0,   165,    32,     0,     0,     0,     5,   153,
    28,    15,    67,     6,     5,   154,     7,     0,     0,   196,
   156,    12,   183,     0,   159,     0,     0,   157,    33,   158,
   159,     0,     0,   162,     6,   160,   164,   163,     0,     0,
   162,     6,   161,   163,     0,   196,     0,     7,     0,   183,
     0,   164,    13,   183,     0,    59,   183,     0,   169,     0,
   167,     0,     0,   183,    35,   168,   150,    72,     0,     0,
     0,    73,   183,    35,   170,   150,    34,   171,   150,    72,
     0,    32,     0,   173,    32,     0,   172,    32,     0,   172,
   173,    32,     0,   174,     0,   178,     0,   176,    15,     0,
     0,   176,    13,    90,   175,    15,     0,     0,     5,   177,
    16,    36,     0,    69,    16,   182,    15,     0,    69,    16,
   182,    13,   179,    15,     0,   180,     0,   179,    13,   180,
     0,     5,     0,   181,     0,   195,    33,    33,   195,     0,
    36,     0,   192,     0,    28,   192,     0,     0,   183,   184,
    27,   192,     0,     0,   183,   185,    28,   192,     0,    22,
   192,     0,     0,   183,   186,    19,   192,     0,     0,   183,
   187,    16,   192,     0,     0,   183,   188,    15,   192,     0,
     0,   183,   189,    17,   192,     0,     0,   183,   190,    18,
   192,     0,     0,   183,   191,    14,   192,     0,   195,     0,
     0,   192,   193,    29,   195,     0,     0,   192,   194,    30,
   195,     0,    38,     0,    39,     0,    40,     0,    41,     0,
    44,     0,    42,     0,    43,     0,    45,     0,    37,     0,
     4,     0,   196,     0,   157,     0,     6,   183,     7,     0,
   197,     0,   201,     0,   199,     0,   217,     0,   213,     0,
   206,     0,   223,     0,   218,     0,     5,     0,   157,    33,
     5,     0,   195,    33,     5,     0,   196,    33,     5,     0,
     0,    10,   198,   200,    11,     0,    36,     0,   183,     0,
   200,   183,     0,     0,     0,    88,   202,   205,     6,   203,
   204,     0,   164,     7,     0,     7,     0,     5,     0,     0,
     0,    78,   209,   207,    74,   208,   211,     0,   209,     0,
     0,    73,   210,   211,     0,   213,     0,     0,   213,   212,
    89,   211,     0,   213,    85,   211,     0,    79,   213,     0,
    31,     5,     0,     0,    35,     6,     5,   214,   215,     7,
     0,    35,     5,     0,   183,     0,     0,   183,   216,   215,
     0,    35,     5,     0,     0,    81,     8,   219,   220,     0,
     0,   223,   221,     9,     0,     0,   223,   222,   220,     0,
     0,     0,    80,   226,   224,    74,   225,   228,     0,     0,
    73,   227,   228,     0,   230,     0,     0,   230,   229,    89,
   228,     0,     0,     0,     6,     5,   231,    84,     5,   232,
     7,     0,     0,     0,     0,    83,     0,     5,     0,    82,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   183,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    51,    55,    58,    66,    72,    75,    79,    85,    91,   101,
   104,   120,   122,   123,   142,   145,   148,   149,   151,   152,
   155,   156,   159,   160,   161,   169,   172,   175,   176,   179,
   180,   183,   187,   197,   197,   207,   209,   210,   211,   212,
   216,   226,   231,   251,   254,   260,   280,   285,   306,   308,
   312,   317,   323,   328,   328,   333,   333,   394,   402,   409,
   416,   420,   425,   427,   435,   436,   439,   498,   498,   559,
   567,   577,   578,   581,   586,   591,   595,   601,   602,   605,
   606,   609,   613,   618,   623,   630,   633,   634,   637,   644,
   645,   646,   647,   650,   651,   652,   653,   660,   667,   672,
   680,   682,   692,   704,   705,   710,   713,   720,   721,   729,
   731,   738,   751,   755,   762,   769,   770,   773,   779,   785,
   792,   797,   803,   804,   805,   806,   809,   810,   814,   815,
   821,   823,   829,   844,   845,   848,   849,   852,   853,   856,
   858,   861,   869,   875,   887,   892,   903,   908,   919,   929,
   935,   946,   951,   961,   966,   976,   981,   991,   996,  1001,
  1009,  1013,  1024,  1030,  1042,  1050,  1056,  1061,  1066,  1071,
  1076,  1081,  1086,  1091,  1096,  1102,  1112,  1117,  1121,  1125,
  1129,  1133,  1137,  1141,  1145,  1149,  1156,  1165,  1177,  1185,
  1203,  1208,  1211,  1217,  1221,  1227,  1232,  1237,  1238,  1242,
  1249,  1256,  1262,  1266,  1277,  1280,  1285,  1296,  1300,  1304,
  1308,  1315,  1321,  1333,  1342,  1352,  1359,  1365,  1372,  1374,
  1384,  1389,  1391,  1396,  1399,  1404,  1409,  1415,  1419,  1426,
  1431,  1436,  1440,  1444,  1447,  1465,  1470,  1476,  1481,  1486,
  1490,  1496,  1500,  1505,  1507
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FIN","NOMBRE",
"IDENT","PAR_G","PAR_D","ACCOL_G","ACCOL_D","CROCHER_G","CROCHER_D","EG_MATH",
"VIRGULE","EG_LOG","SUP","INF","SUP_EG","INF_EG","DIFF","OR_LOG","AND_LOG","NON_BIN",
"OR_BIN","AND_BIN","XOR_BIN","SCOP","PLUS","MOINS","FOIS","DIV","POWER","POINT_VI",
"LEPOINT","POINT_DEUX","INTERROGATION","CHAINE","NILL","EXEC","ACHIEVE","ASK",
"BREAK","TELL","KILL","PERROR","EVEN","BEGIN_GRAMMAR","FROM","DEFINE","GROUP",
"COMPONENT","CONSTRUCTION","DESTRUCTION","MESSAGE_MANAGER","MAESSAGELOOP","TRIGGER",
"PRECONDITION","POSTCONDITION","GOAL","RETURN","COS","SIN","TAN","POW","LN",
"LOG","FACT","AS","DIGITAL","COLLECTOR","WITH","DO","END","IF","THEN","BEGINING",
"END_GRAMMAR","LOGICVAR","RULE","IA_ASSERT","FUZZYRULE","FUZZYRULESET","SETS",
"FUZZYVAR","FIS","OR","COMMENT","STEPS","NEW","AND","LOCAL","program","DefinitionClass",
"MessageRun","@1","MessageManager","CorpDeDefinition","HeritageDeType","@2",
"EnteteDeDefinition","DefinitionDeGroup","@3","CParam","DefinitionDeProgram",
"BlocDeDefinition","UnBloc","Register","RegistDesAttributs","RegisterOperator",
"RegisterSteps","Steps","@4","@5","OpBloc","OpComment","PreCondition","@6","@7",
"Goal","@8","PostCondition","@9","@10","OperatorCond","@11","SingleOpCond","@12",
"@13","BooleanCond","FirstOrderPattern","@14","OpLogicVarSet","@15","OpLogicVar",
"BlocPourLesCode","BlocAvecCode","@16","Methode","Argument","ArgumentVide","@17",
"ArgumentListe","@18","ListesDeVariables","DesParams","TypeOfParam","@19","@20",
"DeclarationVariables","NonDeVariable","DuCode","Code","StaticCast","@21","@22",
"Affectation","@23","AppelleDeFonction","@24","AppelleDeFoncDirect","@25","@26",
"NonDeFonction","CallFunction","Prametre","RetourDeFonction","Evaluation","EvaluationSimpleState",
"@27","EvaluationState","@28","@29","TypeDeDeclaration","RegisterAnyVar","RegisterTypeDef",
"@30","TypeDeComp","@31","RegisterCollector","MessageType","DefMessage","Borne",
"Nom","Expression","@32","@33","@34","@35","@36","@37","@38","@39","Term","@40",
"@41","Facteur","Variable","List","@42","ChaineDeCaractaire","ElementList","NewObject",
"@43","@44","PrametreNew","NewObjectName","Rule","@45","@46","RuleCondition",
"@47","Clause","@48","FactPattern","@49","LogicVarSet","@50","LogicVar","FuzzyRuleSet",
"@51","ListFuzzyRule","@52","@53","FuzzyRule","@54","@55","FuzzyCondition","@56",
"FuzzyClause","@57","FuzzyFactPattern","@58","@59", NULL
};
#endif

static const short yyr1[] = {     0,
    91,    91,    92,    92,    92,    93,    94,    93,    95,    96,
    98,    97,    99,    99,   101,   100,   102,   102,   103,   103,
   104,   104,   105,   105,   105,   105,   106,   107,   107,   108,
   108,   109,   111,   110,   112,   110,   113,   113,   113,   113,
   114,   116,   117,   115,   119,   118,   121,   122,   120,   123,
   124,   123,   126,   125,   127,   125,   125,   128,   130,   129,
   131,   132,   131,   133,   134,   134,   136,   135,   135,   137,
   137,   138,   138,   140,   139,   142,   141,   143,   143,   144,
   144,   102,   145,   146,   147,   145,   148,   148,   149,   150,
   150,   150,   150,   151,   151,   151,   151,   151,   153,   154,
   152,   156,   155,   157,   158,   157,   160,   159,   161,   159,
   162,   163,   164,   164,   165,   166,   166,   168,   167,   170,
   171,   169,   172,   172,   172,   172,   173,   173,   174,   175,
   174,   177,   176,   178,   178,   179,   179,   180,   180,   181,
   182,   183,   183,   184,   183,   185,   183,   183,   186,   183,
   187,   183,   188,   183,   189,   183,   190,   183,   191,   183,
   192,   193,   192,   194,   192,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   196,   196,   196,   196,
   198,   197,   199,   200,   200,   202,   203,   201,   204,   204,
   205,   207,   208,   206,    -1,   210,   209,   211,   212,   211,
   211,    -1,    -1,   214,   213,   213,   215,   216,   215,   217,
   219,   218,   221,   220,   222,   220,   224,   225,   223,   227,
   226,   228,   229,   228,   231,   232,   230,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1
};

static const short yyr2[] = {     0,
     1,     2,     4,     3,     1,     4,     0,     6,     1,     2,
     0,     4,     2,     2,     0,     7,     1,     3,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     4,     3,     1,
     2,     3,     0,     3,     0,     3,     1,     1,     1,     1,
     3,     0,     0,     6,     0,     4,     0,     0,     6,     1,
     0,     3,     0,     3,     0,     3,     1,     2,     0,     6,
     1,     0,     3,     2,     1,     2,     0,     5,     3,     1,
     1,     1,     1,     0,     3,     0,     4,     1,     3,     1,
     3,     2,     1,     0,     0,     6,     1,     3,     1,     1,
     1,     2,     2,     1,     2,     2,     2,     2,     0,     0,
     9,     0,     4,     1,     0,     4,     0,     5,     0,     4,
     1,     1,     1,     3,     2,     1,     1,     0,     5,     0,
     0,     9,     1,     2,     2,     3,     1,     1,     2,     0,
     5,     0,     4,     4,     6,     1,     3,     1,     1,     4,
     1,     1,     2,     0,     4,     0,     4,     2,     0,     4,
     0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
     1,     0,     4,     0,     4,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     3,     3,     3,
     0,     4,     1,     1,     2,     0,     0,     6,     2,     1,
     1,     0,     0,     6,     1,     0,     3,     1,     0,     4,
     3,     2,     2,     0,     6,     2,     1,     0,     3,     2,
     0,     4,     0,     3,     0,     3,     0,     0,     6,     0,
     3,     1,     0,     4,     0,     0,     7,     0,     0,     0,
     7,     1,     0,     3,     1
};

static const short yydefact[] = {     0,
     0,     9,     0,     1,     5,     0,     0,     0,    11,     2,
     0,     0,     0,    10,     0,     7,    70,     4,     0,    71,
     0,     0,    45,     0,     0,     0,    19,    21,    23,    27,
    25,    26,    30,    37,    38,    40,    39,    24,    65,     0,
    14,     0,    13,    12,     6,     0,     0,    42,    47,     0,
     0,     0,     3,    22,    31,    66,    74,     0,    72,    73,
     0,   175,   187,     0,   191,     0,     0,    94,     0,   193,
   174,   166,   167,   168,   169,   171,   172,   170,   173,     0,
     0,     0,     0,     0,   196,     0,    90,     0,     0,   177,
   104,     0,     0,    91,   117,   116,   144,   142,   161,   176,
   179,   181,   180,   184,   183,   182,   186,   185,   132,   123,
     0,    29,     0,     0,   127,     0,   128,     0,     0,     0,
    41,    33,    32,     0,     0,    69,    67,   141,    15,     0,
   187,   177,   144,   176,     0,   148,   143,   216,     0,   115,
   144,   206,   202,   230,   227,   221,     0,     8,    92,    93,
    96,    95,    97,   105,   107,    98,   118,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   125,    28,     0,   124,     0,   129,     0,    43,
    51,    53,    55,    57,    48,    46,     0,     0,    75,    17,
    80,     0,    78,     0,     0,     0,     0,   178,   194,     0,
   214,   120,     0,     0,     0,     0,     0,   201,     0,   188,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   189,   190,     0,     0,     0,   126,
   130,   216,     0,     0,     0,     0,     0,     0,    34,    36,
     0,     0,    77,     0,     0,    89,    82,    87,    68,     0,
     0,   192,   195,     0,     0,     0,   207,   208,   203,     0,
   231,   232,   228,   222,   223,   197,   106,     0,     0,   113,
   112,   110,     0,   145,   147,   150,   152,   154,   156,   158,
   160,   163,   165,   103,   133,     0,   134,     0,   214,    44,
    52,    54,    56,    49,     0,    18,    79,    81,     0,     0,
     0,   218,     0,     0,   216,     0,     0,     0,   235,     0,
     0,     0,     0,     0,     0,   108,   119,   138,     0,   136,
   139,     0,   131,     0,    85,    88,    16,     0,     0,   215,
   121,   211,     0,   204,     0,     0,   229,   224,   226,   200,
     0,   198,   114,     0,   135,     0,     0,     0,    61,     0,
   100,   219,     0,   210,     0,   234,   199,   137,     0,    64,
    60,     0,    86,     0,     0,   236,   140,    63,   101,   122,
     0,   237,     0,     0
};

static const short yydefgoto[] = {     3,
     4,     5,    46,     6,     7,     8,    15,    14,    43,   196,
   191,    26,    27,    28,    29,    30,    31,    32,   123,   187,
   188,    33,    34,    35,   118,   234,    36,    50,    37,   119,
   238,   180,   235,   181,   236,   237,   182,   183,   324,   348,
   362,   349,    38,    39,   195,    40,    58,    59,   124,    60,
   125,   192,   193,   194,   241,   350,   247,   248,   184,    87,
    88,   130,   364,    89,   170,   132,   211,    91,   212,   213,
    92,   272,   269,    93,    94,    95,   214,    96,   255,   353,
   113,   114,   115,   288,   116,   171,   117,   319,   320,   321,
   129,    97,   158,   159,   160,   161,   162,   163,   164,   165,
    98,   166,   167,    99,   134,   101,   135,   102,   200,   103,
   147,   314,   342,   209,   104,   204,   308,   143,   203,   257,
   307,   105,   254,   303,   329,   106,   107,   207,   264,   312,
   313,   108,   206,   311,   145,   205,   261,   310,   262,   335,
   371
};

static const short yypact[] = {    -8,
     5,-32768,    65,-32768,-32768,    32,    15,    23,-32768,-32768,
    57,    75,    27,-32768,    74,    49,-32768,-32768,   101,-32768,
   105,   115,-32768,   117,   119,   147,-32768,    10,-32768,-32768,
-32768,-32768,   -23,-32768,-32768,-32768,-32768,    17,-32768,   154,
-32768,   151,-32768,-32768,-32768,   516,    16,-32768,-32768,   139,
   140,   170,-32768,-32768,-32768,-32768,   172,   208,-32768,-32768,
   150,-32768,   159,   738,-32768,    14,    14,-32768,   124,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   738,
   738,   120,   129,   192,-32768,   288,-32768,   156,   171,   125,
-32768,   198,   173,-32768,-32768,-32768,   180,   134,   174,    87,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   190,-32768,    38,   184,-32768,   102,-32768,   573,   573,   212,
-32768,   214,-32768,   213,   217,-32768,   516,-32768,-32768,   196,
-32768,   193,   685,    71,   738,   134,   134,-32768,   220,   285,
   255,-32768,-32768,-32768,-32768,-32768,   223,-32768,-32768,-32768,
-32768,-32768,-32768,   226,   225,-32768,-32768,   206,   207,   215,
   221,   224,   237,   238,   227,   209,   229,   250,   252,   230,
   247,   150,-32768,-32768,   232,-32768,   175,-32768,   160,-32768,
   194,-32768,-32768,   516,-32768,-32768,   236,   170,-32768,    82,
   262,    34,   245,   273,   219,   266,   270,-32768,   285,   630,
-32768,-32768,   260,   231,   281,   240,   235,-32768,   291,-32768,
    14,   738,   299,   516,    14,    14,    14,    14,    14,    14,
    14,    14,    14,    14,-32768,-32768,   738,   275,   109,-32768,
-32768,   286,   312,   263,   573,   290,   302,   264,-32768,-32768,
   321,   333,-32768,   217,   217,-32768,   326,-32768,-32768,   217,
   274,-32768,   285,   738,   516,   166,-32768,     1,-32768,   335,
-32768,   253,-32768,-32768,   265,-32768,   310,   174,    93,   285,
-32768,-32768,   345,   134,   134,   134,   134,   134,   134,   134,
   134,   174,   174,   285,-32768,   749,-32768,   329,   311,-32768,
-32768,-32768,-32768,-32768,   343,-32768,   262,   262,   273,   113,
   346,   127,   347,   402,-32768,   260,   267,   260,-32768,   268,
   281,   344,   235,   684,   738,-32768,-32768,    72,   135,-32768,
-32768,   325,-32768,   324,-32768,-32768,-32768,   357,   738,-32768,
-32768,-32768,   260,-32768,   279,   281,-32768,-32768,-32768,-32768,
   106,-32768,   285,   749,-32768,     4,   359,   358,   336,   355,
-32768,-32768,   516,-32768,   367,-32768,-32768,-32768,    14,-32768,
-32768,   324,-32768,   368,   459,-32768,   174,-32768,-32768,-32768,
   371,-32768,   374,-32768
};

static const short yypgoto[] = {-32768,
   376,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -219,-32768,   363,-32768,-32768,-32768,   360,-32768,   204,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -112,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    33,
-32768,-32768,-32768,   356,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    97,   -45,   -83,
-32768,-32768,-32768,-32768,-32768,   -46,-32768,   186,-32768,-32768,
-32768,   130,    84,-32768,   -81,-32768,-32768,-32768,-32768,-32768,
-32768,   287,-32768,-32768,-32768,-32768,-32768,-32768,    58,-32768,
   233,   -53,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -37,-32768,-32768,  -207,   -44,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -217,
-32768,  -197,-32768,    80,-32768,-32768,-32768,-32768,    88,-32768,
-32768,  -199,-32768,-32768,-32768,-32768,  -275,-32768,-32768,-32768,
-32768
};


#define	YYLAST		837


static const short yytable[] = {    90,
    86,   100,   149,   268,   150,   258,   185,   265,   225,     9,
   133,    90,   127,   100,    17,   282,   283,    62,   131,    64,
   109,    17,    12,    65,   297,   298,   140,   141,   136,   137,
   300,    41,    21,    22,    23,   337,   359,    11,     1,    90,
   243,   100,   109,   149,     2,   150,   244,   110,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    19,
   356,    20,    24,    16,   373,    21,    22,    23,    20,   173,
    13,    90,    90,   100,   100,    42,  -111,  -187,   322,    17,
    90,   199,   100,    18,   111,   306,   -83,   112,   332,  -209,
   334,    82,  -111,    83,    84,    24,    25,   -84,  -102,   271,
   149,    85,   150,   169,  -187,   315,   111,    44,   258,   174,
   258,     1,   357,   265,   177,   354,   178,     2,   315,   169,
    45,   286,   291,   287,    19,   242,    20,   327,   138,   139,
    21,    22,    23,  -217,    47,   258,   322,    90,    48,   100,
  -159,  -153,  -151,  -155,  -157,  -149,   253,   344,    49,   345,
    51,   367,    52,  -144,  -146,    53,   153,   154,   270,    57,
    24,    25,  -162,  -164,   232,   233,    61,    90,   273,   100,
   305,   139,   120,   284,   122,   121,   -76,   274,   275,   276,
   277,   278,   279,   280,   281,   128,   -99,   151,    90,   149,
   100,   150,   142,  -159,  -153,  -151,  -155,  -157,  -149,   146,
   302,   144,   152,   155,   156,   172,   168,  -146,    90,   304,
   100,    62,    63,    64,   157,   176,   186,    65,   -35,   189,
   149,   190,   150,   197,   201,   154,    90,   208,   100,    66,
   210,  -109,   215,   217,   216,    67,   218,   223,   219,    68,
   222,   227,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,   220,   225,   221,   226,    90,   224,   100,
   270,   343,   228,   230,   231,   -50,    80,   239,  -159,  -153,
  -151,  -155,  -157,  -149,   242,   302,   245,   246,   250,   126,
    81,   149,  -146,   150,   251,    82,   260,    83,    84,   202,
   249,    62,    63,    64,   256,    85,   266,    65,  -159,  -153,
  -151,  -155,  -157,  -149,   259,   271,    90,   365,   100,    66,
   285,  -144,  -146,   263,    83,    67,   289,   -58,    90,    68,
   100,   292,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,   293,   290,   294,   295,   296,   299,   309,
   301,  -233,  -104,   323,  -225,   -59,    80,   325,    62,    63,
    64,   328,   338,   330,    65,   333,   336,   346,   347,   148,
    81,   351,   355,   360,   361,    82,    66,    83,    84,   363,
   -62,   366,    67,   374,   369,    85,    68,   372,    10,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    54,   240,    55,    56,   368,   326,   267,   341,   316,   175,
   339,   358,     0,    80,   229,    62,    63,    64,   352,     0,
     0,    65,     0,     0,     0,     0,   317,    81,     0,     0,
     0,     0,    82,    66,    83,    84,     0,     0,     0,    67,
     0,     0,    85,    68,     0,   331,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    80,     0,    62,    63,    64,     0,     0,     0,    65,     0,
     0,     0,     0,     0,    81,     0,     0,     0,     0,    82,
    66,    83,    84,     0,     0,     0,    67,     0,     0,    85,
    68,     0,     0,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    80,     0,    62,
    63,    64,     0,     0,     0,    65,     0,     0,     0,     0,
   370,    81,     0,     0,     0,     0,    82,    66,    83,    84,
     0,     0,     0,    67,     0,     0,    85,    68,     0,     0,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    80,     0,    62,    63,    64,     0,
     0,     0,    65,     0,     0,     0,     0,     0,    81,     0,
     0,     0,     0,    82,    66,    83,    84,     0,     0,     0,
    67,     0,     0,    85,    68,     0,     0,   179,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    80,     0,    62,   131,    64,     0,     0,     0,    65,
   252,     0,     0,     0,     0,    81,     0,     0,     0,     0,
    82,    66,    83,    84,     0,     0,     0,    67,     0,     0,
    85,     0,     0,     0,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    62,   131,    64,
   340,   198,     0,    65,     0,     0,     0,     0,  -159,  -153,
  -151,  -155,  -157,  -149,     0,    66,     0,    82,     0,    83,
    84,    67,  -146,     0,     0,     0,     0,    85,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    62,   131,    64,     0,     0,     0,    65,     0,     0,
     0,     0,    62,   318,    64,     0,     0,     0,    65,    66,
     0,    82,     0,    83,    84,    67,     0,     0,     0,     0,
     0,    85,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    82,     0,    83,    84,     0,
     0,     0,     0,     0,     0,    85,    82,     0,    83,    84,
     0,     0,     0,     0,     0,     0,    85
};

static const short yycheck[] = {    46,
    46,    46,    86,   211,    86,   203,   119,   207,     5,     5,
    64,    58,    58,    58,     5,   223,   224,     4,     5,     6,
     5,     5,     8,    10,   244,   245,    80,    81,    66,    67,
   250,     5,    56,    57,    58,   311,    33,     6,    47,    86,
     7,    86,     5,   127,    53,   127,    13,    32,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    50,
   336,    52,    86,     7,     0,    56,    57,    58,    52,    32,
    48,   118,   119,   118,   119,    49,     6,     6,   286,     5,
   127,   135,   127,     9,    69,    85,     5,    72,   306,    89,
   308,    78,     6,    80,    81,    86,    87,    16,    12,     7,
   184,    88,   184,    33,    33,    13,    69,    34,   306,    72,
   308,    47,     7,   313,    13,   333,    15,    53,    13,    33,
    72,    13,   235,    15,    50,    13,    52,    15,     5,     6,
    56,    57,    58,     7,    34,   333,   344,   184,    34,   184,
    14,    15,    16,    17,    18,    19,   200,    13,    34,    15,
    34,   359,    34,    27,    28,     9,    32,    33,   212,     6,
    86,    87,    29,    30,     5,     6,    16,   214,   214,   214,
     5,     6,    34,   227,     5,    36,     5,   215,   216,   217,
   218,   219,   220,   221,   222,    36,    28,    32,   235,   273,
   235,   273,    73,    14,    15,    16,    17,    18,    19,     8,
   254,    73,    32,     6,    32,    16,    33,    28,   255,   255,
   255,     4,     5,     6,    35,    32,     5,    10,     5,     7,
   304,     5,   304,    28,     5,    33,   273,     5,   273,    22,
     5,     7,    27,    19,    28,    28,    16,    29,    15,    32,
    14,    12,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    17,     5,    18,     5,   304,    30,   304,
   314,   315,    16,    32,    90,    72,    59,    32,    14,    15,
    16,    17,    18,    19,    13,   329,    32,     5,    13,    72,
    73,   365,    28,   365,    15,    78,     6,    80,    81,    35,
    72,     4,     5,     6,    35,    88,     6,    10,    14,    15,
    16,    17,    18,    19,    74,     7,   353,   353,   353,    22,
    36,    27,    28,    74,    80,    28,     5,    32,   365,    32,
   365,    32,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    32,    72,    72,    16,     5,    13,     5,
    67,    89,    33,    15,    80,    35,    59,     5,     4,     5,
     6,     6,     9,     7,    10,    89,    89,    33,    35,    72,
    73,     5,    84,     5,     7,    78,    22,    80,    81,    15,
    35,     5,    28,     0,     7,    88,    32,     7,     3,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    28,   188,    33,    38,   362,   299,   211,   314,   269,   113,
   313,   344,    -1,    59,   172,     4,     5,     6,   329,    -1,
    -1,    10,    -1,    -1,    -1,    -1,    72,    73,    -1,    -1,
    -1,    -1,    78,    22,    80,    81,    -1,    -1,    -1,    28,
    -1,    -1,    88,    32,    -1,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    -1,     4,     5,     6,    -1,    -1,    -1,    10,    -1,
    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    78,
    22,    80,    81,    -1,    -1,    -1,    28,    -1,    -1,    88,
    32,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,     4,
     5,     6,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,
    72,    73,    -1,    -1,    -1,    -1,    78,    22,    80,    81,
    -1,    -1,    -1,    28,    -1,    -1,    88,    32,    -1,    -1,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    59,    -1,     4,     5,     6,    -1,
    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    73,    -1,
    -1,    -1,    -1,    78,    22,    80,    81,    -1,    -1,    -1,
    28,    -1,    -1,    88,    32,    -1,    -1,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    59,    -1,     4,     5,     6,    -1,    -1,    -1,    10,
    11,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,
    78,    22,    80,    81,    -1,    -1,    -1,    28,    -1,    -1,
    88,    -1,    -1,    -1,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,     6,
     7,     7,    -1,    10,    -1,    -1,    -1,    -1,    14,    15,
    16,    17,    18,    19,    -1,    22,    -1,    78,    -1,    80,
    81,    28,    28,    -1,    -1,    -1,    -1,    88,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     4,     5,     6,    -1,    -1,    -1,    10,    -1,    -1,
    -1,    -1,     4,     5,     6,    -1,    -1,    -1,    10,    22,
    -1,    78,    -1,    80,    81,    28,    -1,    -1,    -1,    -1,
    -1,    88,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    78,    -1,    80,    81,    -1,
    -1,    -1,    -1,    -1,    -1,    88,    78,    -1,    80,    81,
    -1,    -1,    -1,    -1,    -1,    -1,    88
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
CCompilateur::yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 52 "grammar.yacc"
{
								
							;
    break;}
case 3:
#line 62 "grammar.yacc"
{						
								if(!computContraint()) return false;
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 4:
#line 69 "grammar.yacc"
{
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 7:
#line 81 "grammar.yacc"
{
								initMessageManager();
							;
    break;}
case 8:
#line 86 "grammar.yacc"
{
								if(!endMessageManager()) return 0;
							;
    break;}
case 9:
#line 92 "grammar.yacc"
{
								if(_ResultCompile != NULL) 
								{
									yyerror("an MessageManager block had all ready declared");
									return 0;
								}								
							;
    break;}
case 11:
#line 105 "grammar.yacc"
{
								NLAIAGENT::CStringVarName interfName(LastyyText[1]);																																
								try
								{	
									NLAIC::CIdentType id = getTypeOfClass(interfName);
									_SelfClass.push((IClassInterpret *)(((CClassInterpretFactory *)id.getFactory())->getClass()->newInstance()));
									((IClassInterpret *)_SelfClass.get())->setInheritanceName(interfName);
								}
								catch(NLAIE::IException &a)
								{									
									yyerror((char *)a.what());
									return 0;
								}
							;
    break;}
case 14:
#line 124 "grammar.yacc"
{
								try
								{
									NLAIC::CIdentType id(LastyyText[1]);
									char text[1024*4];
									sprintf(text,"class '%s' all ready exist",LastyyText[1]);
									yyerror(text);
									return 0;
								}
								catch(NLAIE::IException &)
								{
									( (IClassInterpret *) _SelfClass.get() )->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
									( (IClassInterpret *) _SelfClass.get() )->buildVTable();
									RegisterClass();
								}
							;
    break;}
case 15:
#line 143 "grammar.yacc"
{
								((IClassInterpret *)_SelfClass.get())->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
							;
    break;}
case 25:
#line 162 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->buildLogicTables();
								}
							;
    break;}
case 33:
#line 188 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[1] ) );
							;
    break;}
case 35:
#line 198 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[0] ) );
							;
    break;}
case 41:
#line 219 "grammar.yacc"
{
								char *txt1 = LastyyText[0];
								char *txt2 = LastyyText[1];
							;
    break;}
case 42:
#line 227 "grammar.yacc"
{
								initParam()
							;
    break;}
case 43:
#line 231 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderCond( _LastAsserts.front(), _LastLogicParams.front() );
										_LastAsserts.pop_front();
										_LastLogicParams.pop_front();
									}

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
							;
    break;}
case 45:
#line 255 "grammar.yacc"
{
								if ( !classIsAnOperator() )
								 	return 0;
							;
    break;}
case 46:
#line 261 "grammar.yacc"
{
								if ( _Goal ) 
								{
									_Goal->release();
									_Goal = NULL;
								}
								
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									NLAIAGENT::CStringVarName goal_name( LastyyText[1] );
									op_class->setGoal( (NLAIAGENT::CStringVarName &) goal_name );
								}
							;
    break;}
case 47:
#line 281 "grammar.yacc"
{
								initParam()
							;
    break;}
case 48:
#line 285 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderConc( _LastAsserts.front(), _LastLogicParams.front() );
										_LastAsserts.pop_front();
										_LastLogicParams.pop_front();
									}

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
							;
    break;}
case 50:
#line 309 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 51:
#line 313 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 52:
#line 317 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 53:
#line 324 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 55:
#line 329 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 57:
#line 334 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
//										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_LastCodeBranche.push_back( (IOpCode *) listCode );
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}							

/*								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}				
*/				

							;
    break;}
case 58:
#line 395 "grammar.yacc"
{
							char *param_name = LastyyText[1];
							_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
						;
    break;}
case 59:
#line 404 "grammar.yacc"
{
							const char *assert_name = LastyyText[1];
							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );
						;
    break;}
case 60:
#line 410 "grammar.yacc"
{
								for (int i = 0; i < 20; i++); // To put breakpoints for debugging...
						;
    break;}
case 61:
#line 417 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 62:
#line 421 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 64:
#line 428 "grammar.yacc"
{
							char *var_name = LastyyText[1];
							_LastLogicParams.back().push_back( new NLAIAGENT::CStringVarName( var_name ) );
						;
    break;}
case 67:
#line 441 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}

								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}								
								if(!caseRunMsg()) return false;
							;
    break;}
case 69:
#line 500 "grammar.yacc"
{	
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}
								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}
								if(!caseRunMsg()) return false;

							;
    break;}
case 70:
#line 560 "grammar.yacc"
{				
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 71:
#line 568 "grammar.yacc"
{
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 74:
#line 582 "grammar.yacc"
{								
								initParam();
							;
    break;}
case 75:
#line 586 "grammar.yacc"
{
								if(!registerMethod()) return false;
							;
    break;}
case 76:
#line 592 "grammar.yacc"
{
								initParam();
							;
    break;}
case 77:
#line 596 "grammar.yacc"
{
								registerMethod();
							;
    break;}
case 83:
#line 614 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[0]);
								_BaseObjectDef = false;
							;
    break;}
case 84:
#line 619 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 85:
#line 624 "grammar.yacc"
{
								_LastBaseObjectDef = NLAIAGENT::CStringVarName(LastyyText[1]);
								_BaseObjectDef = true;

							;
    break;}
case 89:
#line 638 "grammar.yacc"
{
								if(!setParamVarName()) return 0;
							;
    break;}
case 97:
#line 654 "grammar.yacc"
{
								_LastStringParam.back()->release();
								_LastStringParam.pop_back();
								_Param.back()->release();
								_Param.pop_back();								
							;
    break;}
case 98:
#line 662 "grammar.yacc"
{
								_LastBloc->addCode((new CHaltOpCode));
							;
    break;}
case 99:
#line 668 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 100:
#line 676 "grammar.yacc"
{					
								NLAIAGENT::CStringVarName x(LastyyText[1]);			
								if(!castVariable(_LastString,x)) return false;
							;
    break;}
case 102:
#line 683 "grammar.yacc"
{								
								std::list<NLAISCRIPT::CStringType>::iterator i = _LasVarStr.begin();
								_LasAffectationVarStr.clear();
								while(i != _LasVarStr.end())
								{
									_LasAffectationVarStr.push_back(*i++);
								}												
							;
    break;}
case 103:
#line 693 "grammar.yacc"
{
								if(!affectation()) 
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 105:
#line 706 "grammar.yacc"
{
								
							;
    break;}
case 107:
#line 714 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 109:
#line 722 "grammar.yacc"
{								
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 111:
#line 732 "grammar.yacc"
{
								nameMethodeProcessing();
							;
    break;}
case 112:
#line 739 "grammar.yacc"
{	
								_ExpressionType = _ExpressionTypeTmp.back();
								_ExpressionTypeTmp.pop_back();								
								if(!callFunction())
								{
									_FromStack.pop_back();
									return 0;	
								}
								_FromStack.pop_back();
							;
    break;}
case 113:
#line 752 "grammar.yacc"
{
								pushParamExpression();								
							;
    break;}
case 114:
#line 757 "grammar.yacc"
{
								pushParamExpression();
							;
    break;}
case 115:
#line 764 "grammar.yacc"
{
								if(!typeOfMethod()) return false;
							;
    break;}
case 118:
#line 775 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 119:
#line 780 "grammar.yacc"
{
								interrogationEnd();
							;
    break;}
case 120:
#line 788 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 121:
#line 793 "grammar.yacc"
{								
								ifInterrogationPoint()
							;
    break;}
case 122:
#line 798 "grammar.yacc"
{
								ifInterrogationEnd();
							;
    break;}
case 130:
#line 816 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Local = true;								
							;
    break;}
case 132:
#line 824 "grammar.yacc"
{								
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
								_LastRegistered = ((IClassInterpret *)_SelfClass.get())->registerComponent(_LastString);
							;
    break;}
case 133:
#line 830 "grammar.yacc"
{
								if(((IClassInterpret *)_SelfClass.get())->getComponent(NLAIAGENT::CStringVarName(LastyyText[1])) == NULL)
								{
									CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);
									c->ObjectName = new NLAIAGENT::CStringVarName(LastyyText[1]);									
								}
								else
								{
									yyerror("variable all ready declared in the Register components");
									return 0;			
								}
							;
    break;}
case 142:
#line 862 "grammar.yacc"
{	
								if(_FacteurEval)
								{								
									allocExpression(NULL);
									setTypeExpression();
								}
							;
    break;}
case 143:
#line 870 "grammar.yacc"
{								
								allocExpression(new CNegOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opAdd,"(-)");
								
							;
    break;}
case 144:
#line 876 "grammar.yacc"
{	
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opAdd))
								{
									yyerror("erreur sémantique l'operateur + n'est pas supporté par cette expression");
									return 0;
								}*/								
								setTypeExpressionG();
								allocExpression(NULL);
								
								
							;
    break;}
case 145:
#line 888 "grammar.yacc"
{									
								allocExpression(new CAddOpCode,true);		
								setTypeExpressionD(NLAIC::CTypeOfOperator::opAdd,"+");	
							;
    break;}
case 146:
#line 893 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSub))
								{
									yyerror("erreur sémantique l'operateur - n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);
								
							;
    break;}
case 147:
#line 904 "grammar.yacc"
{								
								allocExpression(new CSubOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSub,"-");							
							;
    break;}
case 148:
#line 909 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opNot))
								{
									yyerror("erreur sémantique l'operateur ! n'est pas supporté par cette expression");
									return 0;
								}*/								
								allocExpression(new CNotOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opNot,"!");
								
							;
    break;}
case 149:
#line 920 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiff))
								{
									yyerror("erreur sémantique l'operateur != n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 150:
#line 930 "grammar.yacc"
{								
								allocExpression(new CDiffOpCode,true);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiff,"!=");
								
							;
    break;}
case 151:
#line 936 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInf))
								{
									yyerror("erreur sémantique l'operateur < n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
								
							;
    break;}
case 152:
#line 947 "grammar.yacc"
{								
								allocExpression(new CInfOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInf,"<");							
							;
    break;}
case 153:
#line 952 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSup))
								{
									yyerror("erreur sémantique l'operateur > n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);								
							;
    break;}
case 154:
#line 962 "grammar.yacc"
{								
								allocExpression(new CSupOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSup,">");							
							;
    break;}
case 155:
#line 967 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSupEq))
								{
									yyerror("erreur sémantique l'operateur >= n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
							;
    break;}
case 156:
#line 977 "grammar.yacc"
{								
								allocExpression(new CSupEqOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSupEq,">=");
							;
    break;}
case 157:
#line 982 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInfEq))
								{
									yyerror("erreur sémantique l'operateur <= n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 158:
#line 992 "grammar.yacc"
{								
								allocExpression(new CInfEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInfEq,"<=");
							;
    break;}
case 159:
#line 997 "grammar.yacc"
{
								setTypeExpressionG();	
								allocExpression(NULL);														
							;
    break;}
case 160:
#line 1002 "grammar.yacc"
{								
								allocExpression(new CEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opEq,"==");

							;
    break;}
case 161:
#line 1010 "grammar.yacc"
{
								_FacteurEval = true;	
							;
    break;}
case 162:
#line 1014 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opMul))
								{
									yyerror("erreur sémantique l'operateur * n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();								
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 163:
#line 1025 "grammar.yacc"
{									
								setTypeExpressionD(NLAIC::CTypeOfOperator::opMul,"+");
								allocExpression(new CMulOpCode,false);
								_FacteurEval = false;
							;
    break;}
case 164:
#line 1031 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiv))
								{
									yyerror("erreur sémantique l'operateur / n'est pas supporté par cette expression");
									return 0;
								}*/
											
								setTypeExpressionG();
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 165:
#line 1043 "grammar.yacc"
{																
								allocExpression(new CDivOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiv,"/");
								_FacteurEval = false;	
							;
    break;}
case 166:
#line 1052 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PExec);
							;
    break;}
case 167:
#line 1057 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAchieve);
							;
    break;}
case 168:
#line 1062 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAsk);
							;
    break;}
case 169:
#line 1067 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PBreak);
							;
    break;}
case 170:
#line 1072 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PError);
							;
    break;}
case 171:
#line 1077 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PTell);
							;
    break;}
case 172:
#line 1082 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PKill);
							;
    break;}
case 173:
#line 1087 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PEven);
							;
    break;}
case 174:
#line 1092 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVarNill();
							;
    break;}
case 175:
#line 1098 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVar();
							;
    break;}
case 176:
#line 1103 "grammar.yacc"
{								
								_IsFacteurIsExpression = false;
								if(!processingVar())
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 177:
#line 1113 "grammar.yacc"
{								
								_IsFacteurIsExpression = true;								
								setMethodVar();
							;
    break;}
case 178:
#line 1118 "grammar.yacc"
{							
								_IsFacteurIsExpression = true;
							;
    break;}
case 179:
#line 1122 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 180:
#line 1126 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 181:
#line 1130 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 182:
#line 1134 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 183:
#line 1138 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 184:
#line 1142 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 185:
#line 1146 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 186:
#line 1150 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 187:
#line 1157 "grammar.yacc"
{
								_LasVarStr.clear();
								_LasVarStr.push_back(NLAISCRIPT::CStringType(LastyyText[1]));
								_LastFact.VarType = varTypeUndef;
								_IsFacteurIsExpression = false;	
								_FromStack.push_back(false);							
							;
    break;}
case 188:
#line 1166 "grammar.yacc"
{
								_LasVarStr.clear();
								cleanTypeList();
								_LasVarStr.push_back(LastyyText[1]);
								setMethodVar();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);

							;
    break;}
case 189:
#line 1178 "grammar.yacc"
{	
								cleanTypeList();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);
							;
    break;}
case 190:
#line 1187 "grammar.yacc"
{									
								if(_IsFacteurIsExpression)
								{
									IOpType *c = _TypeList.back();
									_TypeList.pop_back();
									c->release();
									_TypeList.push_back(_FlotingExpressionType);
									_FlotingExpressionType->incRef();
									_LasVarStr.clear();
									_FromStack.pop_back();
								}
								_LasVarStr.push_back(LastyyText[1]);
							;
    break;}
case 191:
#line 1204 "grammar.yacc"
{									
								setListVar();
							;
    break;}
case 193:
#line 1212 "grammar.yacc"
{									
								setChaineVar();
							;
    break;}
case 194:
#line 1218 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));								
							;
    break;}
case 195:
#line 1222 "grammar.yacc"
{								
								_LastBloc->addCode((new CAddOpCode));
							;
    break;}
case 196:
#line 1228 "grammar.yacc"
{
								_LastStringParam.push_back(new NLAIAGENT::CGroupType());								

							;
    break;}
case 197:
#line 1233 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
							;
    break;}
case 199:
#line 1239 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 200:
#line 1243 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 201:
#line 1250 "grammar.yacc"
{							
								_LastStringParam.back()->cpy(NLAIAGENT::CStringType(NLAIAGENT::CStringVarName(LastyyText[1])));
								_Param.push_back(new CParam);								
							;
    break;}
case 202:
#line 1257 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );				
						;
    break;}
case 203:
#line 1262 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 204:
#line 1266 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
//							_LastBloc->addCode( new CLdbNewOpCode(CRule()) );		
							setStackVar( CVar::IdVar );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tUndef);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::Rule::idRule;
						;
    break;}
case 206:
#line 1281 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 207:
#line 1285 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbNewOpCode( CClause() ) );
							//_LastBloc->addCode( new CAddOpCode() );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::CClause::idCClause;
						;
    break;}
case 208:
#line 1297 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 209:
#line 1301 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 210:
#line 1305 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );							
						;
    break;}
case 211:
#line 1310 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );													
						;
    break;}
case 212:
#line 1316 "grammar.yacc"
{
							_LastBloc->addCode( new CTellOpCode() );
						;
    break;}
case 213:
#line 1322 "grammar.yacc"
{
							/*char buf[256];
							strcpy(buf, LastyyText[1]);
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CBoolType( NLAIAGENT::CStringVarName(LastyyText[1]) ) ) );
							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
							_LastFact.varType = varForFunc;
							_LastFact.isUsed = false;
							_lastIdentType = NLAIAGENT::CVar::idBoolType;
							*/
						;
    break;}
case 214:
#line 1335 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
							char *txt = LastyyText[1];
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode(new CAddOpCode() );
							//_LastAssert = NLAIAGENT::CStringVarName(LastyyText[1]);
						;
    break;}
case 215:
#line 1343 "grammar.yacc"
{
/*							setStackVar( CFactPattern::IdFactPattern );
							IBaseAssert *my_assert = _FactBase->addAssert( _LastAssert, _NbLogicParams );
							_NbLogicParams = 0;
							_LastBloc->addCode(new CLdbNewOpCode( CFactPattern( my_assert ) ) );
							*/
						;
    break;}
case 216:
#line 1353 "grammar.yacc"
{
						;
    break;}
case 217:
#line 1360 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 218:
#line 1366 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 220:
#line 1375 "grammar.yacc"
{
							char buf[256];
							strcpy(buf, LastyyText[1]);
							setStackVar( CVar::IdVar );
							_LastBloc->addCode( new CLdbOpCode(CVar( LastyyText[1] )) );
						;
    break;}
case 221:
#line 1385 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
						;
    break;}
case 223:
#line 1392 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 224:
#line 1396 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 225:
#line 1400 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 226:
#line 1404 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 227:
#line 1410 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );
						;
    break;}
case 228:
#line 1415 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 229:
#line 1419 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyRule() ) );		
							setStackVar(CFuzzyRule::IdFuzzyRule);
						;
    break;}
case 230:
#line 1427 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 231:
#line 1431 "grammar.yacc"
{
							
						;
    break;}
case 232:
#line 1437 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 233:
#line 1441 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 235:
#line 1448 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							// Composant?
							char *txt = LastyyText[0];
/*							_lastFVarIndex = ((IClassInterpret *)_selfClass.get())->getComponentIndex(NLAIAGENT::CStringVarName(LastyyText[1]));
							if (_lastFVarIndex != -1 )
							{
								_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CDigitalType(_lastFVarIndex) ) );
								_LastBloc->addCode( new CAddOpCode() );
							}
							else
							{
								// Variable locale?
							}
							*/

						;
    break;}
case 236:
#line 1466 "grammar.yacc"
{
							_LastString = NLAIAGENT::CStringVarName( LastyyText[0] );
						;
    break;}
case 237:
#line 1470 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++ );
							_LastBloc->addCode(new CLdbNewOpCode( CSimpleFuzzyCond(NULL, NULL) ) );
						;
    break;}
case 238:
#line 1477 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 239:
#line 1481 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 240:
#line 1486 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 241:
#line 1490 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyVar(NLAIAGENT::CStringVarName("Inst"),0,1) ) );
						;
    break;}
case 242:
#line 1497 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 243:
#line 1501 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 245:
#line 1508 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1512 "grammar.yacc"

