
/*  A Bison parser, made from grammar.yacc
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FIN	258
#define	NOMBRE	259
#define	IDENT	260
#define	PAR_G	261
#define	PAR_D	262
#define	ACCOL_G	263
#define	ACCOL_D	264
#define	CROCHER_G	265
#define	CROCHER_D	266
#define	EG_MATH	267
#define	VIRGULE	268
#define	EG_LOG	269
#define	SUP	270
#define	INF	271
#define	SUP_EG	272
#define	INF_EG	273
#define	DIFF	274
#define	OR_LOG	275
#define	AND_LOG	276
#define	NON_BIN	277
#define	OR_BIN	278
#define	AND_BIN	279
#define	XOR_BIN	280
#define	SCOP	281
#define	PLUS	282
#define	MOINS	283
#define	FOIS	284
#define	DIV	285
#define	POWER	286
#define	POINT_VI	287
#define	LEPOINT	288
#define	POINT_DEUX	289
#define	INTERROGATION	290
#define	CHAINE	291
#define	NILL	292
#define	EXEC	293
#define	ACHIEVE	294
#define	ASK	295
#define	BREAK	296
#define	TELL	297
#define	KILL	298
#define	PERROR	299
#define	EVEN	300
#define	BEGIN_GRAMMAR	301
#define	FROM	302
#define	DEFINE	303
#define	GROUP	304
#define	COMPONENT	305
#define	CONSTRUCTION	306
#define	DESTRUCTION	307
#define	MESSAGE_MANAGER	308
#define	MAESSAGELOOP	309
#define	TRIGGER	310
#define	PRECONDITION	311
#define	POSTCONDITION	312
#define	GOAL	313
#define	RETURN	314
#define	COS	315
#define	SIN	316
#define	TAN	317
#define	POW	318
#define	LN	319
#define	LOG	320
#define	FACT	321
#define	AS	322
#define	DIGITAL	323
#define	COLLECTOR	324
#define	WITH	325
#define	DO	326
#define	END	327
#define	IF	328
#define	THEN	329
#define	BEGINING	330
#define	END_GRAMMAR	331
#define	LOGICVAR	332
#define	RULE	333
#define	IA_ASSERT	334
#define	FUZZY	335
#define	FUZZYRULE	336
#define	FUZZYRULESET	337
#define	SETS	338
#define	FUZZYVAR	339
#define	FIS	340
#define	OR	341
#define	COMMENT	342
#define	STEPS	343
#define	NEW	344
#define	AND	345
#define	LOCAL	346

#line 1 "grammar.yacc"

#include <malloc.h>
#include <list>
#define PARSER_NO_REDEF_YYTABLE_H_
#include "nel/ai/script/compilateur.h"
#include "nel/ai/script/constraint.h"
#include "nel/ai/script/type_def.h"
#include "nel/ai/script/object_unknown.h"
#include "nel/ai/logic/logic.h"
#include "nel/ai/fuzzy/fuzzy.h"
#include "nel/ai/logic/interpret_object_operator.h"
#include "nel/ai/script/interpret_fsm.h"

using  namespace NLAISCRIPT;
using  namespace NLAILOGIC;
using  namespace NLAIFUZZY;
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		385
#define	YYFLAG		-32768
#define	YYNTBASE	92

#define YYTRANSLATE(x) ((unsigned)(x) <= 346 ? yytranslate[x] : 238)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,    10,    14,    16,    21,    22,    29,    31,
    34,    35,    40,    43,    46,    47,    55,    57,    61,    63,
    65,    67,    70,    72,    74,    76,    78,    80,    85,    89,
    91,    94,    98,    99,   103,   104,   108,   110,   112,   114,
   116,   120,   121,   122,   129,   130,   135,   136,   137,   144,
   146,   147,   151,   152,   156,   158,   159,   163,   165,   168,
   169,   170,   171,   182,   183,   190,   192,   193,   197,   200,
   202,   205,   206,   212,   216,   218,   220,   222,   224,   225,
   229,   230,   235,   237,   241,   243,   247,   250,   252,   253,
   254,   261,   263,   267,   269,   271,   273,   276,   279,   281,
   284,   287,   290,   293,   294,   295,   305,   306,   311,   313,
   314,   319,   320,   326,   327,   332,   334,   336,   338,   342,
   345,   347,   349,   350,   356,   357,   358,   368,   370,   373,
   376,   380,   382,   384,   387,   388,   394,   395,   400,   405,
   412,   414,   418,   420,   422,   427,   429,   431,   434,   435,
   440,   441,   446,   449,   450,   455,   456,   461,   462,   467,
   468,   473,   474,   479,   480,   485,   487,   488,   493,   494,
   499,   501,   503,   505,   507,   509,   511,   513,   515,   517,
   519,   521,   523,   527,   529,   531,   533,   535,   537,   539,
   541,   543,   545,   549,   553,   557,   558,   563,   565,   567,
   570,   571,   572,   579,   582,   584,   586,   587,   588,   595,
   597,   598,   602,   604,   605,   610,   614,   617,   620,   621,
   628,   631,   633,   634,   638,   641,   642,   647,   648,   652,
   653,   657,   658,   659,   666,   667,   671,   673,   674,   679,
   680,   681,   689,   690,   691,   692,   700,   702,   703,   707
};

static const short yyrhs[] = {    93,
     0,    92,    93,     0,    97,     8,   104,     9,     0,    97,
     8,     9,     0,    94,     0,    96,     6,     7,    72,     0,
     0,    96,     6,     7,    95,   155,    72,     0,    53,     0,
    98,   100,     0,     0,    47,     5,    99,    34,     0,    48,
   101,     0,    48,     5,     0,     0,    49,    16,   187,   102,
    13,   103,    15,     0,     5,     0,   103,    13,     5,     0,
   105,     0,   104,     0,   106,     0,   106,   105,     0,   107,
     0,   139,     0,   109,     0,   110,     0,   108,     0,    50,
    34,   177,    72,     0,    50,    34,    72,     0,   114,     0,
   114,   109,     0,    88,    34,   111,     0,     0,     5,   112,
    32,     0,     0,     5,   113,   111,     0,   115,     0,   116,
     0,   121,     0,   119,     0,    87,    34,    36,     0,     0,
     0,    56,    34,   117,   124,   118,    72,     0,     0,    58,
   120,    34,     5,     0,     0,     0,    57,    34,   122,   124,
   123,    72,     0,   126,     0,     0,   126,   125,   124,     0,
     0,   129,   127,    32,     0,   130,     0,     0,   134,   128,
    32,     0,   155,     0,    35,     5,     0,     0,     0,     0,
    80,     6,     5,   131,    85,   132,     5,   133,     7,    32,
     0,     0,    35,     6,     5,   135,   136,     7,     0,   138,
     0,     0,   138,   137,   136,     0,    35,     5,     0,   140,
     0,   139,   140,     0,     0,   142,   143,   155,   141,    72,
     0,   142,   143,    72,     0,     5,     0,    52,     0,   144,
     0,   146,     0,     0,     6,   145,     7,     0,     0,     6,
   147,   148,     7,     0,   149,     0,   148,    13,   103,     0,
   103,     0,   149,    32,   103,     0,   150,   153,     0,     5,
     0,     0,     0,     5,   151,    16,     5,   152,    15,     0,
   154,     0,   153,    13,   154,     0,     5,     0,   156,     0,
   171,     0,   155,   156,     0,   155,   171,     0,    32,     0,
   160,    32,     0,   157,    32,     0,   162,    32,     0,   170,
    32,     0,     0,     0,     5,   158,    28,    15,    67,     6,
     5,   159,     7,     0,     0,   201,   161,    12,   188,     0,
   164,     0,     0,   162,    33,   163,   164,     0,     0,   167,
     6,   165,   169,   168,     0,     0,   167,     6,   166,   168,
     0,   201,     0,     7,     0,   188,     0,   169,    13,   188,
     0,    59,   188,     0,   174,     0,   172,     0,     0,   188,
    35,   173,   155,    72,     0,     0,     0,    73,   188,    35,
   175,   155,    34,   176,   155,    72,     0,    32,     0,   178,
    32,     0,   177,    32,     0,   177,   178,    32,     0,   179,
     0,   183,     0,   181,    15,     0,     0,   181,    13,    91,
   180,    15,     0,     0,     5,   182,    16,    36,     0,    69,
    16,   187,    15,     0,    69,    16,   187,    13,   184,    15,
     0,   185,     0,   184,    13,   185,     0,     5,     0,   186,
     0,   200,    33,    33,   200,     0,    36,     0,   197,     0,
    28,   197,     0,     0,   188,   189,    27,   197,     0,     0,
   188,   190,    28,   197,     0,    22,   197,     0,     0,   188,
   191,    19,   197,     0,     0,   188,   192,    16,   197,     0,
     0,   188,   193,    15,   197,     0,     0,   188,   194,    17,
   197,     0,     0,   188,   195,    18,   197,     0,     0,   188,
   196,    14,   197,     0,   200,     0,     0,   197,   198,    29,
   200,     0,     0,   197,   199,    30,   200,     0,    38,     0,
    39,     0,    40,     0,    41,     0,    44,     0,    42,     0,
    43,     0,    45,     0,    37,     0,     4,     0,   201,     0,
   162,     0,     6,   188,     7,     0,   202,     0,   206,     0,
   204,     0,   222,     0,   218,     0,   211,     0,   228,     0,
   223,     0,     5,     0,   162,    33,     5,     0,   200,    33,
     5,     0,   201,    33,     5,     0,     0,    10,   203,   205,
    11,     0,    36,     0,   188,     0,   205,   188,     0,     0,
     0,    89,   207,   210,     6,   208,   209,     0,   169,     7,
     0,     7,     0,     5,     0,     0,     0,    78,   214,   212,
    74,   213,   216,     0,   214,     0,     0,    73,   215,   216,
     0,   218,     0,     0,   218,   217,    90,   216,     0,   218,
    86,   216,     0,    79,   218,     0,    31,     5,     0,     0,
    35,     6,     5,   219,   220,     7,     0,    35,     5,     0,
   188,     0,     0,   188,   221,   220,     0,    35,     5,     0,
     0,    82,     8,   224,   225,     0,     0,   228,   226,     9,
     0,     0,   228,   227,   225,     0,     0,     0,    81,   231,
   229,    74,   230,   233,     0,     0,    73,   232,   233,     0,
   235,     0,     0,   235,   234,    90,   233,     0,     0,     0,
     6,     5,   236,    85,     5,   237,     7,     0,     0,     0,
     0,    84,     0,     5,     0,    83,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   188,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    51,    55,    58,    66,    72,    75,    79,    85,    91,   101,
   104,   120,   122,   123,   142,   145,   148,   149,   151,   152,
   155,   156,   159,   160,   161,   169,   172,   175,   176,   179,
   180,   183,   187,   197,   197,   207,   209,   210,   211,   212,
   216,   233,   238,   258,   261,   268,   288,   293,   314,   316,
   320,   325,   331,   336,   336,   352,   357,   357,   418,   426,
   433,   437,   441,   445,   452,   459,   463,   468,   470,   478,
   479,   482,   541,   541,   602,   610,   620,   621,   624,   629,
   634,   638,   644,   645,   648,   649,   652,   656,   661,   666,
   673,   676,   677,   680,   687,   688,   689,   690,   693,   694,
   695,   696,   703,   710,   715,   723,   725,   735,   747,   748,
   753,   756,   763,   764,   772,   774,   781,   794,   798,   805,
   812,   813,   816,   822,   828,   835,   840,   846,   847,   848,
   849,   852,   853,   857,   858,   864,   866,   872,   887,   888,
   891,   892,   895,   896,   899,   901,   904,   912,   918,   930,
   935,   946,   951,   962,   972,   978,   989,   994,  1004,  1009,
  1019,  1024,  1034,  1039,  1044,  1052,  1056,  1067,  1073,  1085,
  1093,  1099,  1104,  1109,  1114,  1119,  1124,  1129,  1134,  1139,
  1145,  1155,  1160,  1164,  1168,  1172,  1176,  1180,  1184,  1188,
  1192,  1199,  1208,  1220,  1228,  1246,  1251,  1254,  1260,  1264,
  1270,  1275,  1280,  1281,  1285,  1292,  1299,  1305,  1309,  1320,
  1323,  1328,  1339,  1343,  1347,  1351,  1358,  1364,  1376,  1385,
  1395,  1402,  1408,  1415,  1417,  1427,  1432,  1434,  1439,  1442,
  1447,  1452,  1458,  1462,  1469,  1474,  1479,  1483,  1487,  1490,
  1508,  1513,  1519,  1524,  1529,  1533,  1539,  1543,  1548,  1550
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FIN","NOMBRE",
"IDENT","PAR_G","PAR_D","ACCOL_G","ACCOL_D","CROCHER_G","CROCHER_D","EG_MATH",
"VIRGULE","EG_LOG","SUP","INF","SUP_EG","INF_EG","DIFF","OR_LOG","AND_LOG","NON_BIN",
"OR_BIN","AND_BIN","XOR_BIN","SCOP","PLUS","MOINS","FOIS","DIV","POWER","POINT_VI",
"LEPOINT","POINT_DEUX","INTERROGATION","CHAINE","NILL","EXEC","ACHIEVE","ASK",
"BREAK","TELL","KILL","PERROR","EVEN","BEGIN_GRAMMAR","FROM","DEFINE","GROUP",
"COMPONENT","CONSTRUCTION","DESTRUCTION","MESSAGE_MANAGER","MAESSAGELOOP","TRIGGER",
"PRECONDITION","POSTCONDITION","GOAL","RETURN","COS","SIN","TAN","POW","LN",
"LOG","FACT","AS","DIGITAL","COLLECTOR","WITH","DO","END","IF","THEN","BEGINING",
"END_GRAMMAR","LOGICVAR","RULE","IA_ASSERT","FUZZY","FUZZYRULE","FUZZYRULESET",
"SETS","FUZZYVAR","FIS","OR","COMMENT","STEPS","NEW","AND","LOCAL","program",
"DefinitionClass","MessageRun","@1","MessageManager","CorpDeDefinition","HeritageDeType",
"@2","EnteteDeDefinition","DefinitionDeGroup","@3","CParam","DefinitionDeProgram",
"BlocDeDefinition","UnBloc","Register","RegistDesAttributs","RegisterOperator",
"RegisterSteps","Steps","@4","@5","OpBloc","OpComment","PreCondition","@6","@7",
"Goal","@8","PostCondition","@9","@10","OperatorCond","@11","SingleOpCond","@12",
"@13","BooleanCond","FuzzyCond","@14","@15","@16","FirstOrderPattern","@17",
"OpLogicVarSet","@18","OpLogicVar","BlocPourLesCode","BlocAvecCode","@19","Methode",
"Argument","ArgumentVide","@20","ArgumentListe","@21","ListesDeVariables","DesParams",
"TypeOfParam","@22","@23","DeclarationVariables","NonDeVariable","DuCode","Code",
"StaticCast","@24","@25","Affectation","@26","AppelleDeFonction","@27","AppelleDeFoncDirect",
"@28","@29","NonDeFonction","CallFunction","Prametre","RetourDeFonction","Evaluation",
"EvaluationSimpleState","@30","EvaluationState","@31","@32","TypeDeDeclaration",
"RegisterAnyVar","RegisterTypeDef","@33","TypeDeComp","@34","RegisterCollector",
"MessageType","DefMessage","Borne","Nom","Expression","@35","@36","@37","@38",
"@39","@40","@41","@42","Term","@43","@44","Facteur","Variable","List","@45",
"ChaineDeCaractaire","ElementList","NewObject","@46","@47","PrametreNew","NewObjectName",
"Rule","@48","@49","RuleCondition","@50","Clause","@51","FactPattern","@52",
"LogicVarSet","@53","LogicVar","FuzzyRuleSet","@54","ListFuzzyRule","@55","@56",
"FuzzyRule","@57","@58","FuzzyCondition","@59","FuzzyClause","@60","FuzzyFactPattern",
"@61","@62", NULL
};
#endif

static const short yyr1[] = {     0,
    92,    92,    93,    93,    93,    94,    95,    94,    96,    97,
    99,    98,   100,   100,   102,   101,   103,   103,   104,   104,
   105,   105,   106,   106,   106,   106,   107,   108,   108,   109,
   109,   110,   112,   111,   113,   111,   114,   114,   114,   114,
   115,   117,   118,   116,   120,   119,   122,   123,   121,   124,
   125,   124,   127,   126,   126,   128,   126,   126,   129,   131,
   132,   133,   130,   135,   134,   136,   137,   136,   138,   139,
   139,   141,   140,   140,   142,   142,   143,   143,   145,   144,
   147,   146,   148,   148,   149,   149,   103,   150,   151,   152,
   150,   153,   153,   154,   155,   155,   155,   155,   156,   156,
   156,   156,   156,   158,   159,   157,   161,   160,   162,   163,
   162,   165,   164,   166,   164,   167,   168,   169,   169,   170,
   171,   171,   173,   172,   175,   176,   174,   177,   177,   177,
   177,   178,   178,   179,   180,   179,   182,   181,   183,   183,
   184,   184,   185,   185,   186,   187,   188,   188,   189,   188,
   190,   188,   188,   191,   188,   192,   188,   193,   188,   194,
   188,   195,   188,   196,   188,   197,   198,   197,   199,   197,
   200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
   200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
   200,   201,   201,   201,   201,   203,   202,   204,   205,   205,
   207,   208,   206,   209,   209,   210,   212,   213,   211,    -1,
   215,   214,   216,   217,   216,   216,    -1,    -1,   219,   218,
   218,   220,   221,   220,   222,   224,   223,   226,   225,   227,
   225,   229,   230,   228,   232,   231,   233,   234,   233,   236,
   237,   235,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1
};

static const short yyr2[] = {     0,
     1,     2,     4,     3,     1,     4,     0,     6,     1,     2,
     0,     4,     2,     2,     0,     7,     1,     3,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     4,     3,     1,
     2,     3,     0,     3,     0,     3,     1,     1,     1,     1,
     3,     0,     0,     6,     0,     4,     0,     0,     6,     1,
     0,     3,     0,     3,     1,     0,     3,     1,     2,     0,
     0,     0,    10,     0,     6,     1,     0,     3,     2,     1,
     2,     0,     5,     3,     1,     1,     1,     1,     0,     3,
     0,     4,     1,     3,     1,     3,     2,     1,     0,     0,
     6,     1,     3,     1,     1,     1,     2,     2,     1,     2,
     2,     2,     2,     0,     0,     9,     0,     4,     1,     0,
     4,     0,     5,     0,     4,     1,     1,     1,     3,     2,
     1,     1,     0,     5,     0,     0,     9,     1,     2,     2,
     3,     1,     1,     2,     0,     5,     0,     4,     4,     6,
     1,     3,     1,     1,     4,     1,     1,     2,     0,     4,
     0,     4,     2,     0,     4,     0,     4,     0,     4,     0,
     4,     0,     4,     0,     4,     1,     0,     4,     0,     4,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     3,     3,     0,     4,     1,     1,     2,
     0,     0,     6,     2,     1,     1,     0,     0,     6,     1,
     0,     3,     1,     0,     4,     3,     2,     2,     0,     6,
     2,     1,     0,     3,     2,     0,     4,     0,     3,     0,
     3,     0,     0,     6,     0,     3,     1,     0,     4,     0,
     0,     7,     0,     0,     0,     7,     1,     0,     3,     1
};

static const short yydefact[] = {     0,
     0,     9,     0,     1,     5,     0,     0,     0,    11,     2,
     0,     0,     0,    10,     0,     7,    75,     4,     0,    76,
     0,     0,    45,     0,     0,     0,    19,    21,    23,    27,
    25,    26,    30,    37,    38,    40,    39,    24,    70,     0,
    14,     0,    13,    12,     6,     0,     0,    42,    47,     0,
     0,     0,     3,    22,    31,    71,    79,     0,    77,    78,
     0,   180,   192,     0,   196,     0,     0,    99,     0,   198,
   179,   171,   172,   173,   174,   176,   177,   175,   178,     0,
     0,     0,     0,     0,   201,     0,    95,     0,     0,   182,
   109,     0,     0,    96,   122,   121,   149,   147,   166,   181,
   184,   186,   185,   189,   188,   187,   191,   190,   137,   128,
     0,    29,     0,     0,   132,     0,   133,     0,     0,     0,
    41,    33,    32,     0,     0,    74,    72,   146,    15,     0,
   192,   182,   149,   181,     0,   153,   148,   221,     0,   120,
   149,   211,   207,   235,   232,   226,     0,     8,    97,    98,
   101,   100,   102,   110,   112,   103,   123,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   130,    28,     0,   129,     0,   134,     0,     0,
    43,    51,    53,    55,    56,    58,    48,    46,     0,     0,
    80,    17,    85,     0,    83,     0,     0,     0,     0,   183,
   199,     0,   219,   125,     0,     0,     0,     0,     0,   206,
     0,   193,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   194,   195,     0,     0,
     0,   131,   135,   221,     0,     0,     0,     0,     0,     0,
     0,    34,    36,     0,     0,    82,     0,     0,    94,    87,
    92,    73,     0,     0,   197,   200,     0,     0,     0,   212,
   213,   208,     0,   236,   237,   233,   227,   228,   202,   111,
     0,     0,   118,   117,   115,     0,   150,   152,   155,   157,
   159,   161,   163,   165,   168,   170,   108,   138,     0,   139,
     0,   219,    60,    44,    52,    54,    57,    49,     0,    18,
    84,    86,     0,     0,     0,   223,     0,     0,   221,     0,
     0,     0,   240,     0,     0,     0,     0,     0,     0,   113,
   124,   143,     0,   141,   144,     0,   136,     0,     0,    90,
    93,    16,     0,     0,   220,   126,   216,     0,   209,     0,
     0,   234,   229,   231,   205,     0,   203,   119,     0,   140,
     0,     0,     0,    66,    61,     0,   105,   224,     0,   215,
     0,   239,   204,   142,     0,    69,    65,     0,     0,    91,
     0,     0,   241,   145,    68,    62,   106,   127,     0,     0,
   242,     0,    63,     0,     0
};

static const short yydefgoto[] = {     3,
     4,     5,    46,     6,     7,     8,    15,    14,    43,   198,
   193,    26,    27,    28,    29,    30,    31,    32,   123,   189,
   190,    33,    34,    35,   118,   237,    36,    50,    37,   119,
   241,   181,   238,   182,   239,   240,   183,   184,   329,   369,
   380,   185,   328,   353,   368,   354,    38,    39,   197,    40,
    58,    59,   124,    60,   125,   194,   195,   196,   244,   356,
   250,   251,   186,    87,    88,   130,   371,    89,   170,   132,
   213,    91,   214,   215,    92,   275,   272,    93,    94,    95,
   216,    96,   258,   359,   113,   114,   115,   291,   116,   171,
   117,   323,   324,   325,   129,    97,   158,   159,   160,   161,
   162,   163,   164,   165,    98,   166,   167,    99,   134,   101,
   135,   102,   202,   103,   147,   318,   347,   211,   104,   206,
   312,   143,   205,   260,   311,   105,   257,   307,   334,   106,
   107,   209,   267,   316,   317,   108,   208,   315,   145,   207,
   264,   314,   265,   340,   379
};

static const short yypact[] = {   -28,
    11,-32768,    17,-32768,-32768,    52,    78,    56,-32768,-32768,
   107,   101,     5,-32768,    93,    59,-32768,-32768,   111,-32768,
   116,   118,-32768,   120,   135,   146,-32768,   197,-32768,-32768,
-32768,-32768,   -22,-32768,-32768,-32768,-32768,     4,-32768,   156,
-32768,   159,-32768,-32768,-32768,   501,    18,-32768,-32768,   144,
   143,   185,-32768,-32768,-32768,-32768,   186,    57,-32768,-32768,
   167,-32768,   180,   668,-32768,   682,   682,-32768,    33,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   668,
   668,   136,   145,   207,-32768,   201,-32768,   184,   187,    36,
-32768,   214,   189,-32768,-32768,-32768,   182,    88,   191,    20,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   206,-32768,    19,   194,-32768,    42,-32768,   265,   265,   223,
-32768,   226,-32768,   227,   230,-32768,   501,-32768,-32768,   220,
-32768,   217,   149,    12,   668,    88,    88,-32768,   246,   302,
   359,-32768,-32768,-32768,-32768,-32768,   247,-32768,-32768,-32768,
-32768,-32768,-32768,   251,   250,-32768,-32768,   231,   233,   240,
   252,   248,   255,   249,   262,   257,   258,   272,   273,   268,
   276,   167,-32768,-32768,   263,-32768,   203,-32768,   142,   290,
-32768,   239,-32768,-32768,-32768,   501,-32768,-32768,   266,   185,
-32768,    32,   286,    34,   280,   317,   253,   310,   312,-32768,
   302,   558,-32768,-32768,   299,   261,   330,   267,   259,-32768,
   333,-32768,   682,   668,   335,   501,   682,   682,   682,   682,
   682,   682,   682,   682,   682,   682,-32768,-32768,   668,   308,
   113,-32768,-32768,   316,   345,   346,   281,   265,   320,   324,
   285,-32768,-32768,   342,   355,-32768,   230,   230,-32768,   348,
-32768,-32768,   230,   313,-32768,   302,   668,   501,   168,-32768,
   -10,-32768,   374,-32768,   291,-32768,-32768,   301,-32768,   350,
   191,    53,   302,-32768,-32768,   327,    88,    88,    88,    88,
    88,    88,    88,    88,   191,   191,   302,-32768,   737,-32768,
   369,   353,-32768,-32768,-32768,-32768,-32768,-32768,   380,-32768,
   286,   286,   317,   121,   386,   105,   389,   385,-32768,   299,
   303,   299,-32768,   307,   330,   392,   259,   613,   668,-32768,
-32768,    16,   128,-32768,-32768,   365,-32768,   367,   318,-32768,
-32768,-32768,   399,   668,-32768,-32768,-32768,   299,-32768,   321,
   330,-32768,-32768,-32768,-32768,    64,-32768,   302,   737,-32768,
    10,   405,   404,   377,-32768,   400,-32768,-32768,   501,-32768,
   409,-32768,-32768,-32768,   682,-32768,-32768,   367,   413,-32768,
   424,   443,-32768,   191,-32768,-32768,-32768,-32768,   425,   426,
-32768,   402,-32768,   435,-32768
};

static const short yypgoto[] = {-32768,
   433,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -140,-32768,   410,-32768,-32768,-32768,   406,-32768,   256,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -113,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    69,-32768,-32768,-32768,   403,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   137,   -45,   -83,-32768,-32768,-32768,-32768,-32768,   -46,
-32768,   229,-32768,-32768,-32768,   171,   127,-32768,   -81,-32768,
-32768,-32768,-32768,-32768,-32768,   337,-32768,-32768,-32768,-32768,
-32768,-32768,   102,-32768,   282,   -53,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -37,-32768,-32768,  -205,   -44,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  -279,-32768,  -201,-32768,   122,-32768,-32768,
-32768,-32768,   138,-32768,-32768,  -202,-32768,-32768,-32768,-32768,
  -263,-32768,-32768,-32768,-32768
};


#define	YYLAST		826


static const short yytable[] = {    90,
    86,   100,   149,   261,   150,   187,   268,   271,    17,    41,
   133,    90,   127,   100,   227,     9,   384,  -116,     1,   285,
   286,  -192,   109,   109,     2,  -116,   140,   141,   136,   137,
   337,  -107,   339,    21,    22,    23,   -88,   138,   139,    90,
   246,   100,   365,   149,   169,   150,   247,   -89,  -192,   110,
   173,   342,   169,    42,   177,    20,   178,    11,   360,   274,
    62,    63,    64,     1,    24,   319,    65,   153,   154,     2,
   363,    90,    90,   100,   100,   310,   319,   362,    66,  -214,
    90,   201,   100,   326,    67,    12,   111,   111,    68,   112,
   174,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,   149,    13,   150,    17,   301,   302,   261,    18,
   261,  -222,   304,    16,   268,    80,  -167,  -169,  -164,  -158,
  -156,  -160,  -162,  -154,   295,   289,    44,   290,   126,    81,
    45,  -149,  -151,   245,    82,   332,   261,    83,    84,    90,
   349,   100,   350,   326,    47,    85,   234,   235,   256,    48,
    19,    49,    20,    51,    53,   200,    21,    22,    23,   374,
   273,    57,  -164,  -158,  -156,  -160,  -162,  -154,    52,    90,
   276,   100,   309,   139,    61,   287,  -151,   120,   121,   277,
   278,   279,   280,   281,   282,   283,   284,    24,    25,   122,
   -81,    90,   149,   100,   150,  -164,  -158,  -156,  -160,  -162,
  -154,    17,   128,   306,    62,    63,    64,  -104,   142,  -151,
    65,    90,   308,   100,   146,   151,   157,   144,   152,   155,
   156,   172,    66,   168,   149,   176,   150,   188,    67,    90,
   -35,   100,    68,   191,   192,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    19,   199,    20,   154,
   203,   210,    21,    22,    23,   212,  -114,   217,   219,    80,
   218,    90,   221,   100,   273,   348,   223,   220,    62,    63,
    64,   222,   148,    81,    65,   224,   227,   228,    82,   229,
   306,    83,    84,    24,    25,   225,    66,   226,   149,    85,
   150,   230,    67,   233,   232,   236,    68,   242,   245,   179,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
   -50,   248,    90,   372,   100,  -164,  -158,  -156,  -160,  -162,
  -154,   249,   253,    80,   252,    90,   254,   100,  -149,  -151,
    62,    63,    64,   259,   262,   263,    65,    81,   269,    83,
   266,   274,    82,   288,   180,    83,    84,   -59,    66,   292,
   293,   296,   294,    85,    67,   297,   298,   299,    68,   300,
   303,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,  -164,  -158,  -156,  -160,  -162,  -154,   313,   305,
  -238,  -230,  -109,   327,   330,    80,  -151,   -64,    62,    63,
    64,   333,   338,   204,    65,   335,   341,   351,   321,    81,
   343,   352,   355,   357,    82,   361,    66,    83,    84,   366,
   367,   -67,    67,   373,   370,    85,    68,   376,   336,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
   377,   381,   382,   383,   385,    10,   375,    54,    55,   331,
    56,   270,   320,    80,   346,   243,    62,    63,    64,   175,
   364,     0,    65,   231,   344,   358,     0,    81,     0,     0,
     0,     0,    82,     0,    66,    83,    84,     0,     0,     0,
    67,     0,     0,    85,    68,     0,     0,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    80,     0,     0,    62,    63,    64,     0,     0,     0,
    65,     0,     0,     0,   378,    81,     0,     0,     0,     0,
    82,     0,    66,    83,    84,     0,     0,     0,    67,     0,
     0,    85,    68,     0,     0,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    80,
     0,    62,   131,    64,     0,     0,     0,    65,   255,     0,
     0,     0,     0,    81,     0,     0,     0,     0,    82,    66,
     0,    83,    84,     0,     0,    67,     0,     0,     0,    85,
     0,     0,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    62,   131,    64,   345,
     0,     0,    65,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    66,    82,     0,     0,    83,    84,
    67,     0,     0,     0,     0,     0,    85,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    62,   131,    64,     0,     0,     0,    65,     0,     0,
     0,     0,     0,     0,     0,    62,   131,    64,     0,    66,
    82,    65,     0,    83,    84,    67,     0,     0,     0,     0,
     0,    85,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,     0,     0,     0,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    62,   322,    64,     0,     0,    82,    65,     0,    83,    84,
     0,     0,     0,     0,     0,     0,    85,     0,     0,    82,
     0,     0,    83,    84,     0,     0,     0,     0,     0,     0,
    85,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    82,     0,     0,    83,    84,     0,
     0,     0,     0,     0,     0,    85
};

static const short yycheck[] = {    46,
    46,    46,    86,   205,    86,   119,   209,   213,     5,     5,
    64,    58,    58,    58,     5,     5,     0,     6,    47,   225,
   226,     6,     5,     5,    53,     6,    80,    81,    66,    67,
   310,    12,   312,    56,    57,    58,     5,     5,     6,    86,
     7,    86,    33,   127,    33,   127,    13,    16,    33,    32,
    32,   315,    33,    49,    13,    52,    15,     6,   338,     7,
     4,     5,     6,    47,    87,    13,    10,    32,    33,    53,
     7,   118,   119,   118,   119,    86,    13,   341,    22,    90,
   127,   135,   127,   289,    28,     8,    69,    69,    32,    72,
    72,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,   186,    48,   186,     5,   247,   248,   310,     9,
   312,     7,   253,     7,   317,    59,    29,    30,    14,    15,
    16,    17,    18,    19,   238,    13,    34,    15,    72,    73,
    72,    27,    28,    13,    78,    15,   338,    81,    82,   186,
    13,   186,    15,   349,    34,    89,     5,     6,   202,    34,
    50,    34,    52,    34,     9,     7,    56,    57,    58,   365,
   214,     6,    14,    15,    16,    17,    18,    19,    34,   216,
   216,   216,     5,     6,    16,   229,    28,    34,    36,   217,
   218,   219,   220,   221,   222,   223,   224,    87,    88,     5,
     5,   238,   276,   238,   276,    14,    15,    16,    17,    18,
    19,     5,    36,   257,     4,     5,     6,    28,    73,    28,
    10,   258,   258,   258,     8,    32,    35,    73,    32,     6,
    32,    16,    22,    33,   308,    32,   308,     5,    28,   276,
     5,   276,    32,     7,     5,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    50,    28,    52,    33,
     5,     5,    56,    57,    58,     5,     7,    27,    19,    59,
    28,   308,    15,   308,   318,   319,    18,    16,     4,     5,
     6,    17,    72,    73,    10,    14,     5,     5,    78,    12,
   334,    81,    82,    87,    88,    29,    22,    30,   372,    89,
   372,    16,    28,    91,    32,     6,    32,    32,    13,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    72,    32,   359,   359,   359,    14,    15,    16,    17,    18,
    19,     5,    13,    59,    72,   372,    15,   372,    27,    28,
     4,     5,     6,    35,    74,     6,    10,    73,     6,    81,
    74,     7,    78,    36,    80,    81,    82,    32,    22,     5,
     5,    32,    72,    89,    28,    32,    72,    16,    32,     5,
    13,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    14,    15,    16,    17,    18,    19,     5,    67,
    90,    81,    33,    15,     5,    59,    28,    35,     4,     5,
     6,     6,    90,    35,    10,     7,    90,    33,    72,    73,
     9,    35,    85,     5,    78,    85,    22,    81,    82,     5,
     7,    35,    28,     5,    15,    89,    32,     5,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
     7,     7,     7,    32,     0,     3,   368,    28,    33,   303,
    38,   213,   272,    59,   318,   190,     4,     5,     6,   113,
   349,    -1,    10,   172,   317,   334,    -1,    73,    -1,    -1,
    -1,    -1,    78,    -1,    22,    81,    82,    -1,    -1,    -1,
    28,    -1,    -1,    89,    32,    -1,    -1,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    -1,     4,     5,     6,    -1,    -1,    -1,
    10,    -1,    -1,    -1,    72,    73,    -1,    -1,    -1,    -1,
    78,    -1,    22,    81,    82,    -1,    -1,    -1,    28,    -1,
    -1,    89,    32,    -1,    -1,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
    -1,     4,     5,     6,    -1,    -1,    -1,    10,    11,    -1,
    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    78,    22,
    -1,    81,    82,    -1,    -1,    28,    -1,    -1,    -1,    89,
    -1,    -1,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,     6,     7,
    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    22,    78,    -1,    -1,    81,    82,
    28,    -1,    -1,    -1,    -1,    -1,    89,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     4,     5,     6,    -1,    -1,    -1,    10,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     4,     5,     6,    -1,    22,
    78,    10,    -1,    81,    82,    28,    -1,    -1,    -1,    -1,
    -1,    89,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    -1,    -1,    -1,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     4,     5,     6,    -1,    -1,    78,    10,    -1,    81,    82,
    -1,    -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,    78,
    -1,    -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,
    89,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    78,    -1,    -1,    81,    82,    -1,
    -1,    -1,    -1,    -1,    -1,    89
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 1024
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
CCompilateur::yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 52 "grammar.yacc"
{
								
							;
    break;}
case 3:
#line 62 "grammar.yacc"
{						
								if(!computContraint()) return false;
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 4:
#line 69 "grammar.yacc"
{
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 7:
#line 81 "grammar.yacc"
{
								initMessageManager();
							;
    break;}
case 8:
#line 86 "grammar.yacc"
{
								if(!endMessageManager()) return 0;
							;
    break;}
case 9:
#line 92 "grammar.yacc"
{
								if(_ResultCompile != NULL) 
								{
									yyerror("an MessageManager block had all ready declared");
									return 0;
								}								
							;
    break;}
case 11:
#line 105 "grammar.yacc"
{
								NLAIAGENT::CStringVarName interfName(LastyyText[1]);																																
								try
								{	
									NLAIC::CIdentType id = getTypeOfClass(interfName);
									_SelfClass.push((IClassInterpret *)(((CClassInterpretFactory *)id.getFactory())->getClass()->newInstance()));
									((IClassInterpret *)_SelfClass.get())->setInheritanceName(interfName);
								}
								catch(NLAIE::IException &a)
								{									
									yyerror((char *)a.what());
									return 0;
								}
							;
    break;}
case 14:
#line 124 "grammar.yacc"
{
								try
								{
									NLAIC::CIdentType id(LastyyText[1]);
									char text[1024*4];
									sprintf(text,"class '%s' all ready exist",LastyyText[1]);
									yyerror(text);
									return 0;
								}
								catch(NLAIE::IException &)
								{
									( (IClassInterpret *) _SelfClass.get() )->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
									( (IClassInterpret *) _SelfClass.get() )->buildVTable();
									RegisterClass();
								}
							;
    break;}
case 15:
#line 143 "grammar.yacc"
{
								((IClassInterpret *)_SelfClass.get())->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
							;
    break;}
case 25:
#line 162 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->buildLogicTables();
								}
							;
    break;}
case 33:
#line 188 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[1] ) );
							;
    break;}
case 35:
#line 198 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[0] ) );
							;
    break;}
case 41:
#line 219 "grammar.yacc"
{
								char *txt1 = LastyyText[0];
								char *txt2 = LastyyText[1];
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setComment( LastyyText[1] );
								}


							;
    break;}
case 42:
#line 234 "grammar.yacc"
{
								initParam()
							;
    break;}
case 43:
#line 238 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderCond( _LastAsserts.front(), _LastLogicParams.front() );
										_LastAsserts.pop_front();
										_LastLogicParams.pop_front();
									}

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
							;
    break;}
case 45:
#line 262 "grammar.yacc"
{
								if ( !classIsAnOperator() )
								 	return 0;
							;
    break;}
case 46:
#line 269 "grammar.yacc"
{
								if ( _Goal ) 
								{
									_Goal->release();
									_Goal = NULL;
								}
								
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									NLAIAGENT::CStringVarName goal_name( LastyyText[1] );
									op_class->setGoal( (NLAIAGENT::CStringVarName &) goal_name );
								}
							;
    break;}
case 47:
#line 289 "grammar.yacc"
{
								initParam()
							;
    break;}
case 48:
#line 293 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderConc( _LastAsserts.front(), _LastLogicParams.front() );
										_LastAsserts.pop_front();
										_LastLogicParams.pop_front();
									}

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeConc( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
							;
    break;}
case 50:
#line 317 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 51:
#line 321 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 52:
#line 325 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 53:
#line 332 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 55:
#line 337 "grammar.yacc"
{

								if ( classIsAnOperator() )
								{

									NLAIAGENT::CStringVarName *vvar = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									NLAIAGENT::CStringVarName *vset = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->addFuzzyCond(vvar, vset);
								}
							;
    break;}
case 56:
#line 353 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 58:
#line 358 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
//										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_LastCodeBranche.push_back( (IOpCode *) listCode );
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}							

/*								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}				
*/				

							;
    break;}
case 59:
#line 419 "grammar.yacc"
{
							char *param_name = LastyyText[1];
							_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
						;
    break;}
case 60:
#line 428 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 61:
#line 433 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 62:
#line 437 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 64:
#line 447 "grammar.yacc"
{
							const char *assert_name = LastyyText[1];
							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );
						;
    break;}
case 65:
#line 453 "grammar.yacc"
{
								for (int i = 0; i < 20; i++); // To put breakpoints for debugging...
						;
    break;}
case 66:
#line 460 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 67:
#line 464 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 69:
#line 471 "grammar.yacc"
{
							char *var_name = LastyyText[1];
							_LastLogicParams.back().push_back( new NLAIAGENT::CStringVarName( var_name ) );
						;
    break;}
case 72:
#line 484 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}

								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}								
								if(!caseRunMsg()) return false;
							;
    break;}
case 74:
#line 543 "grammar.yacc"
{	
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}
								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}
								if(!caseRunMsg()) return false;

							;
    break;}
case 75:
#line 603 "grammar.yacc"
{				
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 76:
#line 611 "grammar.yacc"
{
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 79:
#line 625 "grammar.yacc"
{								
								initParam();
							;
    break;}
case 80:
#line 629 "grammar.yacc"
{
								if(!registerMethod()) return false;
							;
    break;}
case 81:
#line 635 "grammar.yacc"
{
								initParam();
							;
    break;}
case 82:
#line 639 "grammar.yacc"
{
								registerMethod();
							;
    break;}
case 88:
#line 657 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[0]);
								_BaseObjectDef = false;
							;
    break;}
case 89:
#line 662 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 90:
#line 667 "grammar.yacc"
{
								_LastBaseObjectDef = NLAIAGENT::CStringVarName(LastyyText[1]);
								_BaseObjectDef = true;

							;
    break;}
case 94:
#line 681 "grammar.yacc"
{
								if(!setParamVarName()) return 0;
							;
    break;}
case 102:
#line 697 "grammar.yacc"
{
								_LastStringParam.back()->release();
								_LastStringParam.pop_back();
								_Param.back()->release();
								_Param.pop_back();								
							;
    break;}
case 103:
#line 705 "grammar.yacc"
{
								_LastBloc->addCode((new CHaltOpCode));
							;
    break;}
case 104:
#line 711 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 105:
#line 719 "grammar.yacc"
{					
								NLAIAGENT::CStringVarName x(LastyyText[1]);			
								if(!castVariable(_LastString,x)) return false;
							;
    break;}
case 107:
#line 726 "grammar.yacc"
{								
								std::list<NLAISCRIPT::CStringType>::iterator i = _LasVarStr.begin();
								_LasAffectationVarStr.clear();
								while(i != _LasVarStr.end())
								{
									_LasAffectationVarStr.push_back(*i++);
								}												
							;
    break;}
case 108:
#line 736 "grammar.yacc"
{
								if(!affectation()) 
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 110:
#line 749 "grammar.yacc"
{
								
							;
    break;}
case 112:
#line 757 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 114:
#line 765 "grammar.yacc"
{								
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 116:
#line 775 "grammar.yacc"
{
								nameMethodeProcessing();
							;
    break;}
case 117:
#line 782 "grammar.yacc"
{	
								_ExpressionType = _ExpressionTypeTmp.back();
								_ExpressionTypeTmp.pop_back();								
								if(!callFunction())
								{
									_FromStack.pop_back();
									return 0;	
								}
								_FromStack.pop_back();
							;
    break;}
case 118:
#line 795 "grammar.yacc"
{
								pushParamExpression();								
							;
    break;}
case 119:
#line 800 "grammar.yacc"
{
								pushParamExpression();
							;
    break;}
case 120:
#line 807 "grammar.yacc"
{
								if(!typeOfMethod()) return false;
							;
    break;}
case 123:
#line 818 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 124:
#line 823 "grammar.yacc"
{
								interrogationEnd();
							;
    break;}
case 125:
#line 831 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 126:
#line 836 "grammar.yacc"
{								
								ifInterrogationPoint()
							;
    break;}
case 127:
#line 841 "grammar.yacc"
{
								ifInterrogationEnd();
							;
    break;}
case 135:
#line 859 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Local = true;								
							;
    break;}
case 137:
#line 867 "grammar.yacc"
{								
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
								_LastRegistered = ((IClassInterpret *)_SelfClass.get())->registerComponent(_LastString);
							;
    break;}
case 138:
#line 873 "grammar.yacc"
{
								if(((IClassInterpret *)_SelfClass.get())->getComponent(NLAIAGENT::CStringVarName(LastyyText[1])) == NULL)
								{
									CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);
									c->ObjectName = new NLAIAGENT::CStringVarName(LastyyText[1]);									
								}
								else
								{
									yyerror("variable all ready declared in the Register components");
									return 0;			
								}
							;
    break;}
case 147:
#line 905 "grammar.yacc"
{	
								if(_FacteurEval)
								{								
									allocExpression(NULL);
									setTypeExpression();
								}
							;
    break;}
case 148:
#line 913 "grammar.yacc"
{								
								allocExpression(new CNegOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opAdd,"(-)");
								
							;
    break;}
case 149:
#line 919 "grammar.yacc"
{	
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opAdd))
								{
									yyerror("erreur sémantique l'operateur + n'est pas supporté par cette expression");
									return 0;
								}*/								
								setTypeExpressionG();
								allocExpression(NULL);
								
								
							;
    break;}
case 150:
#line 931 "grammar.yacc"
{									
								allocExpression(new CAddOpCode,true);		
								setTypeExpressionD(NLAIC::CTypeOfOperator::opAdd,"+");	
							;
    break;}
case 151:
#line 936 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSub))
								{
									yyerror("erreur sémantique l'operateur - n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);
								
							;
    break;}
case 152:
#line 947 "grammar.yacc"
{								
								allocExpression(new CSubOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSub,"-");							
							;
    break;}
case 153:
#line 952 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opNot))
								{
									yyerror("erreur sémantique l'operateur ! n'est pas supporté par cette expression");
									return 0;
								}*/								
								allocExpression(new CNotOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opNot,"!");
								
							;
    break;}
case 154:
#line 963 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiff))
								{
									yyerror("erreur sémantique l'operateur != n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 155:
#line 973 "grammar.yacc"
{								
								allocExpression(new CDiffOpCode,true);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiff,"!=");
								
							;
    break;}
case 156:
#line 979 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInf))
								{
									yyerror("erreur sémantique l'operateur < n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
								
							;
    break;}
case 157:
#line 990 "grammar.yacc"
{								
								allocExpression(new CInfOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInf,"<");							
							;
    break;}
case 158:
#line 995 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSup))
								{
									yyerror("erreur sémantique l'operateur > n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);								
							;
    break;}
case 159:
#line 1005 "grammar.yacc"
{								
								allocExpression(new CSupOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSup,">");							
							;
    break;}
case 160:
#line 1010 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSupEq))
								{
									yyerror("erreur sémantique l'operateur >= n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
							;
    break;}
case 161:
#line 1020 "grammar.yacc"
{								
								allocExpression(new CSupEqOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSupEq,">=");
							;
    break;}
case 162:
#line 1025 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInfEq))
								{
									yyerror("erreur sémantique l'operateur <= n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 163:
#line 1035 "grammar.yacc"
{								
								allocExpression(new CInfEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInfEq,"<=");
							;
    break;}
case 164:
#line 1040 "grammar.yacc"
{
								setTypeExpressionG();	
								allocExpression(NULL);														
							;
    break;}
case 165:
#line 1045 "grammar.yacc"
{								
								allocExpression(new CEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opEq,"==");

							;
    break;}
case 166:
#line 1053 "grammar.yacc"
{
								_FacteurEval = true;	
							;
    break;}
case 167:
#line 1057 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opMul))
								{
									yyerror("erreur sémantique l'operateur * n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();								
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 168:
#line 1068 "grammar.yacc"
{									
								setTypeExpressionD(NLAIC::CTypeOfOperator::opMul,"+");
								allocExpression(new CMulOpCode,false);
								_FacteurEval = false;
							;
    break;}
case 169:
#line 1074 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiv))
								{
									yyerror("erreur sémantique l'operateur / n'est pas supporté par cette expression");
									return 0;
								}*/
											
								setTypeExpressionG();
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 170:
#line 1086 "grammar.yacc"
{																
								allocExpression(new CDivOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiv,"/");
								_FacteurEval = false;	
							;
    break;}
case 171:
#line 1095 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PExec);
							;
    break;}
case 172:
#line 1100 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAchieve);
							;
    break;}
case 173:
#line 1105 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAsk);
							;
    break;}
case 174:
#line 1110 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PBreak);
							;
    break;}
case 175:
#line 1115 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PError);
							;
    break;}
case 176:
#line 1120 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PTell);
							;
    break;}
case 177:
#line 1125 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PKill);
							;
    break;}
case 178:
#line 1130 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PEven);
							;
    break;}
case 179:
#line 1135 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVarNill();
							;
    break;}
case 180:
#line 1141 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVar();
							;
    break;}
case 181:
#line 1146 "grammar.yacc"
{								
								_IsFacteurIsExpression = false;
								if(!processingVar())
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 182:
#line 1156 "grammar.yacc"
{								
								_IsFacteurIsExpression = true;								
								setMethodVar();
							;
    break;}
case 183:
#line 1161 "grammar.yacc"
{							
								_IsFacteurIsExpression = true;
							;
    break;}
case 184:
#line 1165 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 185:
#line 1169 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 186:
#line 1173 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 187:
#line 1177 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 188:
#line 1181 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 189:
#line 1185 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 190:
#line 1189 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 191:
#line 1193 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 192:
#line 1200 "grammar.yacc"
{
								_LasVarStr.clear();
								_LasVarStr.push_back(NLAISCRIPT::CStringType(LastyyText[1]));
								_LastFact.VarType = varTypeUndef;
								_IsFacteurIsExpression = false;	
								_FromStack.push_back(false);							
							;
    break;}
case 193:
#line 1209 "grammar.yacc"
{
								_LasVarStr.clear();
								cleanTypeList();
								_LasVarStr.push_back(LastyyText[1]);
								setMethodVar();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);

							;
    break;}
case 194:
#line 1221 "grammar.yacc"
{	
								cleanTypeList();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);
							;
    break;}
case 195:
#line 1230 "grammar.yacc"
{									
								if(_IsFacteurIsExpression)
								{
									IOpType *c = _TypeList.back();
									_TypeList.pop_back();
									c->release();
									_TypeList.push_back(_FlotingExpressionType);
									_FlotingExpressionType->incRef();
									_LasVarStr.clear();
									_FromStack.pop_back();
								}
								_LasVarStr.push_back(LastyyText[1]);
							;
    break;}
case 196:
#line 1247 "grammar.yacc"
{									
								setListVar();
							;
    break;}
case 198:
#line 1255 "grammar.yacc"
{									
								setChaineVar();
							;
    break;}
case 199:
#line 1261 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));								
							;
    break;}
case 200:
#line 1265 "grammar.yacc"
{								
								_LastBloc->addCode((new CAddOpCode));
							;
    break;}
case 201:
#line 1271 "grammar.yacc"
{
								_LastStringParam.push_back(new NLAIAGENT::CGroupType());								

							;
    break;}
case 202:
#line 1276 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
							;
    break;}
case 204:
#line 1282 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 205:
#line 1286 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 206:
#line 1293 "grammar.yacc"
{							
								_LastStringParam.back()->cpy(NLAIAGENT::CStringType(NLAIAGENT::CStringVarName(LastyyText[1])));
								_Param.push_back(new CParam);								
							;
    break;}
case 207:
#line 1300 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );				
						;
    break;}
case 208:
#line 1305 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 209:
#line 1309 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
//							_LastBloc->addCode( new CLdbNewOpCode(CRule()) );		
							setStackVar( CVar::IdVar );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tUndef);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::Rule::idRule;
						;
    break;}
case 211:
#line 1324 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 212:
#line 1328 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbNewOpCode( CClause() ) );
							//_LastBloc->addCode( new CAddOpCode() );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::CClause::idCClause;
						;
    break;}
case 213:
#line 1340 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 214:
#line 1344 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 215:
#line 1348 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );							
						;
    break;}
case 216:
#line 1353 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );													
						;
    break;}
case 217:
#line 1359 "grammar.yacc"
{
							_LastBloc->addCode( new CTellOpCode() );
						;
    break;}
case 218:
#line 1365 "grammar.yacc"
{
							/*char buf[256];
							strcpy(buf, LastyyText[1]);
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CBoolType( NLAIAGENT::CStringVarName(LastyyText[1]) ) ) );
							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
							_LastFact.varType = varForFunc;
							_LastFact.isUsed = false;
							_lastIdentType = NLAIAGENT::CVar::idBoolType;
							*/
						;
    break;}
case 219:
#line 1378 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
							char *txt = LastyyText[1];
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode(new CAddOpCode() );
							//_LastAssert = NLAIAGENT::CStringVarName(LastyyText[1]);
						;
    break;}
case 220:
#line 1386 "grammar.yacc"
{
/*							setStackVar( CFactPattern::IdFactPattern );
							IBaseAssert *my_assert = _FactBase->addAssert( _LastAssert, _NbLogicParams );
							_NbLogicParams = 0;
							_LastBloc->addCode(new CLdbNewOpCode( CFactPattern( my_assert ) ) );
							*/
						;
    break;}
case 221:
#line 1396 "grammar.yacc"
{
						;
    break;}
case 222:
#line 1403 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 223:
#line 1409 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 225:
#line 1418 "grammar.yacc"
{
							char buf[256];
							strcpy(buf, LastyyText[1]);
							setStackVar( CVar::IdVar );
							_LastBloc->addCode( new CLdbOpCode(CVar( LastyyText[1] )) );
						;
    break;}
case 226:
#line 1428 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
						;
    break;}
case 228:
#line 1435 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 229:
#line 1439 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 230:
#line 1443 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 231:
#line 1447 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 232:
#line 1453 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );
						;
    break;}
case 233:
#line 1458 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 234:
#line 1462 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyRule() ) );		
							setStackVar(CFuzzyRule::IdFuzzyRule);
						;
    break;}
case 235:
#line 1470 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 236:
#line 1474 "grammar.yacc"
{
							
						;
    break;}
case 237:
#line 1480 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 238:
#line 1484 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 240:
#line 1491 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							// Composant?
							char *txt = LastyyText[0];
/*							_lastFVarIndex = ((IClassInterpret *)_selfClass.get())->getComponentIndex(NLAIAGENT::CStringVarName(LastyyText[1]));
							if (_lastFVarIndex != -1 )
							{
								_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CDigitalType(_lastFVarIndex) ) );
								_LastBloc->addCode( new CAddOpCode() );
							}
							else
							{
								// Variable locale?
							}
							*/

						;
    break;}
case 241:
#line 1509 "grammar.yacc"
{
							_LastString = NLAIAGENT::CStringVarName( LastyyText[0] );
						;
    break;}
case 242:
#line 1513 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++ );
							_LastBloc->addCode(new CLdbNewOpCode( CSimpleFuzzyCond(NULL, NULL) ) );
						;
    break;}
case 243:
#line 1520 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 244:
#line 1524 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 245:
#line 1529 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 246:
#line 1533 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyVar(NLAIAGENT::CStringVarName("Inst"),0,1) ) );
						;
    break;}
case 247:
#line 1540 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 248:
#line 1544 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 250:
#line 1551 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1555 "grammar.yacc"

