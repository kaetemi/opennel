
/*  A Bison parser, made from grammar.yacc
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FIN	258
#define	NOMBRE	259
#define	IDENT	260
#define	PAR_G	261
#define	PAR_D	262
#define	ACCOL_G	263
#define	ACCOL_D	264
#define	CROCHER_G	265
#define	CROCHER_D	266
#define	EG_MATH	267
#define	VIRGULE	268
#define	EG_LOG	269
#define	SUP	270
#define	INF	271
#define	SUP_EG	272
#define	INF_EG	273
#define	DIFF	274
#define	OR_LOG	275
#define	AND_LOG	276
#define	NON_BIN	277
#define	OR_BIN	278
#define	AND_BIN	279
#define	XOR_BIN	280
#define	SCOP	281
#define	PLUS	282
#define	MOINS	283
#define	FOIS	284
#define	DIV	285
#define	POWER	286
#define	POINT_VI	287
#define	LEPOINT	288
#define	POINT_DEUX	289
#define	INTERROGATION	290
#define	CHAINE	291
#define	NILL	292
#define	EXEC	293
#define	ACHIEVE	294
#define	ASK	295
#define	BREAK	296
#define	TELL	297
#define	KILL	298
#define	PERROR	299
#define	EVEN	300
#define	BEGIN_GRAMMAR	301
#define	FROM	302
#define	DEFINE	303
#define	GROUP	304
#define	COMPONENT	305
#define	CONSTRUCTION	306
#define	DESTRUCTION	307
#define	MESSAGE_MANAGER	308
#define	MAESSAGELOOP	309
#define	LOCAL	310
#define	STATIC	311
#define	AS	312
#define	DIGITAL	313
#define	COLLECTOR	314
#define	WITH	315
#define	DO	316
#define	END	317
#define	IF	318
#define	THEN	319
#define	BEGINING	320
#define	END_GRAMMAR	321
#define	NEW	322
#define	TRIGGER	323
#define	PRECONDITION	324
#define	POSTCONDITION	325
#define	GOAL	326
#define	RETURN	327
#define	COMMENT	328
#define	STEPS	329
#define	UPDATEEVERY	330
#define	PRIORITY	331
#define	MSG	332
#define	LOGICVAR	333
#define	RULE	334
#define	IA_ASSERT	335
#define	OR	336
#define	AND	337
#define	FUZZY	338
#define	FUZZYRULE	339
#define	FUZZYRULESET	340
#define	SETS	341
#define	FUZZYVAR	342
#define	FIS	343
#define	COS	344
#define	SIN	345
#define	TAN	346
#define	POW	347
#define	LN	348
#define	LOG	349
#define	FACT	350

#line 1 "grammar.yacc"

#include <malloc.h>
#include <list>
#define PARSER_NO_REDEF_YYTABLE_H_
#include "nel/ai/script/compilateur.h"
#include "nel/ai/script/constraint.h"
#include "nel/ai/script/type_def.h"
#include "nel/ai/script/object_unknown.h"
#include "nel/ai/logic/logic.h"
#include "nel/ai/fuzzy/fuzzy.h"
#include "nel/ai/logic/interpret_object_operator.h"
#include "nel/ai/script/interpret_fsm.h"

using  namespace NLAISCRIPT;
using  namespace NLAILOGIC;
using  namespace NLAIFUZZY;
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		420
#define	YYFLAG		-32768
#define	YYNTBASE	96

#define YYTRANSLATE(x) ((unsigned)(x) <= 350 ? yytranslate[x] : 254)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,    10,    14,    16,    21,    22,    29,    31,
    34,    35,    40,    43,    46,    47,    55,    57,    61,    63,
    65,    67,    70,    72,    74,    76,    78,    80,    85,    89,
    91,    94,    98,    99,   103,   104,   108,   110,   112,   114,
   116,   118,   120,   124,   125,   126,   133,   134,   135,   142,
   143,   149,   150,   156,   157,   158,   165,   167,   168,   172,
   173,   177,   179,   182,   183,   184,   190,   192,   195,   197,
   199,   201,   202,   203,   213,   214,   222,   223,   224,   225,
   236,   237,   244,   246,   247,   251,   254,   256,   259,   260,
   266,   270,   272,   274,   276,   278,   279,   283,   284,   289,
   291,   295,   297,   301,   304,   306,   307,   308,   315,   317,
   321,   323,   325,   327,   330,   333,   335,   338,   341,   344,
   347,   348,   349,   359,   360,   365,   367,   368,   373,   374,
   380,   381,   386,   388,   390,   392,   396,   399,   401,   403,
   404,   410,   411,   412,   422,   424,   427,   430,   434,   436,
   438,   441,   442,   448,   450,   451,   457,   458,   463,   468,
   475,   477,   481,   483,   485,   490,   492,   494,   497,   498,
   503,   504,   509,   512,   513,   518,   519,   524,   525,   530,
   531,   536,   537,   542,   543,   548,   550,   551,   556,   557,
   562,   564,   566,   568,   570,   572,   574,   576,   578,   580,
   582,   584,   586,   590,   592,   594,   596,   598,   600,   602,
   604,   606,   608,   612,   616,   620,   621,   626,   628,   630,
   633,   634,   635,   642,   645,   647,   649,   650,   651,   658,
   660,   661,   665,   667,   668,   673,   677,   680,   683,   684,
   691,   694,   696,   697,   701,   704,   705,   710,   711,   715,
   716,   720,   721,   722,   729,   730,   734,   736,   737,   742,
   743,   744,   752,   753,   754,   755,   763,   765,   766,   770
};

static const short yyrhs[] = {    97,
     0,    96,    97,     0,   101,     8,   108,     9,     0,   101,
     8,     9,     0,    98,     0,   100,     6,     7,    62,     0,
     0,   100,     6,     7,    99,   169,    62,     0,    53,     0,
   102,   104,     0,     0,    47,     5,   103,    34,     0,    48,
   105,     0,    48,     5,     0,     0,    49,    16,   203,   106,
    13,   107,    15,     0,     5,     0,   107,    13,     5,     0,
   109,     0,   108,     0,   110,     0,   110,   109,     0,   111,
     0,   153,     0,   113,     0,   114,     0,   112,     0,    50,
    34,   191,    62,     0,    50,    34,    62,     0,   118,     0,
   118,   113,     0,    74,    34,   115,     0,     0,     5,   116,
    32,     0,     0,     5,   117,   115,     0,   119,     0,   120,
     0,   130,     0,   123,     0,   126,     0,   128,     0,    73,
    34,    36,     0,     0,     0,    69,    34,   121,   133,   122,
    62,     0,     0,     0,    71,   124,    34,   148,   125,    32,
     0,     0,    75,    34,     4,   127,    32,     0,     0,    76,
    34,     4,   129,    32,     0,     0,     0,    70,    34,   131,
   133,   132,    62,     0,   135,     0,     0,   135,   134,   133,
     0,     0,   139,   136,    32,     0,   144,     0,   148,    32,
     0,     0,     0,     8,   137,   169,   138,     9,     0,   141,
     0,    35,     5,     0,    40,     0,    42,     0,    39,     0,
     0,     0,    77,     6,     5,   142,   140,     5,   143,     7,
    32,     0,     0,    40,     6,     5,     0,     8,   169,     9,
     0,     0,     0,     0,    83,     6,     5,   145,    88,   146,
     5,   147,     7,    32,     0,     0,    35,     6,     5,   149,
   150,     7,     0,   152,     0,     0,   152,   151,   150,     0,
    35,     5,     0,   154,     0,   153,   154,     0,     0,   156,
   157,   169,   155,    62,     0,   156,   157,    62,     0,     5,
     0,    52,     0,   158,     0,   160,     0,     0,     6,   159,
     7,     0,     0,     6,   161,   162,     7,     0,   163,     0,
   162,    13,   107,     0,   107,     0,   163,    32,   107,     0,
   164,   167,     0,     5,     0,     0,     0,     5,   165,    16,
     5,   166,    15,     0,   168,     0,   167,    13,   168,     0,
     5,     0,   170,     0,   185,     0,   169,   170,     0,   169,
   185,     0,    32,     0,   174,    32,     0,   171,    32,     0,
   176,    32,     0,   184,    32,     0,     0,     0,     5,   172,
    28,    15,    57,     6,     5,   173,     7,     0,     0,   217,
   175,    12,   204,     0,   178,     0,     0,   176,    33,   177,
   178,     0,     0,   181,     6,   179,   183,   182,     0,     0,
   181,     6,   180,   182,     0,   217,     0,     7,     0,   204,
     0,   183,    13,   204,     0,    72,   204,     0,   188,     0,
   186,     0,     0,   204,    35,   187,   169,    62,     0,     0,
     0,    63,   204,    35,   189,   169,    34,   190,   169,    62,
     0,    32,     0,   192,    32,     0,   191,    32,     0,   191,
   192,    32,     0,   193,     0,   199,     0,   197,    15,     0,
     0,   197,    13,    55,   194,    15,     0,   195,     0,     0,
   197,    13,    56,   196,    15,     0,     0,     5,   198,    16,
    36,     0,    59,    16,   203,    15,     0,    59,    16,   203,
    13,   200,    15,     0,   201,     0,   200,    13,   201,     0,
     5,     0,   202,     0,   216,    33,    33,   216,     0,    36,
     0,   213,     0,    28,   213,     0,     0,   204,   205,    27,
   213,     0,     0,   204,   206,    28,   213,     0,    22,   213,
     0,     0,   204,   207,    19,   213,     0,     0,   204,   208,
    16,   213,     0,     0,   204,   209,    15,   213,     0,     0,
   204,   210,    17,   213,     0,     0,   204,   211,    18,   213,
     0,     0,   204,   212,    14,   213,     0,   216,     0,     0,
   213,   214,    29,   216,     0,     0,   213,   215,    30,   216,
     0,    38,     0,    39,     0,    40,     0,    41,     0,    44,
     0,    42,     0,    43,     0,    45,     0,    37,     0,     4,
     0,   217,     0,   176,     0,     6,   204,     7,     0,   218,
     0,   222,     0,   220,     0,   238,     0,   234,     0,   227,
     0,   244,     0,   239,     0,     5,     0,   176,    33,     5,
     0,   216,    33,     5,     0,   217,    33,     5,     0,     0,
    10,   219,   221,    11,     0,    36,     0,   204,     0,   221,
   204,     0,     0,     0,    67,   223,   226,     6,   224,   225,
     0,   183,     7,     0,     7,     0,     5,     0,     0,     0,
    79,   230,   228,    64,   229,   232,     0,   230,     0,     0,
    63,   231,   232,     0,   234,     0,     0,   234,   233,    82,
   232,     0,   234,    81,   232,     0,    80,   234,     0,    31,
     5,     0,     0,    35,     6,     5,   235,   236,     7,     0,
    35,     5,     0,   204,     0,     0,   204,   237,   236,     0,
    35,     5,     0,     0,    85,     8,   240,   241,     0,     0,
   244,   242,     9,     0,     0,   244,   243,   241,     0,     0,
     0,    84,   247,   245,    64,   246,   249,     0,     0,    63,
   248,   249,     0,   251,     0,     0,   251,   250,    82,   249,
     0,     0,     0,     6,     5,   252,    88,     5,   253,     7,
     0,     0,     0,     0,    87,     0,     5,     0,    86,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   204,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    68,    72,    75,    83,    89,    92,    96,   102,   108,   118,
   121,   137,   139,   140,   159,   162,   165,   166,   168,   169,
   172,   173,   176,   177,   178,   186,   189,   192,   193,   196,
   197,   200,   204,   214,   214,   224,   226,   227,   228,   229,
   230,   231,   236,   252,   259,   273,   276,   282,   304,   306,
   327,   329,   350,   355,   362,   385,   387,   393,   400,   408,
   415,   415,   430,   445,   456,   513,   513,   535,   543,   547,
   551,   561,   568,   573,   577,   583,   588,   595,   599,   603,
   606,   615,   619,   623,   628,   630,   638,   639,   642,   701,
   701,   762,   770,   780,   781,   784,   789,   794,   798,   804,
   805,   808,   809,   812,   816,   821,   826,   833,   836,   837,
   840,   847,   848,   849,   850,   853,   854,   855,   856,   863,
   890,   895,   903,   905,   915,   927,   928,   933,   936,   943,
   944,   952,   954,   961,   974,   978,   985,   993,   994,   997,
  1003,  1009,  1016,  1021,  1027,  1028,  1029,  1030,  1033,  1034,
  1038,  1039,  1045,  1045,  1049,  1055,  1057,  1063,  1078,  1079,
  1082,  1083,  1086,  1087,  1090,  1092,  1095,  1103,  1109,  1121,
  1126,  1137,  1142,  1153,  1163,  1169,  1180,  1185,  1195,  1200,
  1210,  1215,  1225,  1230,  1235,  1243,  1247,  1258,  1264,  1276,
  1284,  1290,  1295,  1300,  1305,  1310,  1315,  1320,  1325,  1330,
  1336,  1346,  1351,  1355,  1359,  1363,  1367,  1371,  1375,  1379,
  1383,  1390,  1399,  1411,  1419,  1437,  1442,  1445,  1451,  1455,
  1461,  1466,  1471,  1472,  1476,  1483,  1490,  1496,  1500,  1511,
  1514,  1519,  1530,  1534,  1538,  1542,  1549,  1555,  1567,  1576,
  1586,  1593,  1599,  1606,  1608,  1618,  1623,  1625,  1630,  1633,
  1638,  1643,  1649,  1653,  1660,  1665,  1670,  1674,  1678,  1681,
  1699,  1704,  1710,  1715,  1720,  1724,  1730,  1734,  1739,  1741
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FIN","NOMBRE",
"IDENT","PAR_G","PAR_D","ACCOL_G","ACCOL_D","CROCHER_G","CROCHER_D","EG_MATH",
"VIRGULE","EG_LOG","SUP","INF","SUP_EG","INF_EG","DIFF","OR_LOG","AND_LOG","NON_BIN",
"OR_BIN","AND_BIN","XOR_BIN","SCOP","PLUS","MOINS","FOIS","DIV","POWER","POINT_VI",
"LEPOINT","POINT_DEUX","INTERROGATION","CHAINE","NILL","EXEC","ACHIEVE","ASK",
"BREAK","TELL","KILL","PERROR","EVEN","BEGIN_GRAMMAR","FROM","DEFINE","GROUP",
"COMPONENT","CONSTRUCTION","DESTRUCTION","MESSAGE_MANAGER","MAESSAGELOOP","LOCAL",
"STATIC","AS","DIGITAL","COLLECTOR","WITH","DO","END","IF","THEN","BEGINING",
"END_GRAMMAR","NEW","TRIGGER","PRECONDITION","POSTCONDITION","GOAL","RETURN",
"COMMENT","STEPS","UPDATEEVERY","PRIORITY","MSG","LOGICVAR","RULE","IA_ASSERT",
"OR","AND","FUZZY","FUZZYRULE","FUZZYRULESET","SETS","FUZZYVAR","FIS","COS",
"SIN","TAN","POW","LN","LOG","FACT","program","DefinitionClass","MessageRun",
"@1","MessageManager","CorpDeDefinition","HeritageDeType","@2","EnteteDeDefinition",
"DefinitionDeGroup","@3","CParam","DefinitionDeProgram","BlocDeDefinition","UnBloc",
"Register","RegistDesAttributs","RegisterOperator","RegisterSteps","Steps","@4",
"@5","OpBloc","OpComment","PreCondition","@6","@7","Goal","@8","@9","UpdateCycles",
"@10","Priority","@11","PostCondition","@12","@13","OperatorCond","@14","SingleOpCond",
"@15","@16","@17","BooleanCond","Performatif","TrigMsgCond","@18","@19","FuzzyCond",
"@21","@22","@23","FirstOrderPattern","@24","OpLogicVarSet","@25","OpLogicVar",
"BlocPourLesCode","BlocAvecCode","@26","Methode","Argument","ArgumentVide","@27",
"ArgumentListe","@28","ListesDeVariables","DesParams","TypeOfParam","@29","@30",
"DeclarationVariables","NonDeVariable","DuCode","Code","StaticCast","@31","@32",
"Affectation","@33","AppelleDeFonction","@34","AppelleDeFoncDirect","@35","@36",
"NonDeFonction","CallFunction","Prametre","RetourDeFonction","Evaluation","EvaluationSimpleState",
"@37","EvaluationState","@38","@39","TypeDeDeclaration","RegisterAnyVar","RegisterTypeDef",
"@40","StaticDef","@41","TypeDeComp","@42","RegisterCollector","MessageType",
"DefMessage","Borne","Nom","Expression","@43","@44","@45","@46","@47","@48",
"@49","@50","Term","@51","@52","Facteur","Variable","List","@53","ChaineDeCaractaire",
"ElementList","NewObject","@54","@55","PrametreNew","NewObjectName","Rule","@56",
"@57","RuleCondition","@58","Clause","@59","FactPattern","@60","LogicVarSet",
"@61","LogicVar","FuzzyRuleSet","@62","ListFuzzyRule","@63","@64","FuzzyRule",
"@65","@66","FuzzyCondition","@67","FuzzyClause","@68","FuzzyFactPattern","@69",
"@70", NULL
};
#endif

static const short yyr1[] = {     0,
    96,    96,    97,    97,    97,    98,    99,    98,   100,   101,
   103,   102,   104,   104,   106,   105,   107,   107,   108,   108,
   109,   109,   110,   110,   110,   110,   111,   112,   112,   113,
   113,   114,   116,   115,   117,   115,   118,   118,   118,   118,
   118,   118,   119,   121,   122,   120,   124,   125,   123,   127,
   126,   129,   128,   131,   132,   130,   133,   134,   133,   136,
   135,   135,   135,   137,   138,   135,   135,   139,   140,   140,
   140,   142,   143,   141,    -1,    -1,   145,   146,   147,   144,
   149,   148,   150,   151,   150,   152,   153,   153,   155,   154,
   154,   156,   156,   157,   157,   159,   158,   161,   160,   162,
   162,   163,   163,   107,   164,   165,   166,   164,   167,   167,
   168,   169,   169,   169,   169,   170,   170,   170,   170,   170,
   172,   173,   171,   175,   174,   176,   177,   176,   179,   178,
   180,   178,   181,   182,   183,   183,   184,   185,   185,   187,
   186,   189,   190,   188,   191,   191,   191,   191,   192,   192,
   193,   194,   193,   193,   196,   195,   198,   197,   199,   199,
   200,   200,   201,   201,   202,   203,   204,   204,   205,   204,
   206,   204,   204,   207,   204,   208,   204,   209,   204,   210,
   204,   211,   204,   212,   204,   213,   214,   213,   215,   213,
   216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
   216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
   216,   217,   217,   217,   217,   219,   218,   220,   221,   221,
   223,   224,   222,   225,   225,   226,   228,   229,   227,    -1,
   231,   230,   232,   233,   232,   232,    -1,    -1,   235,   234,
   234,   236,   237,   236,   238,   240,   239,   242,   241,   243,
   241,   245,   246,   244,   248,   247,   249,   250,   249,   252,
   253,   251,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1
};

static const short yyr2[] = {     0,
     1,     2,     4,     3,     1,     4,     0,     6,     1,     2,
     0,     4,     2,     2,     0,     7,     1,     3,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     4,     3,     1,
     2,     3,     0,     3,     0,     3,     1,     1,     1,     1,
     1,     1,     3,     0,     0,     6,     0,     0,     6,     0,
     5,     0,     5,     0,     0,     6,     1,     0,     3,     0,
     3,     1,     2,     0,     0,     5,     1,     2,     1,     1,
     1,     0,     0,     9,     0,     7,     0,     0,     0,    10,
     0,     6,     1,     0,     3,     2,     1,     2,     0,     5,
     3,     1,     1,     1,     1,     0,     3,     0,     4,     1,
     3,     1,     3,     2,     1,     0,     0,     6,     1,     3,
     1,     1,     1,     2,     2,     1,     2,     2,     2,     2,
     0,     0,     9,     0,     4,     1,     0,     4,     0,     5,
     0,     4,     1,     1,     1,     3,     2,     1,     1,     0,
     5,     0,     0,     9,     1,     2,     2,     3,     1,     1,
     2,     0,     5,     1,     0,     5,     0,     4,     4,     6,
     1,     3,     1,     1,     4,     1,     1,     2,     0,     4,
     0,     4,     2,     0,     4,     0,     4,     0,     4,     0,
     4,     0,     4,     0,     4,     1,     0,     4,     0,     4,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     3,     3,     0,     4,     1,     1,     2,
     0,     0,     6,     2,     1,     1,     0,     0,     6,     1,
     0,     3,     1,     0,     4,     3,     2,     2,     0,     6,
     2,     1,     0,     3,     2,     0,     4,     0,     3,     0,
     3,     0,     0,     6,     0,     3,     1,     0,     4,     0,
     0,     7,     0,     0,     0,     7,     1,     0,     3,     1
};

static const short yydefact[] = {     0,
     0,     9,     0,     1,     5,     0,     0,     0,    11,     2,
     0,     0,     0,    10,     0,     7,    92,     4,     0,    93,
     0,     0,    47,     0,     0,     0,     0,     0,    19,    21,
    23,    27,    25,    26,    30,    37,    38,    40,    41,    42,
    39,    24,    87,     0,    14,     0,    13,    12,     6,     0,
     0,    44,    54,     0,     0,     0,     0,     0,     3,    22,
    31,    88,    96,     0,    94,    95,     0,   200,   212,     0,
   216,     0,     0,   116,     0,   218,   199,   191,   192,   193,
   194,   196,   197,   195,   198,     0,   221,     0,     0,     0,
     0,     0,   112,     0,     0,   202,   126,     0,     0,   113,
   139,   138,   169,   167,   186,   201,   204,   206,   205,   209,
   208,   207,   211,   210,   157,   145,     0,    29,     0,     0,
   149,   154,     0,   150,     0,     0,     0,    43,    33,    32,
    50,    52,     0,     0,    91,    89,   166,    15,     0,   212,
   202,   169,   201,     0,   173,   168,   241,     0,   169,     0,
   137,   231,   227,   255,   252,   246,     8,   114,   115,   118,
   117,   119,   127,   129,   120,   140,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   147,    28,     0,   146,     0,   151,    64,     0,     0,
     0,    45,    58,    60,    67,    62,     0,    55,     0,    48,
     0,     0,     0,     0,    97,    17,   102,     0,   100,     0,
     0,     0,     0,   203,   219,     0,   239,   142,   226,     0,
     0,     0,     0,     0,     0,   213,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   214,   215,     0,     0,     0,   148,   152,   155,     0,    68,
     0,     0,     0,     0,     0,     0,    63,     0,     0,    34,
    36,    51,    53,     0,     0,    99,     0,     0,   111,   104,
   109,    90,     0,     0,   217,   220,     0,     0,   222,     0,
   232,   233,   228,     0,   256,   257,   253,   247,   248,   128,
     0,     0,   135,   134,   132,     0,   170,   172,   175,   177,
   179,   181,   183,   185,   188,   190,   125,   158,     0,   159,
     0,     0,    65,    81,    72,    77,    46,    59,    61,    56,
    49,     0,    18,   101,   103,     0,     0,     0,   243,     0,
     0,     0,   241,     0,     0,     0,   260,     0,     0,     0,
     0,     0,   130,   141,   163,     0,   161,   164,     0,   153,
   156,     0,     0,     0,     0,   107,   110,    16,     0,     0,
   240,   143,   225,     0,   223,   236,     0,   229,     0,     0,
   254,   249,   251,   136,     0,   160,     0,    66,     0,     0,
    83,    71,    69,    70,     0,    78,     0,   122,   244,     0,
   224,   235,     0,   259,   162,     0,    86,    82,     0,    73,
     0,   108,     0,     0,   261,   165,    85,     0,    79,   123,
   144,     0,     0,     0,   262,    74,     0,    80,     0,     0
};

static const short yydefgoto[] = {     3,
     4,     5,    50,     6,     7,     8,    15,    14,    47,   212,
   207,    28,    29,    30,    31,    32,    33,    34,   130,   201,
   202,    35,    36,    37,   125,   254,    38,    54,   259,    39,
   203,    40,   204,    41,   126,   258,   192,   255,   193,   256,
   249,   352,   194,   385,   195,   354,   408,   196,   355,   401,
   414,   197,   353,   380,   399,   381,    42,    43,   211,    44,
    64,    65,   133,    66,   134,   208,   209,   210,   264,   387,
   270,   271,    92,    93,    94,   139,   403,    95,   179,   141,
   227,    97,   228,   229,    98,   295,   292,    99,   100,   101,
   230,   102,   278,   390,   119,   120,   121,   311,   122,   312,
   123,   180,   124,   346,   347,   348,   138,   103,   167,   168,
   169,   170,   171,   172,   173,   174,   104,   175,   176,   105,
   143,   107,   144,   108,   216,   109,   150,   332,   365,   220,
   110,   222,   336,   153,   221,   281,   335,   111,   277,   330,
   360,   112,   113,   225,   288,   340,   341,   114,   224,   339,
   155,   223,   285,   338,   286,   369,   412
};

static const short yypact[] = {    29,
    30,-32768,    46,-32768,-32768,    71,    44,    52,-32768,-32768,
    97,    65,     6,-32768,    58,    54,-32768,-32768,    74,-32768,
   118,   121,-32768,   128,   143,   145,   148,   110,-32768,   234,
-32768,-32768,-32768,-32768,   161,-32768,-32768,-32768,-32768,-32768,
-32768,    20,-32768,   137,-32768,   132,-32768,-32768,-32768,   469,
    19,-32768,-32768,   149,   140,   179,   141,   146,-32768,-32768,
-32768,-32768,   180,    22,-32768,-32768,   150,-32768,   169,   627,
-32768,   640,   640,-32768,     7,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   627,-32768,   627,   133,   135,
   201,   213,-32768,   178,   181,   100,-32768,   205,   182,-32768,
-32768,-32768,    95,   117,   188,     4,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   204,-32768,    36,   194,
-32768,-32768,    60,-32768,    14,    14,   192,-32768,   228,-32768,
-32768,-32768,   231,   235,-32768,   469,-32768,-32768,   216,-32768,
   226,   255,    47,   627,   117,   117,-32768,   256,   187,   260,
   304,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   261,   253,-32768,-32768,   241,   250,   268,   263,
   273,   272,   275,   276,   262,   264,   291,   294,   288,   285,
   150,-32768,-32768,   270,-32768,   109,-32768,-32768,   166,   300,
   308,-32768,   265,-32768,-32768,-32768,   292,-32768,   319,-32768,
   298,   179,   301,   302,-32768,    15,   313,    83,   305,   331,
   295,   325,   338,-32768,   304,   523,-32768,-32768,-32768,   350,
   323,   296,   353,   297,   278,-32768,   640,   627,   356,   469,
   640,   640,   640,   640,   640,   640,   640,   640,   640,   640,
-32768,-32768,   627,   328,   113,-32768,-32768,-32768,   469,-32768,
   363,   367,   368,   314,    14,   343,-32768,   315,   346,-32768,
-32768,-32768,-32768,   364,   376,-32768,   235,   235,-32768,   369,
-32768,-32768,   235,   327,-32768,   304,   627,   469,-32768,   168,
-32768,    85,-32768,   380,-32768,   306,-32768,-32768,   303,   357,
   188,   111,   304,-32768,-32768,   307,   117,   117,   117,   117,
   117,   117,   117,   117,   188,   188,   304,-32768,   691,-32768,
   379,   392,   469,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   403,-32768,   313,   313,   331,   116,   404,   142,   402,
   361,   575,-32768,   323,   329,   323,-32768,   330,   353,   405,
   278,   627,-32768,-32768,    50,   129,-32768,-32768,   382,-32768,
-32768,   407,   378,    63,   334,-32768,-32768,-32768,   412,   627,
-32768,-32768,-32768,   114,-32768,-32768,   323,-32768,   335,   353,
-32768,-32768,-32768,   304,   691,-32768,    12,-32768,   413,   419,
   394,-32768,-32768,-32768,   422,-32768,   416,-32768,-32768,   469,
-32768,-32768,   425,-32768,-32768,   640,-32768,-32768,   378,-32768,
   427,-32768,   428,   415,-32768,   188,-32768,   429,-32768,-32768,
-32768,   431,   409,   432,-32768,-32768,   410,-32768,   434,-32768
};

static const short yypgoto[] = {-32768,
   441,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -234,-32768,   418,-32768,-32768,-32768,   414,-32768,   259,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -118,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   336,-32768,    66,-32768,-32768,-32768,   420,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   138,   -62,   -89,-32768,-32768,-32768,-32768,-32768,   -50,
-32768,   239,-32768,-32768,-32768,   175,   136,-32768,   -88,-32768,
-32768,-32768,-32768,-32768,-32768,   351,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    94,-32768,   290,   -65,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -43,-32768,-32768,  -221,
   -49,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  -298,-32768,  -214,-32768,   112,
-32768,-32768,-32768,-32768,   139,-32768,-32768,  -216,-32768,-32768,
-32768,-32768,  -299,-32768,-32768,-32768,-32768
};


#define	YYLAST		776


static const short yytable[] = {    96,
   106,   136,   158,   159,   142,   291,   282,   198,   289,  -133,
    45,   147,   148,    96,   106,  -124,   241,   305,   306,  -105,
   149,   188,   151,   115,    17,    68,    69,    70,   145,   146,
  -106,    71,   324,   325,     9,   366,   178,   368,   327,   371,
   115,    96,   106,    72,   396,   419,   158,   159,   189,    73,
   116,    12,  -133,    74,    46,  -212,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,   182,   392,    17,
   394,    20,   186,    18,   187,     1,    11,   117,   215,   178,
   118,     2,  -212,   135,    86,    96,   106,   349,    87,   266,
   190,    48,     1,    88,   117,   267,   191,   183,     2,    13,
    89,   382,   383,    16,   384,    90,    91,    51,  -184,  -178,
  -176,  -180,  -182,  -174,    19,    49,    20,   294,    59,   282,
   391,   282,  -171,   342,   289,   309,   342,   310,   265,   166,
   358,   162,   163,    21,    22,    23,   318,    24,    25,    26,
    27,   375,    63,   376,   131,  -187,  -189,    67,  -242,   132,
   276,    52,   282,   349,    53,  -184,  -178,  -176,  -180,  -182,
  -174,    55,   293,   247,   248,   334,  -234,   296,  -169,  -171,
   250,   251,   333,   148,   406,   128,    56,   307,    57,    96,
   106,    58,   127,   129,   -98,   137,   313,   297,   298,   299,
   300,   301,   302,   303,   304,   152,  -121,   154,    96,   106,
  -184,  -178,  -176,  -180,  -182,  -174,   158,   159,   156,   160,
   164,   329,   161,   165,  -171,   331,    68,    69,    70,   181,
   177,   218,    71,   158,   159,   185,   199,    96,   106,    21,
    22,    23,   -35,    24,    72,    26,    27,   205,    17,   206,
    73,   158,   159,   213,    74,    96,   106,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,   163,  -131,
   217,   214,    96,   106,   219,   226,   293,   231,  -184,  -178,
  -176,  -180,  -182,  -174,   157,    86,   374,   232,   234,    87,
    96,   106,  -171,    19,    88,    20,   233,   235,   236,   238,
   239,    89,   237,   240,   329,   241,    90,    91,   242,   243,
   244,   246,    21,    22,    23,   252,    24,    25,    26,    27,
    68,    69,    70,   253,   158,   159,    71,  -184,  -178,  -176,
  -180,  -182,  -174,   257,   251,   265,   -57,   404,    72,   260,
  -169,  -171,   262,   263,    73,   269,   268,   273,    74,    96,
   106,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,   274,    96,   106,   279,   272,   280,   284,   283,
   287,    90,   294,   308,    68,    69,    70,   314,   344,    86,
    71,   315,   316,    87,   319,   317,   320,   321,    88,   322,
   323,   326,    72,   328,   337,    89,  -250,  -258,    73,  -126,
    90,    91,    74,   350,   362,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,   351,   356,   361,   359,
   367,   370,   379,   372,   377,   378,   388,   397,    68,    69,
    70,   386,   393,    86,    71,   398,   400,    87,   -84,   405,
   402,   409,    88,   420,   410,   413,    72,   415,   417,    89,
   416,   418,    73,    10,    90,    91,    74,    60,    61,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
   261,    62,   200,   357,   407,   290,   343,   364,   395,   184,
   245,   389,    68,    69,    70,     0,   411,    86,    71,   373,
     0,    87,     0,     0,     0,     0,    88,     0,     0,     0,
    72,     0,     0,    89,     0,     0,    73,     0,    90,    91,
    74,     0,     0,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    68,   140,    70,     0,
     0,    86,    71,   275,     0,    87,     0,     0,     0,     0,
    88,     0,     0,     0,    72,     0,     0,    89,     0,     0,
    73,     0,    90,    91,     0,     0,     0,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    68,   140,
    70,   363,     0,     0,    71,     0,     0,     0,     0,    87,
     0,     0,     0,     0,     0,     0,    72,     0,     0,     0,
     0,    89,    73,     0,     0,     0,    90,    91,     0,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    68,   140,    70,     0,     0,     0,    71,     0,     0,     0,
     0,    87,     0,    68,   140,    70,     0,     0,    72,    71,
     0,     0,     0,    89,    73,     0,     0,     0,    90,    91,
     0,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,     0,     0,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,     0,     0,     0,     0,     0,
     0,     0,     0,    87,    68,   345,    70,     0,     0,     0,
    71,     0,     0,     0,     0,    89,    87,     0,     0,     0,
    90,    91,     0,     0,     0,     0,     0,     0,    89,     0,
     0,     0,     0,    90,    91,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    87,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    89,
     0,     0,     0,     0,    90,    91
};

static const short yycheck[] = {    50,
    50,    64,    92,    92,    70,   227,   221,   126,   225,     6,
     5,     5,     6,    64,    64,    12,     5,   239,   240,     5,
    86,     8,    88,     5,     5,     4,     5,     6,    72,    73,
    16,    10,   267,   268,     5,   334,    33,   336,   273,   339,
     5,    92,    92,    22,    33,     0,   136,   136,    35,    28,
    32,     8,     6,    32,    49,     6,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    32,   367,     5,
   370,    52,    13,     9,    15,    47,     6,    59,   144,    33,
    62,    53,    33,    62,    63,   136,   136,   309,    67,     7,
    77,    34,    47,    72,    59,    13,    83,    62,    53,    48,
    79,    39,    40,     7,    42,    84,    85,    34,    14,    15,
    16,    17,    18,    19,    50,    62,    52,     7,     9,   334,
     7,   336,    28,    13,   341,    13,    13,    15,    13,    35,
    15,    32,    33,    69,    70,    71,   255,    73,    74,    75,
    76,    13,     6,    15,     4,    29,    30,    16,     7,     4,
   216,    34,   367,   375,    34,    14,    15,    16,    17,    18,
    19,    34,   228,    55,    56,    81,    82,   230,    27,    28,
     5,     6,     5,     6,   396,    36,    34,   243,    34,   230,
   230,    34,    34,     5,     5,    36,   249,   231,   232,   233,
   234,   235,   236,   237,   238,    63,    28,    63,   249,   249,
    14,    15,    16,    17,    18,    19,   296,   296,     8,    32,
     6,   277,    32,    32,    28,   278,     4,     5,     6,    16,
    33,    35,    10,   313,   313,    32,    35,   278,   278,    69,
    70,    71,     5,    73,    22,    75,    76,     7,     5,     5,
    28,   331,   331,    28,    32,   296,   296,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    33,     7,
     5,     7,   313,   313,     5,     5,   332,    27,    14,    15,
    16,    17,    18,    19,    62,    63,   342,    28,    16,    67,
   331,   331,    28,    50,    72,    52,    19,    15,    17,    14,
    29,    79,    18,    30,   360,     5,    84,    85,     5,    12,
    16,    32,    69,    70,    71,     6,    73,    74,    75,    76,
     4,     5,     6,     6,   404,   404,    10,    14,    15,    16,
    17,    18,    19,    32,     6,    13,    62,   390,    22,    32,
    27,    28,    32,    32,    28,     5,    32,    13,    32,   390,
   390,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    15,   404,   404,     6,    62,    35,     6,    64,
    64,    84,     7,    36,     4,     5,     6,     5,    62,    63,
    10,     5,     5,    67,    32,    62,    62,    32,    72,    16,
     5,    13,    22,    57,     5,    79,    84,    82,    28,    33,
    84,    85,    32,    15,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    15,     5,     7,     6,
    82,    82,    35,     9,    33,     9,     5,     5,     4,     5,
     6,    88,    88,    63,    10,     7,     5,    67,    35,     5,
    15,     5,    72,     0,     7,     7,    22,     7,     7,    79,
    32,    32,    28,     3,    84,    85,    32,    30,    35,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
   202,    42,   127,   326,   399,   227,   292,   332,   375,   119,
   181,   360,     4,     5,     6,    -1,    62,    63,    10,   341,
    -1,    67,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,
    22,    -1,    -1,    79,    -1,    -1,    28,    -1,    84,    85,
    32,    -1,    -1,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,     6,    -1,
    -1,    63,    10,    11,    -1,    67,    -1,    -1,    -1,    -1,
    72,    -1,    -1,    -1,    22,    -1,    -1,    79,    -1,    -1,
    28,    -1,    84,    85,    -1,    -1,    -1,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,
     6,     7,    -1,    -1,    10,    -1,    -1,    -1,    -1,    67,
    -1,    -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    -1,
    -1,    79,    28,    -1,    -1,    -1,    84,    85,    -1,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     4,     5,     6,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,    67,    -1,     4,     5,     6,    -1,    -1,    22,    10,
    -1,    -1,    -1,    79,    28,    -1,    -1,    -1,    84,    85,
    -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    -1,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    67,     4,     5,     6,    -1,    -1,    -1,
    10,    -1,    -1,    -1,    -1,    79,    67,    -1,    -1,    -1,
    84,    85,    -1,    -1,    -1,    -1,    -1,    -1,    79,    -1,
    -1,    -1,    -1,    84,    85,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,
    -1,    -1,    -1,    -1,    84,    85
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
CCompilateur::yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 69 "grammar.yacc"
{
								
							;
    break;}
case 3:
#line 79 "grammar.yacc"
{						
								if(!computContraint()) return false;
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 4:
#line 86 "grammar.yacc"
{
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 7:
#line 98 "grammar.yacc"
{
								initMessageManager();
							;
    break;}
case 8:
#line 103 "grammar.yacc"
{
								if(!endMessageManager()) return 0;
							;
    break;}
case 9:
#line 109 "grammar.yacc"
{
								if(_ResultCompile != NULL) 
								{
									yyerror("an MessageManager block had all ready declared");
									return 0;
								}								
							;
    break;}
case 11:
#line 122 "grammar.yacc"
{
								NLAIAGENT::CStringVarName interfName(LastyyText[1]);																																
								try
								{	
									NLAIC::CIdentType id = getTypeOfClass(interfName);
									_SelfClass.push((IClassInterpret *)(((CClassInterpretFactory *)id.getFactory())->getClass()->newInstance()));
									((IClassInterpret *)_SelfClass.get())->setInheritanceName(interfName);
								}
								catch(NLAIE::IException &a)
								{									
									yyerror((char *)a.what());
									return 0;
								}
							;
    break;}
case 14:
#line 141 "grammar.yacc"
{
								try
								{
									NLAIC::CIdentType id(LastyyText[1]);
									char text[1024*4];
									sprintf(text,"class '%s' all ready exist",LastyyText[1]);
									yyerror(text);
									return 0;
								}
								catch(NLAIE::IException &)
								{
									( (IClassInterpret *) _SelfClass.get() )->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
									( (IClassInterpret *) _SelfClass.get() )->buildVTable();
									RegisterClass();
								}
							;
    break;}
case 15:
#line 160 "grammar.yacc"
{
								((IClassInterpret *)_SelfClass.get())->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
							;
    break;}
case 25:
#line 179 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->buildLogicTables();
								}
							;
    break;}
case 33:
#line 205 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[1] ) );
							;
    break;}
case 35:
#line 215 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[0] ) );
							;
    break;}
case 43:
#line 239 "grammar.yacc"
{
								char *txt1 = LastyyText[0];
								char *txt2 = LastyyText[1];
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setComment( LastyyText[1] );
								}


							;
    break;}
case 44:
#line 253 "grammar.yacc"
{
								is_cond = true;
								initParam();
								_InCond = true;
							;
    break;}
case 45:
#line 259 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
								_InCond = false;
							;
    break;}
case 47:
#line 277 "grammar.yacc"
{
								if ( !classIsAnOperator() )
								 	return 0;
							;
    break;}
case 48:
#line 283 "grammar.yacc"
{
								if ( _Goal ) 
								{
									_Goal->release();
									_Goal = NULL;
								}
								
								if ( classIsAnOperator() )
								{
									// Builds a FactPattern

									// Adds it as goal to the operator class
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setGoal( _LastAsserts.back(), _LastLogicParams.back() );
//									((NLAIAGENT::IObjectIA *)(_LastAsserts.back()))->release();
									_LastAsserts.pop_back();
//									((NLAIAGENT::IObjectIA *)(_LastLogicParams.back()))->release();
									_LastLogicParams.pop_back();
								}
							;
    break;}
case 50:
#line 307 "grammar.yacc"
{
									if ( classIsAnOperator() )
									{
										sint32 update = (sint32) LastyyNum;
										COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
										op_class->setUpdateEvery( update );
										if(_LastFact.Value != NULL) 
										{
											_LastFact.Value->release();
											_LastFact.Value = NULL;
										}

										if(_FlotingExpressionType != NULL)
										{
											_FlotingExpressionType->release();
											_FlotingExpressionType = NULL;
										}
									}	
								;
    break;}
case 52:
#line 330 "grammar.yacc"
{
									if ( classIsAnOperator() )
									{
										float priority = (float) LastyyNum;
										COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
										op_class->setPriority( priority );
										if(_LastFact.Value != NULL) 
										{
											_LastFact.Value->release();
											_LastFact.Value = NULL;
										}

										if(_FlotingExpressionType != NULL)
										{
											_FlotingExpressionType->release();
											_FlotingExpressionType = NULL;
										}
									}	
								;
    break;}
case 54:
#line 356 "grammar.yacc"
{
								is_cond = false;
								initParam();
								_InCond = true;
							;
    break;}
case 55:
#line 362 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
/*									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
									}
									*/

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeConc( _LastCodeBranche.back() );
										_LastCodeBranche.pop_back();
									}
								}
								_InCond = false;
							;
    break;}
case 57:
#line 388 "grammar.yacc"
{
#ifdef NL_DEBUG
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
#endif
							;
    break;}
case 58:
#line 394 "grammar.yacc"
{
#ifdef NL_DEBUG
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
#endif
							;
    break;}
case 59:
#line 400 "grammar.yacc"
{
#ifdef NL_DEBUG
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
#endif
							;
    break;}
case 60:
#line 409 "grammar.yacc"
{
#ifdef NL_DEBUG
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
#endif
							;
    break;}
case 62:
#line 416 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{

									NLAIAGENT::CStringVarName *vvar = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									NLAIAGENT::CStringVarName *vset = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->addFuzzyCond(vvar, vset);
								}
							;
    break;}
case 63:
#line 432 "grammar.yacc"
{									
								COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
								while ( _LastAsserts.size() )
								{
									if ( is_cond )
										op_class->addFirstOrderCond( _LastAsserts.back(), _LastLogicParams.back() );
									else
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );

									_LastAsserts.pop_back();
									_LastLogicParams.pop_back();
								}
							;
    break;}
case 64:
#line 446 "grammar.yacc"
{
								clean();
								_LastBloc = new IBlock(_Debug);
								_Heap -= (sint32)_Heap;
								CVarPStack::_LocalTableRef = &_Heap[0];
								_VarState.clear();								
								_VarState.pushMark();
								if(!_InLineParse) addOpCode((new CMarkAlloc));
							;
    break;}
case 65:
#line 456 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										addOpCode(x);
									}									
									addOpCode(new CHaltOpCode());

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
//										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_LastCodeBranche.push_back( (IOpCode *) listCode );
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}							

/*								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}				
*/				
							;
    break;}
case 67:
#line 514 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									const char *msg_name = _LastBooleanConds.back()->getString();
									_LastBooleanConds.pop_back();
									const char *class_name = _LastBooleanConds.back()->getString();
									_LastBooleanConds.pop_back();
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									try
									{	
										op_class->RegisterMessage(_LastPerf, class_name, msg_name );
									}
									catch(NLAIE::IException &a)
									{									
										yyerror((char *)a.what());
										return 0;
									}
								}
							;
    break;}
case 68:
#line 536 "grammar.yacc"
{
							char *param_name = LastyyText[1];
							_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
						;
    break;}
case 69:
#line 544 "grammar.yacc"
{
							_LastPerf = NLAIAGENT::IMessageBase::PAsk;
						;
    break;}
case 70:
#line 548 "grammar.yacc"
{
							_LastPerf = NLAIAGENT::IMessageBase::PTell;
						;
    break;}
case 71:
#line 552 "grammar.yacc"
{
							_LastPerf = NLAIAGENT::IMessageBase::PAchieve;
						;
    break;}
case 72:
#line 563 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 73:
#line 569 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 75:
#line 579 "grammar.yacc"
{
								
							;
    break;}
case 77:
#line 590 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 78:
#line 595 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 79:
#line 599 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 81:
#line 609 "grammar.yacc"
{
							const char *assert_name = LastyyText[1];
							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );
						;
    break;}
case 83:
#line 620 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 84:
#line 624 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 86:
#line 631 "grammar.yacc"
{
							char *var_name = LastyyText[1];
							_LastLogicParams.back().push_back( new NLAIAGENT::CStringVarName( var_name ) );
						;
    break;}
case 89:
#line 644 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}

								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}								
								if(!caseRunMsg()) return false;
							;
    break;}
case 91:
#line 703 "grammar.yacc"
{	
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}
								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}
								if(!caseRunMsg()) return false;

							;
    break;}
case 92:
#line 763 "grammar.yacc"
{				
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 93:
#line 771 "grammar.yacc"
{
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 96:
#line 785 "grammar.yacc"
{								
								initParam();
							;
    break;}
case 97:
#line 789 "grammar.yacc"
{
								if(!registerMethod()) return false;
							;
    break;}
case 98:
#line 795 "grammar.yacc"
{
								initParam();
							;
    break;}
case 99:
#line 799 "grammar.yacc"
{
								registerMethod();
							;
    break;}
case 105:
#line 817 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[0]);
								_BaseObjectDef = false;
							;
    break;}
case 106:
#line 822 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 107:
#line 827 "grammar.yacc"
{
								_LastBaseObjectDef = NLAIAGENT::CStringVarName(LastyyText[1]);
								_BaseObjectDef = true;

							;
    break;}
case 111:
#line 841 "grammar.yacc"
{
								if(!setParamVarName()) return 0;
							;
    break;}
case 119:
#line 857 "grammar.yacc"
{
								_LastStringParam.back()->release();
								_LastStringParam.pop_back();
								_Param.back()->release();
								_Param.pop_back();								
							;
    break;}
case 120:
#line 865 "grammar.yacc"
{
								if(!_InLineParse)
								{
									
									IOpCode *x;				
									int i;
									for(i = 0; i < _VarState.markSize(); i++)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										addOpCode(x);										
									}
								}								
								addOpCode(new CHaltOpCode());


							;
    break;}
case 121:
#line 891 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 122:
#line 899 "grammar.yacc"
{					
								NLAIAGENT::CStringVarName x(LastyyText[1]);			
								if(!castVariable(_LastString,x)) return false;
							;
    break;}
case 124:
#line 906 "grammar.yacc"
{								
								std::list<NLAISCRIPT::CStringType>::iterator i = _LasVarStr.begin();
								_LasAffectationVarStr.clear();
								while(i != _LasVarStr.end())
								{
									_LasAffectationVarStr.push_back(*i++);
								}												
							;
    break;}
case 125:
#line 916 "grammar.yacc"
{
								if(!affectation()) 
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 127:
#line 929 "grammar.yacc"
{
								
							;
    break;}
case 129:
#line 937 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 131:
#line 945 "grammar.yacc"
{				
								addOpCode(new CLdbOpCode (NLAIAGENT::CGroupType()));								
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 133:
#line 955 "grammar.yacc"
{
								nameMethodeProcessing();
							;
    break;}
case 134:
#line 962 "grammar.yacc"
{	
								_ExpressionType = _ExpressionTypeTmp.back();
								_ExpressionTypeTmp.pop_back();								
								if(!callFunction())
								{
									_FromStack.pop_back();
									return 0;	
								}
								_FromStack.pop_back();
							;
    break;}
case 135:
#line 975 "grammar.yacc"
{
								pushParamExpression();								
							;
    break;}
case 136:
#line 980 "grammar.yacc"
{
								pushParamExpression();
							;
    break;}
case 137:
#line 987 "grammar.yacc"
{
								if ( !_InCond )
									if(!typeOfMethod()) return false;
							;
    break;}
case 140:
#line 999 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 141:
#line 1004 "grammar.yacc"
{
								interrogationEnd();
							;
    break;}
case 142:
#line 1012 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 143:
#line 1017 "grammar.yacc"
{								
								ifInterrogationPoint()
							;
    break;}
case 144:
#line 1022 "grammar.yacc"
{
								ifInterrogationEnd();
							;
    break;}
case 152:
#line 1040 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Local = true;								
							;
    break;}
case 155:
#line 1050 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Static = true;
							;
    break;}
case 157:
#line 1058 "grammar.yacc"
{								
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
								_LastRegistered = ((IClassInterpret *)_SelfClass.get())->registerComponent(_LastString);
							;
    break;}
case 158:
#line 1064 "grammar.yacc"
{
								if(((IClassInterpret *)_SelfClass.get())->getComponent(NLAIAGENT::CStringVarName(LastyyText[1])) == NULL)
								{
									CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);
									c->ObjectName = new NLAIAGENT::CStringVarName(LastyyText[1]);									
								}
								else
								{
									yyerror("variable all ready declared in the Register components");
									return 0;			
								}
							;
    break;}
case 167:
#line 1096 "grammar.yacc"
{	
								if(_FacteurEval)
								{								
									allocExpression(NULL);
									setTypeExpression();
								}
							;
    break;}
case 168:
#line 1104 "grammar.yacc"
{								
								allocExpression(new CNegOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opAdd,"(-)");
								
							;
    break;}
case 169:
#line 1110 "grammar.yacc"
{	
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opAdd))
								{
									yyerror("erreur sémantique l'operateur + n'est pas supporté par cette expression");
									return 0;
								}*/								
								setTypeExpressionG();
								allocExpression(NULL);
								
								
							;
    break;}
case 170:
#line 1122 "grammar.yacc"
{									
								allocExpression(new CAddOpCode,true);		
								setTypeExpressionD(NLAIC::CTypeOfOperator::opAdd,"+");	
							;
    break;}
case 171:
#line 1127 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSub))
								{
									yyerror("erreur sémantique l'operateur - n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);
								
							;
    break;}
case 172:
#line 1138 "grammar.yacc"
{								
								allocExpression(new CSubOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSub,"-");							
							;
    break;}
case 173:
#line 1143 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opNot))
								{
									yyerror("erreur sémantique l'operateur ! n'est pas supporté par cette expression");
									return 0;
								}*/								
								allocExpression(new CNotOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opNot,"!");
								
							;
    break;}
case 174:
#line 1154 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiff))
								{
									yyerror("erreur sémantique l'operateur != n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 175:
#line 1164 "grammar.yacc"
{								
								allocExpression(new CDiffOpCode,true);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiff,"!=");
								
							;
    break;}
case 176:
#line 1170 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInf))
								{
									yyerror("erreur sémantique l'operateur < n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
								
							;
    break;}
case 177:
#line 1181 "grammar.yacc"
{								
								allocExpression(new CInfOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInf,"<");							
							;
    break;}
case 178:
#line 1186 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSup))
								{
									yyerror("erreur sémantique l'operateur > n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);								
							;
    break;}
case 179:
#line 1196 "grammar.yacc"
{								
								allocExpression(new CSupOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSup,">");							
							;
    break;}
case 180:
#line 1201 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSupEq))
								{
									yyerror("erreur sémantique l'operateur >= n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
							;
    break;}
case 181:
#line 1211 "grammar.yacc"
{								
								allocExpression(new CSupEqOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSupEq,">=");
							;
    break;}
case 182:
#line 1216 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInfEq))
								{
									yyerror("erreur sémantique l'operateur <= n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 183:
#line 1226 "grammar.yacc"
{								
								allocExpression(new CInfEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInfEq,"<=");
							;
    break;}
case 184:
#line 1231 "grammar.yacc"
{
								setTypeExpressionG();	
								allocExpression(NULL);														
							;
    break;}
case 185:
#line 1236 "grammar.yacc"
{								
								allocExpression(new CEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opEq,"==");

							;
    break;}
case 186:
#line 1244 "grammar.yacc"
{
								_FacteurEval = true;	
							;
    break;}
case 187:
#line 1248 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opMul))
								{
									yyerror("erreur sémantique l'operateur * n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();								
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 188:
#line 1259 "grammar.yacc"
{									
								setTypeExpressionD(NLAIC::CTypeOfOperator::opMul,"+");
								allocExpression(new CMulOpCode,false);
								_FacteurEval = false;
							;
    break;}
case 189:
#line 1265 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiv))
								{
									yyerror("erreur sémantique l'operateur / n'est pas supporté par cette expression");
									return 0;
								}*/
											
								setTypeExpressionG();
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 190:
#line 1277 "grammar.yacc"
{																
								allocExpression(new CDivOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiv,"/");
								_FacteurEval = false;	
							;
    break;}
case 191:
#line 1286 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PExec);
							;
    break;}
case 192:
#line 1291 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAchieve);
							;
    break;}
case 193:
#line 1296 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAsk);
							;
    break;}
case 194:
#line 1301 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PBreak);
							;
    break;}
case 195:
#line 1306 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PError);
							;
    break;}
case 196:
#line 1311 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PTell);
							;
    break;}
case 197:
#line 1316 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PKill);
							;
    break;}
case 198:
#line 1321 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PEven);
							;
    break;}
case 199:
#line 1326 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVarNill();
							;
    break;}
case 200:
#line 1332 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVar();
							;
    break;}
case 201:
#line 1337 "grammar.yacc"
{								
								_IsFacteurIsExpression = false;
								if(!processingVar())
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 202:
#line 1347 "grammar.yacc"
{								
								_IsFacteurIsExpression = true;								
								setMethodVar();
							;
    break;}
case 203:
#line 1352 "grammar.yacc"
{							
								_IsFacteurIsExpression = true;
							;
    break;}
case 204:
#line 1356 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 205:
#line 1360 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 206:
#line 1364 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 207:
#line 1368 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 208:
#line 1372 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 209:
#line 1376 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 210:
#line 1380 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 211:
#line 1384 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 212:
#line 1391 "grammar.yacc"
{
								_LasVarStr.clear();
								_LasVarStr.push_back(NLAISCRIPT::CStringType(LastyyText[1]));
								_LastFact.VarType = varTypeUndef;
								_IsFacteurIsExpression = false;	
								_FromStack.push_back(false);							
							;
    break;}
case 213:
#line 1400 "grammar.yacc"
{
								_LasVarStr.clear();
								cleanTypeList();
								_LasVarStr.push_back(LastyyText[1]);
								setMethodVar();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);

							;
    break;}
case 214:
#line 1412 "grammar.yacc"
{	
								cleanTypeList();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);
							;
    break;}
case 215:
#line 1421 "grammar.yacc"
{									
								if(_IsFacteurIsExpression)
								{
									IOpType *c = _TypeList.back();
									_TypeList.pop_back();
									c->release();
									_TypeList.push_back(_FlotingExpressionType);
									_FlotingExpressionType->incRef();
									_LasVarStr.clear();
									_FromStack.pop_back();
								}
								_LasVarStr.push_back(LastyyText[1]);
							;
    break;}
case 216:
#line 1438 "grammar.yacc"
{									
								setListVar();
							;
    break;}
case 218:
#line 1446 "grammar.yacc"
{									
								setChaineVar();
							;
    break;}
case 219:
#line 1452 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));								
							;
    break;}
case 220:
#line 1456 "grammar.yacc"
{								
								_LastBloc->addCode((new CAddOpCode));
							;
    break;}
case 221:
#line 1462 "grammar.yacc"
{
								_LastStringParam.push_back(new NLAIAGENT::CGroupType());								

							;
    break;}
case 222:
#line 1467 "grammar.yacc"
{
								addOpCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
							;
    break;}
case 224:
#line 1473 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 225:
#line 1477 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 226:
#line 1484 "grammar.yacc"
{							
								_LastStringParam.back()->cpy(NLAIAGENT::CStringType(NLAIAGENT::CStringVarName(LastyyText[1])));
								_Param.push_back(new CParam);								
							;
    break;}
case 227:
#line 1491 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );				
						;
    break;}
case 228:
#line 1496 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 229:
#line 1500 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
//							_LastBloc->addCode( new CLdbNewOpCode(CRule()) );		
							setStackVar( CVar::IdVar );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tUndef);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::Rule::idRule;
						;
    break;}
case 231:
#line 1515 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 232:
#line 1519 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbNewOpCode( CClause() ) );
							//_LastBloc->addCode( new CAddOpCode() );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::CClause::idCClause;
						;
    break;}
case 233:
#line 1531 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 234:
#line 1535 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 235:
#line 1539 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );							
						;
    break;}
case 236:
#line 1544 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );													
						;
    break;}
case 237:
#line 1550 "grammar.yacc"
{
							_LastBloc->addCode( new CTellOpCode() );
						;
    break;}
case 238:
#line 1556 "grammar.yacc"
{
							/*char buf[256];
							strcpy(buf, LastyyText[1]);
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CBoolType( NLAIAGENT::CStringVarName(LastyyText[1]) ) ) );
							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
							_LastFact.varType = varForFunc;
							_LastFact.isUsed = false;
							_lastIdentType = NLAIAGENT::CVar::idBoolType;
							*/
						;
    break;}
case 239:
#line 1569 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
							char *txt = LastyyText[1];
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode(new CAddOpCode() );
							//_LastAssert = NLAIAGENT::CStringVarName(LastyyText[1]);
						;
    break;}
case 240:
#line 1577 "grammar.yacc"
{
/*							setStackVar( CFactPattern::IdFactPattern );
							IBaseAssert *my_assert = _FactBase->addAssert( _LastAssert, _NbLogicParams );
							_NbLogicParams = 0;
							_LastBloc->addCode(new CLdbNewOpCode( CFactPattern( my_assert ) ) );
							*/
						;
    break;}
case 241:
#line 1587 "grammar.yacc"
{
						;
    break;}
case 242:
#line 1594 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 243:
#line 1600 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 245:
#line 1609 "grammar.yacc"
{
							char buf[256];
							strcpy(buf, LastyyText[1]);
							setStackVar( CVar::IdVar );
							_LastBloc->addCode( new CLdbOpCode(CVar( LastyyText[1] )) );
						;
    break;}
case 246:
#line 1619 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
						;
    break;}
case 248:
#line 1626 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 249:
#line 1630 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 250:
#line 1634 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 251:
#line 1638 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 252:
#line 1644 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );
						;
    break;}
case 253:
#line 1649 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 254:
#line 1653 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyRule() ) );		
							setStackVar(CFuzzyRule::IdFuzzyRule);
						;
    break;}
case 255:
#line 1661 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 256:
#line 1665 "grammar.yacc"
{
							
						;
    break;}
case 257:
#line 1671 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 258:
#line 1675 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 260:
#line 1682 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							// Composant?
							char *txt = LastyyText[0];
/*							_lastFVarIndex = ((IClassInterpret *)_selfClass.get())->getComponentIndex(NLAIAGENT::CStringVarName(LastyyText[1]));
							if (_lastFVarIndex != -1 )
							{
								_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CDigitalType(_lastFVarIndex) ) );
								_LastBloc->addCode( new CAddOpCode() );
							}
							else
							{
								// Variable locale?
							}
							*/

						;
    break;}
case 261:
#line 1700 "grammar.yacc"
{
							_LastString = NLAIAGENT::CStringVarName( LastyyText[0] );
						;
    break;}
case 262:
#line 1704 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++ );
							_LastBloc->addCode(new CLdbNewOpCode( CSimpleFuzzyCond(NULL, NULL) ) );
						;
    break;}
case 263:
#line 1711 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 264:
#line 1715 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 265:
#line 1720 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 266:
#line 1724 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyVar(NLAIAGENT::CStringVarName("Inst"),0,1) ) );
						;
    break;}
case 267:
#line 1731 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 268:
#line 1735 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 270:
#line 1742 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1746 "grammar.yacc"

