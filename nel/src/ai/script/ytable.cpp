
/*  A Bison parser, made from grammar.yacc
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	FIN	258
#define	NOMBRE	259
#define	IDENT	260
#define	PAR_G	261
#define	PAR_D	262
#define	ACCOL_G	263
#define	ACCOL_D	264
#define	CROCHER_G	265
#define	CROCHER_D	266
#define	EG_MATH	267
#define	VIRGULE	268
#define	EG_LOG	269
#define	SUP	270
#define	INF	271
#define	SUP_EG	272
#define	INF_EG	273
#define	DIFF	274
#define	OR_LOG	275
#define	AND_LOG	276
#define	NON_BIN	277
#define	OR_BIN	278
#define	AND_BIN	279
#define	XOR_BIN	280
#define	SCOP	281
#define	PLUS	282
#define	MOINS	283
#define	FOIS	284
#define	DIV	285
#define	POWER	286
#define	POINT_VI	287
#define	LEPOINT	288
#define	POINT_DEUX	289
#define	INTERROGATION	290
#define	CHAINE	291
#define	NILL	292
#define	EXEC	293
#define	ACHIEVE	294
#define	ASK	295
#define	BREAK	296
#define	TELL	297
#define	KILL	298
#define	PERROR	299
#define	EVEN	300
#define	BEGIN_GRAMMAR	301
#define	FROM	302
#define	DEFINE	303
#define	GROUP	304
#define	COMPONENT	305
#define	CONSTRUCTION	306
#define	DESTRUCTION	307
#define	MESSAGE_MANAGER	308
#define	MAESSAGELOOP	309
#define	LOCAL	310
#define	STATIC	311
#define	AS	312
#define	DIGITAL	313
#define	COLLECTOR	314
#define	WITH	315
#define	DO	316
#define	END	317
#define	IF	318
#define	THEN	319
#define	BEGINING	320
#define	END_GRAMMAR	321
#define	NEW	322
#define	TRIGGER	323
#define	PRECONDITION	324
#define	POSTCONDITION	325
#define	GOAL	326
#define	RETURN	327
#define	COMMENT	328
#define	STEPS	329
#define	UPDATEEVERY	330
#define	LOGICVAR	331
#define	RULE	332
#define	IA_ASSERT	333
#define	OR	334
#define	AND	335
#define	FUZZY	336
#define	FUZZYRULE	337
#define	FUZZYRULESET	338
#define	SETS	339
#define	FUZZYVAR	340
#define	FIS	341
#define	COS	342
#define	SIN	343
#define	TAN	344
#define	POW	345
#define	LN	346
#define	LOG	347
#define	FACT	348

#line 1 "grammar.yacc"

#include <malloc.h>
#include <list>
#define PARSER_NO_REDEF_YYTABLE_H_
#include "nel/ai/script/compilateur.h"
#include "nel/ai/script/constraint.h"
#include "nel/ai/script/type_def.h"
#include "nel/ai/script/object_unknown.h"
#include "nel/ai/logic/logic.h"
#include "nel/ai/fuzzy/fuzzy.h"
#include "nel/ai/logic/interpret_object_operator.h"
#include "nel/ai/script/interpret_fsm.h"

using  namespace NLAISCRIPT;
using  namespace NLAILOGIC;
using  namespace NLAIFUZZY;
#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		400
#define	YYFLAG		-32768
#define	YYNTBASE	94

#define YYTRANSLATE(x) ((unsigned)(x) <= 348 ? yytranslate[x] : 245)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     5,    10,    14,    16,    21,    22,    29,    31,
    34,    35,    40,    43,    46,    47,    55,    57,    61,    63,
    65,    67,    70,    72,    74,    76,    78,    80,    85,    89,
    91,    94,    98,    99,   103,   104,   108,   110,   112,   114,
   116,   118,   122,   123,   124,   131,   132,   133,   140,   141,
   147,   148,   149,   156,   158,   159,   163,   164,   168,   170,
   173,   174,   179,   182,   183,   184,   185,   196,   197,   204,
   206,   207,   211,   214,   216,   219,   220,   226,   230,   232,
   234,   236,   238,   239,   243,   244,   249,   251,   255,   257,
   261,   264,   266,   267,   268,   275,   277,   281,   283,   285,
   287,   290,   293,   295,   298,   301,   304,   307,   308,   309,
   319,   320,   325,   327,   328,   333,   334,   340,   341,   346,
   348,   350,   352,   356,   359,   361,   363,   364,   370,   371,
   372,   382,   384,   387,   390,   394,   396,   398,   401,   402,
   408,   410,   411,   417,   418,   423,   428,   435,   437,   441,
   443,   445,   450,   452,   454,   457,   458,   463,   464,   469,
   472,   473,   478,   479,   484,   485,   490,   491,   496,   497,
   502,   503,   508,   510,   511,   516,   517,   522,   524,   526,
   528,   530,   532,   534,   536,   538,   540,   542,   544,   546,
   550,   552,   554,   556,   558,   560,   562,   564,   566,   568,
   572,   576,   580,   581,   586,   588,   590,   593,   594,   595,
   602,   605,   607,   609,   610,   611,   618,   620,   621,   625,
   627,   628,   633,   637,   640,   643,   644,   651,   654,   656,
   657,   661,   664,   665,   670,   671,   675,   676,   680,   681,
   682,   689,   690,   694,   696,   697,   702,   703,   704,   712,
   713,   714,   715,   723,   725,   726,   730
};

static const short yyrhs[] = {    95,
     0,    94,    95,     0,    99,     8,   106,     9,     0,    99,
     8,     9,     0,    96,     0,    98,     6,     7,    62,     0,
     0,    98,     6,     7,    97,   160,    62,     0,    53,     0,
   100,   102,     0,     0,    47,     5,   101,    34,     0,    48,
   103,     0,    48,     5,     0,     0,    49,    16,   194,   104,
    13,   105,    15,     0,     5,     0,   105,    13,     5,     0,
   107,     0,   106,     0,   108,     0,   108,   107,     0,   109,
     0,   144,     0,   111,     0,   112,     0,   110,     0,    50,
    34,   182,    62,     0,    50,    34,    62,     0,   116,     0,
   116,   111,     0,    74,    34,   113,     0,     0,     5,   114,
    32,     0,     0,     5,   115,   113,     0,   117,     0,   118,
     0,   126,     0,   121,     0,   124,     0,    73,    34,    36,
     0,     0,     0,    69,    34,   119,   129,   120,    62,     0,
     0,     0,    71,   122,    34,   139,   123,    32,     0,     0,
    75,    34,     4,   125,    32,     0,     0,     0,    70,    34,
   127,   129,   128,    62,     0,   131,     0,     0,   131,   130,
   129,     0,     0,   134,   132,    32,     0,   135,     0,   139,
    32,     0,     0,     8,   160,   133,     9,     0,    35,     5,
     0,     0,     0,     0,    81,     6,     5,   136,    86,   137,
     5,   138,     7,    32,     0,     0,    35,     6,     5,   140,
   141,     7,     0,   143,     0,     0,   143,   142,   141,     0,
    35,     5,     0,   145,     0,   144,   145,     0,     0,   147,
   148,   160,   146,    62,     0,   147,   148,    62,     0,     5,
     0,    52,     0,   149,     0,   151,     0,     0,     6,   150,
     7,     0,     0,     6,   152,   153,     7,     0,   154,     0,
   153,    13,   105,     0,   105,     0,   154,    32,   105,     0,
   155,   158,     0,     5,     0,     0,     0,     5,   156,    16,
     5,   157,    15,     0,   159,     0,   158,    13,   159,     0,
     5,     0,   161,     0,   176,     0,   160,   161,     0,   160,
   176,     0,    32,     0,   165,    32,     0,   162,    32,     0,
   167,    32,     0,   175,    32,     0,     0,     0,     5,   163,
    28,    15,    57,     6,     5,   164,     7,     0,     0,   208,
   166,    12,   195,     0,   169,     0,     0,   167,    33,   168,
   169,     0,     0,   172,     6,   170,   174,   173,     0,     0,
   172,     6,   171,   173,     0,   208,     0,     7,     0,   195,
     0,   174,    13,   195,     0,    72,   195,     0,   179,     0,
   177,     0,     0,   195,    35,   178,   160,    62,     0,     0,
     0,    63,   195,    35,   180,   160,    34,   181,   160,    62,
     0,    32,     0,   183,    32,     0,   182,    32,     0,   182,
   183,    32,     0,   184,     0,   190,     0,   188,    15,     0,
     0,   188,    13,    55,   185,    15,     0,   186,     0,     0,
   188,    13,    56,   187,    15,     0,     0,     5,   189,    16,
    36,     0,    59,    16,   194,    15,     0,    59,    16,   194,
    13,   191,    15,     0,   192,     0,   191,    13,   192,     0,
     5,     0,   193,     0,   207,    33,    33,   207,     0,    36,
     0,   204,     0,    28,   204,     0,     0,   195,   196,    27,
   204,     0,     0,   195,   197,    28,   204,     0,    22,   204,
     0,     0,   195,   198,    19,   204,     0,     0,   195,   199,
    16,   204,     0,     0,   195,   200,    15,   204,     0,     0,
   195,   201,    17,   204,     0,     0,   195,   202,    18,   204,
     0,     0,   195,   203,    14,   204,     0,   207,     0,     0,
   204,   205,    29,   207,     0,     0,   204,   206,    30,   207,
     0,    38,     0,    39,     0,    40,     0,    41,     0,    44,
     0,    42,     0,    43,     0,    45,     0,    37,     0,     4,
     0,   208,     0,   167,     0,     6,   195,     7,     0,   209,
     0,   213,     0,   211,     0,   229,     0,   225,     0,   218,
     0,   235,     0,   230,     0,     5,     0,   167,    33,     5,
     0,   207,    33,     5,     0,   208,    33,     5,     0,     0,
    10,   210,   212,    11,     0,    36,     0,   195,     0,   212,
   195,     0,     0,     0,    67,   214,   217,     6,   215,   216,
     0,   174,     7,     0,     7,     0,     5,     0,     0,     0,
    77,   221,   219,    64,   220,   223,     0,   221,     0,     0,
    63,   222,   223,     0,   225,     0,     0,   225,   224,    80,
   223,     0,   225,    79,   223,     0,    78,   225,     0,    31,
     5,     0,     0,    35,     6,     5,   226,   227,     7,     0,
    35,     5,     0,   195,     0,     0,   195,   228,   227,     0,
    35,     5,     0,     0,    83,     8,   231,   232,     0,     0,
   235,   233,     9,     0,     0,   235,   234,   232,     0,     0,
     0,    82,   238,   236,    64,   237,   240,     0,     0,    63,
   239,   240,     0,   242,     0,     0,   242,   241,    80,   240,
     0,     0,     0,     6,     5,   243,    86,     5,   244,     7,
     0,     0,     0,     0,    85,     0,     5,     0,    84,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   195,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    67,    71,    74,    82,    88,    91,    95,   101,   107,   117,
   120,   136,   138,   139,   158,   161,   164,   165,   167,   168,
   171,   172,   175,   176,   177,   185,   188,   191,   192,   195,
   196,   199,   203,   213,   213,   223,   225,   226,   227,   228,
   229,   234,   250,   257,   278,   281,   287,   328,   330,   351,
   353,   360,   383,   385,   389,   394,   400,   405,   405,   421,
   436,   495,   497,   505,   512,   516,   520,   523,   532,   536,
   540,   545,   547,   555,   556,   559,   618,   618,   679,   687,
   697,   698,   701,   706,   711,   715,   721,   722,   725,   726,
   729,   733,   738,   743,   750,   753,   754,   757,   764,   765,
   766,   767,   770,   771,   772,   773,   780,   787,   792,   800,
   802,   812,   824,   825,   830,   833,   840,   841,   849,   851,
   858,   871,   875,   882,   890,   891,   894,   900,   906,   913,
   918,   924,   925,   926,   927,   930,   931,   935,   936,   942,
   942,   946,   952,   954,   960,   975,   976,   979,   980,   983,
   984,   987,   989,   992,  1000,  1006,  1018,  1023,  1034,  1039,
  1050,  1060,  1066,  1077,  1082,  1092,  1097,  1107,  1112,  1122,
  1127,  1132,  1140,  1144,  1155,  1161,  1173,  1181,  1187,  1192,
  1197,  1202,  1207,  1212,  1217,  1222,  1227,  1233,  1243,  1248,
  1252,  1256,  1260,  1264,  1268,  1272,  1276,  1280,  1287,  1296,
  1308,  1316,  1334,  1339,  1342,  1348,  1352,  1358,  1363,  1368,
  1369,  1373,  1380,  1387,  1393,  1397,  1408,  1411,  1416,  1427,
  1431,  1435,  1439,  1446,  1452,  1464,  1473,  1483,  1490,  1496,
  1503,  1505,  1515,  1520,  1522,  1527,  1530,  1535,  1540,  1546,
  1550,  1557,  1562,  1567,  1571,  1575,  1578,  1596,  1601,  1607,
  1612,  1617,  1621,  1627,  1631,  1636,  1638
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","FIN","NOMBRE",
"IDENT","PAR_G","PAR_D","ACCOL_G","ACCOL_D","CROCHER_G","CROCHER_D","EG_MATH",
"VIRGULE","EG_LOG","SUP","INF","SUP_EG","INF_EG","DIFF","OR_LOG","AND_LOG","NON_BIN",
"OR_BIN","AND_BIN","XOR_BIN","SCOP","PLUS","MOINS","FOIS","DIV","POWER","POINT_VI",
"LEPOINT","POINT_DEUX","INTERROGATION","CHAINE","NILL","EXEC","ACHIEVE","ASK",
"BREAK","TELL","KILL","PERROR","EVEN","BEGIN_GRAMMAR","FROM","DEFINE","GROUP",
"COMPONENT","CONSTRUCTION","DESTRUCTION","MESSAGE_MANAGER","MAESSAGELOOP","LOCAL",
"STATIC","AS","DIGITAL","COLLECTOR","WITH","DO","END","IF","THEN","BEGINING",
"END_GRAMMAR","NEW","TRIGGER","PRECONDITION","POSTCONDITION","GOAL","RETURN",
"COMMENT","STEPS","UPDATEEVERY","LOGICVAR","RULE","IA_ASSERT","OR","AND","FUZZY",
"FUZZYRULE","FUZZYRULESET","SETS","FUZZYVAR","FIS","COS","SIN","TAN","POW","LN",
"LOG","FACT","program","DefinitionClass","MessageRun","@1","MessageManager",
"CorpDeDefinition","HeritageDeType","@2","EnteteDeDefinition","DefinitionDeGroup",
"@3","CParam","DefinitionDeProgram","BlocDeDefinition","UnBloc","Register","RegistDesAttributs",
"RegisterOperator","RegisterSteps","Steps","@4","@5","OpBloc","OpComment","PreCondition",
"@6","@7","Goal","@8","@9","UpdateCycles","@10","PostCondition","@11","@12",
"OperatorCond","@13","SingleOpCond","@14","@15","BooleanCond","FuzzyCond","@16",
"@17","@18","FirstOrderPattern","@19","OpLogicVarSet","@20","OpLogicVar","BlocPourLesCode",
"BlocAvecCode","@21","Methode","Argument","ArgumentVide","@22","ArgumentListe",
"@23","ListesDeVariables","DesParams","TypeOfParam","@24","@25","DeclarationVariables",
"NonDeVariable","DuCode","Code","StaticCast","@26","@27","Affectation","@28",
"AppelleDeFonction","@29","AppelleDeFoncDirect","@30","@31","NonDeFonction",
"CallFunction","Prametre","RetourDeFonction","Evaluation","EvaluationSimpleState",
"@32","EvaluationState","@33","@34","TypeDeDeclaration","RegisterAnyVar","RegisterTypeDef",
"@35","StaticDef","@36","TypeDeComp","@37","RegisterCollector","MessageType",
"DefMessage","Borne","Nom","Expression","@38","@39","@40","@41","@42","@43",
"@44","@45","Term","@46","@47","Facteur","Variable","List","@48","ChaineDeCaractaire",
"ElementList","NewObject","@49","@50","PrametreNew","NewObjectName","Rule","@51",
"@52","RuleCondition","@53","Clause","@54","FactPattern","@55","LogicVarSet",
"@56","LogicVar","FuzzyRuleSet","@57","ListFuzzyRule","@58","@59","FuzzyRule",
"@60","@61","FuzzyCondition","@62","FuzzyClause","@63","FuzzyFactPattern","@64",
"@65", NULL
};
#endif

static const short yyr1[] = {     0,
    94,    94,    95,    95,    95,    96,    97,    96,    98,    99,
   101,   100,   102,   102,   104,   103,   105,   105,   106,   106,
   107,   107,   108,   108,   108,   108,   109,   110,   110,   111,
   111,   112,   114,   113,   115,   113,   116,   116,   116,   116,
   116,   117,   119,   120,   118,   122,   123,   121,   125,   124,
   127,   128,   126,   129,   130,   129,   132,   131,   131,   131,
   133,   131,   134,   136,   137,   138,   135,   140,   139,   141,
   142,   141,   143,   144,   144,   146,   145,   145,   147,   147,
   148,   148,   150,   149,   152,   151,   153,   153,   154,   154,
   105,   155,   156,   157,   155,   158,   158,   159,   160,   160,
   160,   160,   161,   161,   161,   161,   161,   163,   164,   162,
   166,   165,   167,   168,   167,   170,   169,   171,   169,   172,
   173,   174,   174,   175,   176,   176,   178,   177,   180,   181,
   179,   182,   182,   182,   182,   183,   183,   184,   185,   184,
   184,   187,   186,   189,   188,   190,   190,   191,   191,   192,
   192,   193,   194,   195,   195,   196,   195,   197,   195,   195,
   198,   195,   199,   195,   200,   195,   201,   195,   202,   195,
   203,   195,   204,   205,   204,   206,   204,   207,   207,   207,
   207,   207,   207,   207,   207,   207,   207,   207,   207,   207,
   207,   207,   207,   207,   207,   207,   207,   207,   208,   208,
   208,   208,   210,   209,   211,   212,   212,   214,   215,   213,
   216,   216,   217,   219,   220,   218,    -1,   222,   221,   223,
   224,   223,   223,    -1,    -1,   226,   225,   225,   227,   228,
   227,   229,   231,   230,   233,   232,   234,   232,   236,   237,
   235,   239,   238,   240,   241,   240,   243,   244,   242,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1
};

static const short yyr2[] = {     0,
     1,     2,     4,     3,     1,     4,     0,     6,     1,     2,
     0,     4,     2,     2,     0,     7,     1,     3,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     4,     3,     1,
     2,     3,     0,     3,     0,     3,     1,     1,     1,     1,
     1,     3,     0,     0,     6,     0,     0,     6,     0,     5,
     0,     0,     6,     1,     0,     3,     0,     3,     1,     2,
     0,     4,     2,     0,     0,     0,    10,     0,     6,     1,
     0,     3,     2,     1,     2,     0,     5,     3,     1,     1,
     1,     1,     0,     3,     0,     4,     1,     3,     1,     3,
     2,     1,     0,     0,     6,     1,     3,     1,     1,     1,
     2,     2,     1,     2,     2,     2,     2,     0,     0,     9,
     0,     4,     1,     0,     4,     0,     5,     0,     4,     1,
     1,     1,     3,     2,     1,     1,     0,     5,     0,     0,
     9,     1,     2,     2,     3,     1,     1,     2,     0,     5,
     1,     0,     5,     0,     4,     4,     6,     1,     3,     1,
     1,     4,     1,     1,     2,     0,     4,     0,     4,     2,
     0,     4,     0,     4,     0,     4,     0,     4,     0,     4,
     0,     4,     1,     0,     4,     0,     4,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
     3,     3,     0,     4,     1,     1,     2,     0,     0,     6,
     2,     1,     1,     0,     0,     6,     1,     0,     3,     1,
     0,     4,     3,     2,     2,     0,     6,     2,     1,     0,
     3,     2,     0,     4,     0,     3,     0,     3,     0,     0,
     6,     0,     3,     1,     0,     4,     0,     0,     7,     0,
     0,     0,     7,     1,     0,     3,     1
};

static const short yydefact[] = {     0,
     0,     9,     0,     1,     5,     0,     0,     0,    11,     2,
     0,     0,     0,    10,     0,     7,    79,     4,     0,    80,
     0,     0,    46,     0,     0,     0,     0,    19,    21,    23,
    27,    25,    26,    30,    37,    38,    40,    41,    39,    24,
    74,     0,    14,     0,    13,    12,     6,     0,     0,    43,
    51,     0,     0,     0,     0,     3,    22,    31,    75,    83,
     0,    81,    82,     0,   187,   199,     0,   203,     0,     0,
   103,     0,   205,   186,   178,   179,   180,   181,   183,   184,
   182,   185,     0,   208,     0,     0,     0,     0,     0,    99,
     0,     0,   189,   113,     0,     0,   100,   126,   125,   156,
   154,   173,   188,   191,   193,   192,   196,   195,   194,   198,
   197,   144,   132,     0,    29,     0,     0,   136,   141,     0,
   137,     0,     0,     0,    42,    33,    32,    49,     0,     0,
    78,    76,   153,    15,     0,   199,   189,   156,   188,     0,
   160,   155,   228,     0,   156,     0,   124,   218,   214,   242,
   239,   233,     8,   101,   102,   105,   104,   106,   114,   116,
   107,   127,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   134,    28,     0,
   133,     0,   138,     0,     0,     0,    44,    55,    57,    59,
     0,    52,     0,    47,     0,     0,     0,    84,    17,    89,
     0,    87,     0,     0,     0,     0,   190,   206,     0,   226,
   129,   213,     0,     0,     0,     0,     0,     0,   200,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   201,   202,     0,     0,     0,   135,   139,
   142,    61,    63,     0,     0,     0,     0,     0,    60,     0,
     0,    34,    36,    50,     0,     0,    86,     0,     0,    98,
    91,    96,    77,     0,     0,   204,   207,     0,     0,   209,
     0,   219,   220,   215,     0,   243,   244,   240,   234,   235,
   115,     0,     0,   122,   121,   119,     0,   157,   159,   162,
   164,   166,   168,   170,   172,   175,   177,   112,   145,     0,
   146,     0,     0,     0,    68,    64,    45,    56,    58,    53,
    48,     0,    18,    88,    90,     0,     0,     0,   230,     0,
     0,     0,   228,     0,     0,     0,   247,     0,     0,     0,
     0,     0,   117,   128,   150,     0,   148,   151,     0,   140,
   143,    62,     0,     0,    94,    97,    16,     0,     0,   227,
   130,   212,     0,   210,   223,     0,   216,     0,     0,   241,
   236,   238,   123,     0,   147,     0,     0,     0,    70,    65,
     0,   109,   231,     0,   211,   222,     0,   246,   149,     0,
    73,    69,     0,     0,    95,     0,     0,   248,   152,    72,
    66,   110,   131,     0,     0,   249,     0,    67,     0,     0
};

static const short yydefgoto[] = {     3,
     4,     5,    48,     6,     7,     8,    15,    14,    45,   205,
   200,    27,    28,    29,    30,    31,    32,    33,   127,   195,
   196,    34,    35,    36,   122,   246,    37,    52,   251,    38,
   197,    39,   123,   250,   187,   247,   188,   248,   304,   189,
   190,   344,   384,   395,   191,   343,   368,   383,   369,    40,
    41,   204,    42,    61,    62,   129,    63,   130,   201,   202,
   203,   255,   371,   261,   262,    89,    90,    91,   135,   386,
    92,   175,   137,   220,    94,   221,   222,    95,   286,   283,
    96,    97,    98,   223,    99,   269,   374,   116,   117,   118,
   302,   119,   303,   120,   176,   121,   336,   337,   338,   134,
   100,   163,   164,   165,   166,   167,   168,   169,   170,   101,
   171,   172,   102,   139,   104,   140,   105,   209,   106,   146,
   322,   354,   213,   107,   215,   326,   149,   214,   272,   325,
   108,   268,   320,   349,   109,   110,   218,   279,   330,   331,
   111,   217,   329,   151,   216,   276,   328,   277,   358,   394
};

static const short yypact[] = {   -28,
    30,-32768,    39,-32768,-32768,    34,    90,     3,-32768,-32768,
    96,    70,    11,-32768,    73,    51,-32768,-32768,    95,-32768,
   101,   112,-32768,   121,   124,   131,   129,-32768,   110,-32768,
-32768,-32768,-32768,    57,-32768,-32768,-32768,-32768,-32768,     5,
-32768,   176,-32768,   162,-32768,-32768,-32768,   486,    21,-32768,
-32768,   169,   168,   200,   204,-32768,-32768,-32768,-32768,   206,
    27,-32768,-32768,   173,-32768,   184,   637,-32768,   651,   651,
-32768,    38,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   637,-32768,   637,   153,   154,   210,   209,-32768,
   188,   192,    44,-32768,   217,   193,-32768,-32768,-32768,   172,
    94,   194,    75,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   212,-32768,    29,   197,-32768,-32768,    43,
-32768,     1,     1,   195,-32768,   221,-32768,-32768,   225,   228,
-32768,   486,-32768,-32768,   214,-32768,   201,   135,    67,   637,
    94,    94,-32768,   233,   279,   238,   303,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   251,   248,
-32768,-32768,   231,   234,   240,   245,   260,   246,   261,   266,
   253,   254,   278,   280,   276,   273,   173,-32768,-32768,   258,
-32768,    78,-32768,   486,   187,   293,-32768,   241,-32768,-32768,
   268,-32768,   298,-32768,   274,   200,   277,-32768,    22,   292,
    15,   281,   318,   262,   295,   310,-32768,   303,   537,-32768,
-32768,-32768,   323,   297,   269,   329,   272,   255,-32768,   651,
   637,   345,   486,   651,   651,   651,   651,   651,   651,   651,
   651,   651,   651,-32768,-32768,   637,   317,    80,-32768,-32768,
-32768,   486,-32768,   349,   350,   294,     1,   325,-32768,   296,
   327,-32768,-32768,-32768,   344,   356,-32768,   228,   228,-32768,
   351,-32768,-32768,   228,   305,-32768,   303,   637,   486,-32768,
   191,-32768,   119,-32768,   358,-32768,   285,-32768,-32768,   284,
   334,   194,    41,   303,-32768,-32768,   306,    94,    94,    94,
    94,    94,    94,    94,    94,   194,   194,   303,-32768,   701,
-32768,   355,   357,   362,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   372,-32768,   292,   292,   318,    99,   373,   250,   374,
   370,   587,-32768,   297,   302,   297,-32768,   304,   329,   376,
   255,   637,-32768,-32768,    68,   104,-32768,-32768,   353,-32768,
-32768,-32768,   352,   307,-32768,-32768,-32768,   385,   637,-32768,
-32768,-32768,    89,-32768,-32768,   297,-32768,   308,   329,-32768,
-32768,-32768,   303,   701,-32768,    19,   386,   388,   361,-32768,
   382,-32768,-32768,   486,-32768,-32768,   394,-32768,-32768,   651,
-32768,-32768,   352,   395,-32768,   396,   422,-32768,   194,-32768,
-32768,-32768,-32768,   409,   410,-32768,   369,-32768,   418,-32768
};

static const short yypgoto[] = {-32768,
   416,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -153,-32768,   391,-32768,-32768,-32768,   387,-32768,   226,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -116,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   299,-32768,    42,-32768,-32768,-32768,
   384,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   113,   -59,   -86,-32768,-32768,-32768,
-32768,-32768,   -48,-32768,   211,-32768,-32768,-32768,   147,   114,
-32768,   -85,-32768,-32768,-32768,-32768,-32768,-32768,   319,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    74,-32768,   257,
   -62,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -58,
-32768,-32768,  -203,   -47,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -306,-32768,
  -208,-32768,    91,-32768,-32768,-32768,-32768,   108,-32768,-32768,
  -210,-32768,-32768,-32768,-32768,  -314,-32768,-32768,-32768,-32768
};


#define	YYLAST		784


static const short yytable[] = {    93,
   103,   132,   154,   155,   138,   273,   192,   280,   184,    17,
   141,   142,    93,   103,   360,    43,   282,   355,     1,   357,
   145,   257,   147,   234,     2,   112,   -92,   258,   296,   297,
    65,    66,    67,   112,     9,   185,    68,   -93,   399,    11,
    93,   103,   143,   144,   378,   154,   155,   285,    69,   376,
    13,   380,   113,   332,    70,   182,    20,   183,    71,    44,
   178,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,  -120,  -199,    17,   158,   159,   208,    18,   114,
  -120,   186,   115,    93,   103,     1,  -111,   114,   131,    83,
   179,     2,   300,    84,   301,   375,   339,    12,    85,   174,
  -199,   332,    16,    86,   314,   315,    46,   174,    87,    88,
   317,   256,    47,   347,    17,   273,   364,   273,   365,    19,
   280,    20,  -174,  -176,   242,    21,    22,    23,    49,    24,
   308,    26,   240,   241,    50,    93,   103,    56,    21,    22,
    23,   207,    24,    25,    26,    51,   267,   273,  -171,  -165,
  -163,  -167,  -169,  -161,    53,   154,   155,    54,   284,    19,
   339,    20,  -158,   287,    55,   288,   289,   290,   291,   292,
   293,   294,   295,   298,    93,   103,   389,    64,    21,    22,
    23,    60,    24,    25,    26,  -171,  -165,  -163,  -167,  -169,
  -161,   243,   244,    93,   103,   323,   144,   324,  -221,  -158,
   154,   155,   124,   125,   126,   319,   162,   128,   133,   321,
   -85,  -108,    65,    66,    67,   148,   150,   152,    68,   156,
    93,   103,   160,   157,   161,   -35,   173,   177,   181,   193,
    69,   198,   199,   159,   154,   155,    70,   210,    93,   103,
    71,   206,   212,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,  -118,   219,  -229,   224,   226,   284,
   227,   225,   229,  -171,  -165,  -163,  -167,  -169,  -161,   363,
   153,    83,    93,   103,   228,    84,  -156,  -158,   230,   231,
    85,   232,   234,   233,   235,    86,   319,   236,   237,   239,
    87,    88,  -171,  -165,  -163,  -167,  -169,  -161,   245,   249,
   154,   155,   -54,   244,   256,   252,  -158,   264,   254,    65,
    66,    67,   259,   211,   387,    68,  -171,  -165,  -163,  -167,
  -169,  -161,   260,   263,   265,    93,   103,    69,   270,  -156,
  -158,   271,   274,    70,   275,   278,    87,    71,    93,   103,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,   285,   299,   305,   306,   307,   309,   310,   311,   312,
   313,   318,   327,   316,  -245,  -237,  -113,   334,    83,   340,
   342,   341,    84,    65,    66,    67,   345,    85,   348,    68,
   350,   356,    86,   359,   361,   366,   367,    87,    88,   372,
   381,    69,   370,   377,   382,   -71,   385,    70,   388,   391,
   398,    71,   392,   351,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,   396,   397,   400,    10,    57,
    58,   253,   194,    59,   390,    65,    66,    67,   346,   333,
   281,    68,    83,   238,   180,   353,    84,   379,   362,   373,
     0,    85,     0,    69,     0,     0,    86,     0,     0,    70,
     0,    87,    88,    71,     0,     0,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   393,    83,     0,     0,     0,    84,    65,
    66,    67,     0,    85,     0,    68,     0,     0,    86,     0,
     0,     0,     0,    87,    88,     0,     0,    69,     0,     0,
     0,     0,     0,    70,     0,     0,     0,    71,     0,     0,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    65,   136,    67,     0,     0,     0,    68,   266,    83,     0,
     0,     0,    84,     0,     0,     0,     0,    85,    69,     0,
     0,     0,    86,     0,    70,     0,     0,    87,    88,     0,
     0,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,     0,     0,     0,     0,     0,     0,     0,     0,
    65,   136,    67,   352,     0,     0,    68,     0,     0,     0,
     0,     0,     0,    84,     0,     0,     0,     0,    69,     0,
     0,     0,     0,    86,    70,     0,     0,     0,    87,    88,
     0,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,     0,     0,     0,     0,     0,     0,     0,     0,
    65,   136,    67,     0,     0,     0,    68,     0,     0,     0,
     0,     0,     0,    84,    65,   136,    67,     0,    69,     0,
    68,     0,     0,    86,    70,     0,     0,     0,    87,    88,
     0,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,     0,     0,     0,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,     0,     0,     0,     0,
     0,     0,     0,    84,    65,   335,    67,     0,     0,     0,
    68,     0,     0,    86,     0,     0,     0,    84,    87,    88,
     0,     0,     0,     0,     0,     0,     0,    86,     0,     0,
     0,     0,    87,    88,     0,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    84,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    86,     0,     0,
     0,     0,    87,    88
};

static const short yycheck[] = {    48,
    48,    61,    89,    89,    67,   214,   123,   218,     8,     5,
    69,    70,    61,    61,   329,     5,   220,   324,    47,   326,
    83,     7,    85,     5,    53,     5,     5,    13,   232,   233,
     4,     5,     6,     5,     5,    35,    10,    16,     0,     6,
    89,    89,     5,     6,   359,   132,   132,     7,    22,   356,
    48,    33,    32,    13,    28,    13,    52,    15,    32,    49,
    32,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,     6,     6,     5,    32,    33,   140,     9,    59,
     6,    81,    62,   132,   132,    47,    12,    59,    62,    63,
    62,    53,    13,    67,    15,     7,   300,     8,    72,    33,
    33,    13,     7,    77,   258,   259,    34,    33,    82,    83,
   264,    13,    62,    15,     5,   324,    13,   326,    15,    50,
   331,    52,    29,    30,   184,    69,    70,    71,    34,    73,
   247,    75,    55,    56,    34,   184,   184,     9,    69,    70,
    71,     7,    73,    74,    75,    34,   209,   356,    14,    15,
    16,    17,    18,    19,    34,   242,   242,    34,   221,    50,
   364,    52,    28,   223,    34,   224,   225,   226,   227,   228,
   229,   230,   231,   236,   223,   223,   380,    16,    69,    70,
    71,     6,    73,    74,    75,    14,    15,    16,    17,    18,
    19,     5,     6,   242,   242,     5,     6,    79,    80,    28,
   287,   287,    34,    36,     5,   268,    35,     4,    36,   269,
     5,    28,     4,     5,     6,    63,    63,     8,    10,    32,
   269,   269,     6,    32,    32,     5,    33,    16,    32,    35,
    22,     7,     5,    33,   321,   321,    28,     5,   287,   287,
    32,    28,     5,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,     7,     5,     7,    27,    19,   322,
    16,    28,    17,    14,    15,    16,    17,    18,    19,   332,
    62,    63,   321,   321,    15,    67,    27,    28,    18,    14,
    72,    29,     5,    30,     5,    77,   349,    12,    16,    32,
    82,    83,    14,    15,    16,    17,    18,    19,     6,    32,
   387,   387,    62,     6,    13,    32,    28,    13,    32,     4,
     5,     6,    32,    35,   374,    10,    14,    15,    16,    17,
    18,    19,     5,    62,    15,   374,   374,    22,     6,    27,
    28,    35,    64,    28,     6,    64,    82,    32,   387,   387,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,     7,    36,     5,     5,    62,    32,    62,    32,    16,
     5,    57,     5,    13,    80,    82,    33,    62,    63,    15,
     9,    15,    67,     4,     5,     6,     5,    72,     6,    10,
     7,    80,    77,    80,     9,    33,    35,    82,    83,     5,
     5,    22,    86,    86,     7,    35,    15,    28,     5,     5,
    32,    32,     7,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,     7,     7,     0,     3,    29,
    34,   196,   124,    40,   383,     4,     5,     6,   316,   283,
   220,    10,    63,   177,   116,   322,    67,   364,   331,   349,
    -1,    72,    -1,    22,    -1,    -1,    77,    -1,    -1,    28,
    -1,    82,    83,    32,    -1,    -1,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    62,    63,    -1,    -1,    -1,    67,     4,
     5,     6,    -1,    72,    -1,    10,    -1,    -1,    77,    -1,
    -1,    -1,    -1,    82,    83,    -1,    -1,    22,    -1,    -1,
    -1,    -1,    -1,    28,    -1,    -1,    -1,    32,    -1,    -1,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     4,     5,     6,    -1,    -1,    -1,    10,    11,    63,    -1,
    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    22,    -1,
    -1,    -1,    77,    -1,    28,    -1,    -1,    82,    83,    -1,
    -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     4,     5,     6,     7,    -1,    -1,    10,    -1,    -1,    -1,
    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    22,    -1,
    -1,    -1,    -1,    77,    28,    -1,    -1,    -1,    82,    83,
    -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     4,     5,     6,    -1,    -1,    -1,    10,    -1,    -1,    -1,
    -1,    -1,    -1,    67,     4,     5,     6,    -1,    22,    -1,
    10,    -1,    -1,    77,    28,    -1,    -1,    -1,    82,    83,
    -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    -1,    -1,    -1,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    67,     4,     5,     6,    -1,    -1,    -1,
    10,    -1,    -1,    77,    -1,    -1,    -1,    67,    82,    83,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,
    -1,    -1,    82,    83,    -1,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,    -1,
    -1,    -1,    82,    83
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
CCompilateur::yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 68 "grammar.yacc"
{
								
							;
    break;}
case 3:
#line 78 "grammar.yacc"
{						
								if(!computContraint()) return false;
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 4:
#line 85 "grammar.yacc"
{
								((NLAIAGENT::IObjectIA *)_SelfClass.pop())->release();
							;
    break;}
case 7:
#line 97 "grammar.yacc"
{
								initMessageManager();
							;
    break;}
case 8:
#line 102 "grammar.yacc"
{
								if(!endMessageManager()) return 0;
							;
    break;}
case 9:
#line 108 "grammar.yacc"
{
								if(_ResultCompile != NULL) 
								{
									yyerror("an MessageManager block had all ready declared");
									return 0;
								}								
							;
    break;}
case 11:
#line 121 "grammar.yacc"
{
								NLAIAGENT::CStringVarName interfName(LastyyText[1]);																																
								try
								{	
									NLAIC::CIdentType id = getTypeOfClass(interfName);
									_SelfClass.push((IClassInterpret *)(((CClassInterpretFactory *)id.getFactory())->getClass()->newInstance()));
									((IClassInterpret *)_SelfClass.get())->setInheritanceName(interfName);
								}
								catch(NLAIE::IException &a)
								{									
									yyerror((char *)a.what());
									return 0;
								}
							;
    break;}
case 14:
#line 140 "grammar.yacc"
{
								try
								{
									NLAIC::CIdentType id(LastyyText[1]);
									char text[1024*4];
									sprintf(text,"class '%s' all ready exist",LastyyText[1]);
									yyerror(text);
									return 0;
								}
								catch(NLAIE::IException &)
								{
									( (IClassInterpret *) _SelfClass.get() )->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
									( (IClassInterpret *) _SelfClass.get() )->buildVTable();
									RegisterClass();
								}
							;
    break;}
case 15:
#line 159 "grammar.yacc"
{
								((IClassInterpret *)_SelfClass.get())->setClassName(NLAIAGENT::CStringVarName(LastyyText[1]));
							;
    break;}
case 25:
#line 178 "grammar.yacc"
{
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->buildLogicTables();
								}
							;
    break;}
case 33:
#line 204 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[1] ) );
							;
    break;}
case 35:
#line 214 "grammar.yacc"
{
#ifdef NL_DEBUG
								const char *dbg_y0 = LastyyText[0];
								const char *dbg_y1 = LastyyText[1];
#endif
								CSeqFsmClass *fsm_class = (CSeqFsmClass *) _SelfClass.get();
								fsm_class->addStep( NLAIAGENT::CStringVarName( LastyyText[0] ) );
							;
    break;}
case 42:
#line 237 "grammar.yacc"
{
								char *txt1 = LastyyText[0];
								char *txt2 = LastyyText[1];
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setComment( LastyyText[1] );
								}


							;
    break;}
case 43:
#line 251 "grammar.yacc"
{
								is_cond = true;
								initParam();
								_InCond = true;
							;
    break;}
case 44:
#line 257 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
/*									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderCond( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
									}
*/
									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeCond( _LastCodeBranche.front() );
										_LastCodeBranche.pop_front();
									}
								}
								_InCond = false;
							;
    break;}
case 46:
#line 282 "grammar.yacc"
{
								if ( !classIsAnOperator() )
								 	return 0;
							;
    break;}
case 47:
#line 288 "grammar.yacc"
{
								if ( _Goal ) 
								{
									_Goal->release();
									_Goal = NULL;
								}
								
								if ( classIsAnOperator() )
								{
									// Builds a FactPattern

//							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
//							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );

									// Adds it as goal to the operator class
									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->setGoal( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
								}
							;
    break;}
case 49:
#line 331 "grammar.yacc"
{
									if ( classIsAnOperator() )
									{
										sint32 update = (sint32) LastyyNum;
										COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
										op_class->setUpdateEvery( update );
										if(_LastFact.Value != NULL) 
										{
											_LastFact.Value->release();
											_LastFact.Value = NULL;
										}

										if(_FlotingExpressionType != NULL)
										{
											_FlotingExpressionType->release();
											_FlotingExpressionType = NULL;
										}
									}	
								;
    break;}
case 51:
#line 354 "grammar.yacc"
{
								is_cond = false;
								initParam();
								_InCond = true;
							;
    break;}
case 52:
#line 360 "grammar.yacc"
{
								// Adds the conds to the operator class
								if ( classIsAnOperator() )
								{

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
/*									while ( _LastAsserts.size() )
									{
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );
										_LastAsserts.pop_back();
										_LastLogicParams.pop_back();
									}
									*/

									while ( _LastCodeBranche.size() )
									{
										op_class->addCodeConc( _LastCodeBranche.back() );
										_LastCodeBranche.pop_back();
									}
								}
								_InCond = false;
							;
    break;}
case 54:
#line 386 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 55:
#line 390 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 56:
#line 394 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 57:
#line 401 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);	// To put breakpoints for debugging...
							;
    break;}
case 59:
#line 406 "grammar.yacc"
{

								if ( classIsAnOperator() )
								{

									NLAIAGENT::CStringVarName *vvar = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									NLAIAGENT::CStringVarName *vset = _LastFuzzyConds.back();
									_LastFuzzyConds.pop_back();

									COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
									op_class->addFuzzyCond(vvar, vset);
								}
							;
    break;}
case 60:
#line 423 "grammar.yacc"
{									
								COperatorClass *op_class = (COperatorClass *) _SelfClass.get();
								while ( _LastAsserts.size() )
								{
									if ( is_cond )
										op_class->addFirstOrderCond( _LastAsserts.back(), _LastLogicParams.back() );
									else
										op_class->addFirstOrderConc( _LastAsserts.back(), _LastLogicParams.back() );

									_LastAsserts.pop_back();
									_LastLogicParams.pop_back();
								}
							;
    break;}
case 61:
#line 437 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
//										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_LastCodeBranche.push_back( (IOpCode *) listCode );
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}							

/*								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}				
*/				
							;
    break;}
case 63:
#line 498 "grammar.yacc"
{
							char *param_name = LastyyText[1];
							_LastBooleanConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
						;
    break;}
case 64:
#line 507 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 65:
#line 512 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 66:
#line 516 "grammar.yacc"
{
								char *param_name = LastyyText[1];
								_LastFuzzyConds.push_back( new NLAIAGENT::CStringVarName( param_name ) );
							;
    break;}
case 68:
#line 526 "grammar.yacc"
{
							const char *assert_name = LastyyText[1];
							_LastAsserts.push_back( new NLAIAGENT::CStringVarName( LastyyText[1] ) );
							_LastLogicParams.push_back( std::list<const NLAIAGENT::IVarName *>() );
						;
    break;}
case 70:
#line 537 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 71:
#line 541 "grammar.yacc"
{
								for (int i = 0; i < 20; i++);  // To put breakpoints for debugging...
							;
    break;}
case 73:
#line 548 "grammar.yacc"
{
							char *var_name = LastyyText[1];
							_LastLogicParams.back().push_back( new NLAIAGENT::CStringVarName( var_name ) );
						;
    break;}
case 76:
#line 561 "grammar.yacc"
{
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{										
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}

								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}								
								if(!caseRunMsg()) return false;
							;
    break;}
case 78:
#line 620 "grammar.yacc"
{	
								if(_LastBloc != NULL && !_LastBloc->isCodeMonted())
								{
									_VarState.popMark();

									IOpCode *x;
									if(!_InLineParse)
									{
										if (_Debug)
										{
											x = new CFreeAllocDebug();
										}
										else
										{
											x = new CFreeAlloc();
										}
										_LastBloc->addCode(x);
									}
									x = new CHaltOpCode();									
									_LastBloc->addCode(x);

									CCodeBrancheRun* listCode;
									if (_Debug)
									{
										listCode = _LastBloc->getCodeDebug(_SourceFileName);
									}
									else
									{
										listCode = _LastBloc->getCode();
									}

									if(listCode != NULL)
									{
										((IClassInterpret *)_SelfClass.get())->getBrancheCode().setCode((IOpCode *)listCode);										
										_Heap -= (sint32)_Heap;
										if(_Heap.restoreStackState()) _Heap.restoreStack();
										if(_Heap.restoreShiftState()) _Heap.restoreShift();
										_Heap -= (sint32)_Heap;									
										//listCode->release();
									}
												
									_DecalageHeap = 0;
									CVarPStackParam::_Shift = 0;
								}
								if(_IsVoid)
								{
									IOpType *x = new COperandVoid();									
									((IClassInterpret *)_SelfClass.get())->getBrancheCode().setTypeOfMethode(x);
								}
								else
								{
									_IsVoid = true;
								}
								if(!caseRunMsg()) return false;

							;
    break;}
case 79:
#line 680 "grammar.yacc"
{				
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 80:
#line 688 "grammar.yacc"
{
								NLAIAGENT::CStringVarName name(LastyyText[1]);
								//name += NLAIAGENT::CStringVarName(LastyyText[1]);
								//((IClassInterpret *)_SelfClass.get())->addBrancheCode(name);
								_MethodName.push_back(name);
								_IsVoid = true;
							;
    break;}
case 83:
#line 702 "grammar.yacc"
{								
								initParam();
							;
    break;}
case 84:
#line 706 "grammar.yacc"
{
								if(!registerMethod()) return false;
							;
    break;}
case 85:
#line 712 "grammar.yacc"
{
								initParam();
							;
    break;}
case 86:
#line 716 "grammar.yacc"
{
								registerMethod();
							;
    break;}
case 92:
#line 734 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[0]);
								_BaseObjectDef = false;
							;
    break;}
case 93:
#line 739 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 94:
#line 744 "grammar.yacc"
{
								_LastBaseObjectDef = NLAIAGENT::CStringVarName(LastyyText[1]);
								_BaseObjectDef = true;

							;
    break;}
case 98:
#line 758 "grammar.yacc"
{
								if(!setParamVarName()) return 0;
							;
    break;}
case 106:
#line 774 "grammar.yacc"
{
								_LastStringParam.back()->release();
								_LastStringParam.pop_back();
								_Param.back()->release();
								_Param.pop_back();								
							;
    break;}
case 107:
#line 782 "grammar.yacc"
{
								_LastBloc->addCode((new CHaltOpCode));
							;
    break;}
case 108:
#line 788 "grammar.yacc"
{
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
							;
    break;}
case 109:
#line 796 "grammar.yacc"
{					
								NLAIAGENT::CStringVarName x(LastyyText[1]);			
								if(!castVariable(_LastString,x)) return false;
							;
    break;}
case 111:
#line 803 "grammar.yacc"
{								
								std::list<NLAISCRIPT::CStringType>::iterator i = _LasVarStr.begin();
								_LasAffectationVarStr.clear();
								while(i != _LasVarStr.end())
								{
									_LasAffectationVarStr.push_back(*i++);
								}												
							;
    break;}
case 112:
#line 813 "grammar.yacc"
{
								if(!affectation()) 
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 114:
#line 826 "grammar.yacc"
{
								
							;
    break;}
case 116:
#line 834 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 118:
#line 842 "grammar.yacc"
{								
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
								_Param.push_back(new CParam);								
								_ExpressionTypeTmp.push_back(_ExpressionType); 
								_ExpressionType = NULL;
							;
    break;}
case 120:
#line 852 "grammar.yacc"
{
								nameMethodeProcessing();
							;
    break;}
case 121:
#line 859 "grammar.yacc"
{	
								_ExpressionType = _ExpressionTypeTmp.back();
								_ExpressionTypeTmp.pop_back();								
								if(!callFunction())
								{
									_FromStack.pop_back();
									return 0;	
								}
								_FromStack.pop_back();
							;
    break;}
case 122:
#line 872 "grammar.yacc"
{
								pushParamExpression();								
							;
    break;}
case 123:
#line 877 "grammar.yacc"
{
								pushParamExpression();
							;
    break;}
case 124:
#line 884 "grammar.yacc"
{
								if ( !_InCond )
									if(!typeOfMethod()) return false;
							;
    break;}
case 127:
#line 896 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 128:
#line 901 "grammar.yacc"
{
								interrogationEnd();
							;
    break;}
case 129:
#line 909 "grammar.yacc"
{								
								ifInterrogation();
							;
    break;}
case 130:
#line 914 "grammar.yacc"
{								
								ifInterrogationPoint()
							;
    break;}
case 131:
#line 919 "grammar.yacc"
{
								ifInterrogationEnd();
							;
    break;}
case 139:
#line 937 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Local = true;								
							;
    break;}
case 142:
#line 947 "grammar.yacc"
{
								CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);								
								if(c != NULL) c->Static = true;
							;
    break;}
case 144:
#line 955 "grammar.yacc"
{								
								_LastString = NLAIAGENT::CStringVarName(LastyyText[1]);
								_LastRegistered = ((IClassInterpret *)_SelfClass.get())->registerComponent(_LastString);
							;
    break;}
case 145:
#line 961 "grammar.yacc"
{
								if(((IClassInterpret *)_SelfClass.get())->getComponent(NLAIAGENT::CStringVarName(LastyyText[1])) == NULL)
								{
									CComponent *c = ((IClassInterpret *)_SelfClass.get())->getComponent(_LastRegistered);
									c->ObjectName = new NLAIAGENT::CStringVarName(LastyyText[1]);									
								}
								else
								{
									yyerror("variable all ready declared in the Register components");
									return 0;			
								}
							;
    break;}
case 154:
#line 993 "grammar.yacc"
{	
								if(_FacteurEval)
								{								
									allocExpression(NULL);
									setTypeExpression();
								}
							;
    break;}
case 155:
#line 1001 "grammar.yacc"
{								
								allocExpression(new CNegOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opAdd,"(-)");
								
							;
    break;}
case 156:
#line 1007 "grammar.yacc"
{	
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opAdd))
								{
									yyerror("erreur sémantique l'operateur + n'est pas supporté par cette expression");
									return 0;
								}*/								
								setTypeExpressionG();
								allocExpression(NULL);
								
								
							;
    break;}
case 157:
#line 1019 "grammar.yacc"
{									
								allocExpression(new CAddOpCode,true);		
								setTypeExpressionD(NLAIC::CTypeOfOperator::opAdd,"+");	
							;
    break;}
case 158:
#line 1024 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSub))
								{
									yyerror("erreur sémantique l'operateur - n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);
								
							;
    break;}
case 159:
#line 1035 "grammar.yacc"
{								
								allocExpression(new CSubOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSub,"-");							
							;
    break;}
case 160:
#line 1040 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opNot))
								{
									yyerror("erreur sémantique l'operateur ! n'est pas supporté par cette expression");
									return 0;
								}*/								
								allocExpression(new CNotOpCode);
								setTypeExpression(NLAIC::CTypeOfOperator::opNot,"!");
								
							;
    break;}
case 161:
#line 1051 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiff))
								{
									yyerror("erreur sémantique l'operateur != n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 162:
#line 1061 "grammar.yacc"
{								
								allocExpression(new CDiffOpCode,true);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiff,"!=");
								
							;
    break;}
case 163:
#line 1067 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInf))
								{
									yyerror("erreur sémantique l'operateur < n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
								
							;
    break;}
case 164:
#line 1078 "grammar.yacc"
{								
								allocExpression(new CInfOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInf,"<");							
							;
    break;}
case 165:
#line 1083 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSup))
								{
									yyerror("erreur sémantique l'operateur > n'est pas supporté par cette expression");
									return 0;
								}*/				
								setTypeExpressionG();				
								allocExpression(NULL);								
							;
    break;}
case 166:
#line 1093 "grammar.yacc"
{								
								allocExpression(new CSupOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSup,">");							
							;
    break;}
case 167:
#line 1098 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opSupEq))
								{
									yyerror("erreur sémantique l'operateur >= n'est pas supporté par cette expression");
									return 0;
								}*/					
								setTypeExpressionG();			
								allocExpression(NULL);
							;
    break;}
case 168:
#line 1108 "grammar.yacc"
{								
								allocExpression(new CSupEqOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opSupEq,">=");
							;
    break;}
case 169:
#line 1113 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opInfEq))
								{
									yyerror("erreur sémantique l'operateur <= n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();			
								allocExpression(NULL);								
							;
    break;}
case 170:
#line 1123 "grammar.yacc"
{								
								allocExpression(new CInfEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opInfEq,"<=");
							;
    break;}
case 171:
#line 1128 "grammar.yacc"
{
								setTypeExpressionG();	
								allocExpression(NULL);														
							;
    break;}
case 172:
#line 1133 "grammar.yacc"
{								
								allocExpression(new CEqOpCode,false);
								setTypeExpressionD(NLAIC::CTypeOfOperator::opEq,"==");

							;
    break;}
case 173:
#line 1141 "grammar.yacc"
{
								_FacteurEval = true;	
							;
    break;}
case 174:
#line 1145 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opMul))
								{
									yyerror("erreur sémantique l'operateur * n'est pas supporté par cette expression");
									return 0;
								}*/
								setTypeExpressionG();								
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 175:
#line 1156 "grammar.yacc"
{									
								setTypeExpressionD(NLAIC::CTypeOfOperator::opMul,"+");
								allocExpression(new CMulOpCode,false);
								_FacteurEval = false;
							;
    break;}
case 176:
#line 1162 "grammar.yacc"
{
								/*if(!(_lastOperatorType & NLAIC::CTypeOfOperator::opDiv))
								{
									yyerror("erreur sémantique l'operateur / n'est pas supporté par cette expression");
									return 0;
								}*/
											
								setTypeExpressionG();
								allocExpression(NULL);
								_FacteurEval = false;								
							;
    break;}
case 177:
#line 1174 "grammar.yacc"
{																
								allocExpression(new CDivOpCode,false);	
								setTypeExpressionD(NLAIC::CTypeOfOperator::opDiv,"/");
								_FacteurEval = false;	
							;
    break;}
case 178:
#line 1183 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PExec);
							;
    break;}
case 179:
#line 1188 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAchieve);
							;
    break;}
case 180:
#line 1193 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PAsk);
							;
    break;}
case 181:
#line 1198 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PBreak);
							;
    break;}
case 182:
#line 1203 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PError);
							;
    break;}
case 183:
#line 1208 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PTell);
							;
    break;}
case 184:
#line 1213 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PKill);
							;
    break;}
case 185:
#line 1218 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setPerformative(NLAIAGENT::IMessageBase::PEven);
							;
    break;}
case 186:
#line 1223 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVarNill();
							;
    break;}
case 187:
#line 1229 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
								setImediateVar();
							;
    break;}
case 188:
#line 1234 "grammar.yacc"
{								
								_IsFacteurIsExpression = false;
								if(!processingVar())
								{
									_FromStack.pop_back();
									return false;
								}
								_FromStack.pop_back();
							;
    break;}
case 189:
#line 1244 "grammar.yacc"
{								
								_IsFacteurIsExpression = true;								
								setMethodVar();
							;
    break;}
case 190:
#line 1249 "grammar.yacc"
{							
								_IsFacteurIsExpression = true;
							;
    break;}
case 191:
#line 1253 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 192:
#line 1257 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 193:
#line 1261 "grammar.yacc"
{							
								_IsFacteurIsExpression = false;
							;
    break;}
case 194:
#line 1265 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 195:
#line 1269 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 196:
#line 1273 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 197:
#line 1277 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 198:
#line 1281 "grammar.yacc"
{
								_IsFacteurIsExpression = false;
							;
    break;}
case 199:
#line 1288 "grammar.yacc"
{
								_LasVarStr.clear();
								_LasVarStr.push_back(NLAISCRIPT::CStringType(LastyyText[1]));
								_LastFact.VarType = varTypeUndef;
								_IsFacteurIsExpression = false;	
								_FromStack.push_back(false);							
							;
    break;}
case 200:
#line 1297 "grammar.yacc"
{
								_LasVarStr.clear();
								cleanTypeList();
								_LasVarStr.push_back(LastyyText[1]);
								setMethodVar();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);

							;
    break;}
case 201:
#line 1309 "grammar.yacc"
{	
								cleanTypeList();
								_TypeList.push_back(_FlotingExpressionType);
								_FlotingExpressionType->incRef();
								_FromStack.push_back(true);
							;
    break;}
case 202:
#line 1318 "grammar.yacc"
{									
								if(_IsFacteurIsExpression)
								{
									IOpType *c = _TypeList.back();
									_TypeList.pop_back();
									c->release();
									_TypeList.push_back(_FlotingExpressionType);
									_FlotingExpressionType->incRef();
									_LasVarStr.clear();
									_FromStack.pop_back();
								}
								_LasVarStr.push_back(LastyyText[1]);
							;
    break;}
case 203:
#line 1335 "grammar.yacc"
{									
								setListVar();
							;
    break;}
case 205:
#line 1343 "grammar.yacc"
{									
								setChaineVar();
							;
    break;}
case 206:
#line 1349 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));								
							;
    break;}
case 207:
#line 1353 "grammar.yacc"
{								
								_LastBloc->addCode((new CAddOpCode));
							;
    break;}
case 208:
#line 1359 "grammar.yacc"
{
								_LastStringParam.push_back(new NLAIAGENT::CGroupType());								

							;
    break;}
case 209:
#line 1364 "grammar.yacc"
{
								_LastBloc->addCode(new CLdbOpCode (NLAIAGENT::CGroupType()));
							;
    break;}
case 211:
#line 1370 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 212:
#line 1374 "grammar.yacc"
{
								if(!buildObject()) return false;
							;
    break;}
case 213:
#line 1381 "grammar.yacc"
{							
								_LastStringParam.back()->cpy(NLAIAGENT::CStringType(NLAIAGENT::CStringVarName(LastyyText[1])));
								_Param.push_back(new CParam);								
							;
    break;}
case 214:
#line 1388 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );				
						;
    break;}
case 215:
#line 1393 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 216:
#line 1397 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
//							_LastBloc->addCode( new CLdbNewOpCode(CRule()) );		
							setStackVar( CVar::IdVar );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tUndef);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::Rule::idRule;
						;
    break;}
case 218:
#line 1412 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 219:
#line 1416 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbNewOpCode( CClause() ) );
							//_LastBloc->addCode( new CAddOpCode() );
//							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
//							_LastFact.varType = varForFunc;
//							_LastFact.isUsed = false;
//							_lastIdentType = NLAIAGENT::CClause::idCClause;
						;
    break;}
case 220:
#line 1428 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 221:
#line 1432 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 222:
#line 1436 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );							
						;
    break;}
case 223:
#line 1441 "grammar.yacc"
{
							//_LastBloc->addCode( new CAddOpCode() );													
						;
    break;}
case 224:
#line 1447 "grammar.yacc"
{
							_LastBloc->addCode( new CTellOpCode() );
						;
    break;}
case 225:
#line 1453 "grammar.yacc"
{
							/*char buf[256];
							strcpy(buf, LastyyText[1]);
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CBoolType( NLAIAGENT::CStringVarName(LastyyText[1]) ) ) );
							_lastObjectType = (uint)(_lastObjectType & NLAIC::CTypeOfObject::tLogic);
							_LastFact.varType = varForFunc;
							_LastFact.isUsed = false;
							_lastIdentType = NLAIAGENT::CVar::idBoolType;
							*/
						;
    break;}
case 226:
#line 1466 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
							char *txt = LastyyText[1];
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode(new CAddOpCode() );
							//_LastAssert = NLAIAGENT::CStringVarName(LastyyText[1]);
						;
    break;}
case 227:
#line 1474 "grammar.yacc"
{
/*							setStackVar( CFactPattern::IdFactPattern );
							IBaseAssert *my_assert = _FactBase->addAssert( _LastAssert, _NbLogicParams );
							_NbLogicParams = 0;
							_LastBloc->addCode(new CLdbNewOpCode( CFactPattern( my_assert ) ) );
							*/
						;
    break;}
case 228:
#line 1484 "grammar.yacc"
{
						;
    break;}
case 229:
#line 1491 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 230:
#line 1497 "grammar.yacc"
{
								_LastBloc->addCode((new CAddOpCode));
//								_param.back()->push(_lastIdentType);
								_NbLogicParams++;
							;
    break;}
case 232:
#line 1506 "grammar.yacc"
{
							char buf[256];
							strcpy(buf, LastyyText[1]);
							setStackVar( CVar::IdVar );
							_LastBloc->addCode( new CLdbOpCode(CVar( LastyyText[1] )) );
						;
    break;}
case 233:
#line 1516 "grammar.yacc"
{
							_LastBloc->addCode(new CLdbOpCode( NLAIAGENT::CGroupType()) );
						;
    break;}
case 235:
#line 1523 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 236:
#line 1527 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 237:
#line 1531 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 238:
#line 1535 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
case 239:
#line 1541 "grammar.yacc"
{
							// Met la clause en somment de pile dans une liste
							_LastBloc->addCode( new CMakeArgOpCode() );
						;
    break;}
case 240:
#line 1546 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 241:
#line 1550 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyRule() ) );		
							setStackVar(CFuzzyRule::IdFuzzyRule);
						;
    break;}
case 242:
#line 1558 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 243:
#line 1562 "grammar.yacc"
{
							
						;
    break;}
case 244:
#line 1568 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 245:
#line 1572 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 247:
#line 1579 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
							// Composant?
							char *txt = LastyyText[0];
/*							_lastFVarIndex = ((IClassInterpret *)_selfClass.get())->getComponentIndex(NLAIAGENT::CStringVarName(LastyyText[1]));
							if (_lastFVarIndex != -1 )
							{
								_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CDigitalType(_lastFVarIndex) ) );
								_LastBloc->addCode( new CAddOpCode() );
							}
							else
							{
								// Variable locale?
							}
							*/

						;
    break;}
case 248:
#line 1597 "grammar.yacc"
{
							_LastString = NLAIAGENT::CStringVarName( LastyyText[0] );
						;
    break;}
case 249:
#line 1601 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++ );
							_LastBloc->addCode(new CLdbNewOpCode( CSimpleFuzzyCond(NULL, NULL) ) );
						;
    break;}
case 250:
#line 1608 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 251:
#line 1612 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( (NLAIAGENT::IObjectIA &) NLAIAGENT::CStringVarName( LastyyText[1] ) ) );
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 252:
#line 1617 "grammar.yacc"
{
							_LastBloc->addCode( new CLdbOpCode( NLAIAGENT::CGroupType() ) );
						;
    break;}
case 253:
#line 1621 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
							_LastBloc->addCode( new CLdbNewOpCode( CFuzzyVar(NLAIAGENT::CStringVarName("Inst"),0,1) ) );
						;
    break;}
case 254:
#line 1628 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 255:
#line 1632 "grammar.yacc"
{
							_LastBloc->addCode( new CAddOpCode() );
						;
    break;}
case 257:
#line 1639 "grammar.yacc"
{
							for (sint32 i = 0; i < 20; i++);
						;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1643 "grammar.yacc"

