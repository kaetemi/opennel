/**
\page service_howto How to create a service ?

\author Olivier Cado, Vianney Lecroart

\date Updated October 30, 2001

\subsection service_intro Introduction

A service is set of functionalities provided by a server.
The class \c NLNET::IService5 is the base class of all services.
This class can be found in the file \c nel/src/net/service_5.cpp and \c nel/include/nel/net/service_5.h

\warning The class \c NLNET::IService is still available but is \b deprecated.
You should transform your old services with the new service5.
service and service5 are not compatible so all services in the shard must be based on either the old one or the new one.

\c NLNET::IService5 performs automatically the basic
functionalities of any service, such as registration
to the Naming Service, server start-up and shutdown, argument and config file parsing.

\c NLNET::IService5 base class is located in NeL, but user-defined services
are located in \c /code/nelns.

A shard is a set of services and contains standard services (that are in \c /code/nelns ) and your services.
To create a shard you \b must have at least the naming_service running, other services are optional but should
be launch. All services try to connect to the admin_executor_service on the localhost so you should run
it on every server to prevent this connection from failing (services retry to connect to the admin_executor_service evenly).
You can launch the admin_service if you want to use the admin system.
You can launch the login_service and welcome_service if you want to use client authentification.

\subsection service How to create a user-defined service ?

-# Create a class inherited from \c NLNET::IService5.
-# Create an array of callbacks. Example :
\code
void cbPing(CMessage &msgin, const std::string &serviceName, uint16 sid)
{
	// Process the ping message
}

TUnifiedCallbackItem CallbackArray[] =
{
	{ "PING", cbPing }
};
\endcode
-# Reimplement the methods init(), update() and release() of the class if you need to (optional).
After each call to update(), the service will update all network connections (and call your callbacks),
check if config files have changed and flush buffers of outgoing data.
-# Add in your source file the \c NLNET_SERVICE_MAIN line, with the following arguments :
- The name of your class (or \c NLNET::IService5 if you do not inherit from it (*))
- The short name of your service (for example "PS" for ping service)
- Its long name (for example "ping_service" for ping service) (**)
- The chosen port number (set it to 0 for "auto-assigned by the naming service")
- The callback array

Example:
\code
NLNET_SERVICE_MAIN (CMyService, "MS", "my_service", 0, CallbackArray);
\endcode

(*) Note: if your service does nothing else than calling your callbacks,
i.e. init(), update() and release() are empty, you don't need
to create a new class : you can use \c NLMISC::IService5 directly and
write \c NLMISC::IService5 instead of \c CMyService.

(**) Note: the long name is used to find the config file. If the long name is "ping_service" the service will try to open the config
file named "ping_service.cfg"

To run your service, create a file "<service_long_name>.cfg" in the working directory, containing the location of your naming service.

Example: my_service.cfg:
\code
NSHost = "itsalive.nevrax.org";
NSPort = 50000;
\endcode

\subsection services_update Update rules

Use the \c setUpdateTimeout() to set the quantum of time use for the network update. You are absolutely certain that your \c update()
function will \b not be called \b before this amount of time.

If you set the update time-out value higher than 0, all messages in queue will be processed until the time becomes greater than the time-out, before calling the user \c update() .

If you set the update time-out value to 0, all messages in queue will be processed once before calling the user \c update() .

If you set the update time-out value to -1, only one message will be process once before calling the user \c update() .

The default time-out is 100ms, therefore the \c update() function of your service will be called every 100ms or so.

\subsection services_examples Examples

See the NeLNS services source code for examples on how to create a class inherited from \c NLMISC::IService5.

Note that some NeLNS services use the old IService class and it's normal because these services are special.

All your services should use service 5 and if not, you should know exactly how to deal with that.

See also the net_layer5 samples in the \c nel/samples/net_layer5 directory.

Take a look on the \c nel/include/nel/net/service_5.h and \c nel/include/nel/net/unified_network.h header for more information about
methods.

*/