/**
\page network Network

\author Olivier Cado

\subsection networkintro Introduction

Conceptually, the network subsystem is divided into layers :
-# Layer 1 is the socket layer : it allows to send/receive any data synchronously using a network, either reliably or not.
-# Layer 2 is the message transfer layer : it allows to send/receive messages synchronously.
-# Layer 3 is the message handling layer : it allows to listen for messages and to call event-driven callback functions.
-# The recipient of a connection need not be an Internet address. It can be pointed to as a specific service using a Naming Service.
-# Any object can be serialized to/from a message.
-# Server software are called services and have a common interface.

Here is the implementation point of view :
-# Layer 1 is implemented by NLNET::CBaseSocket.
-# Layer 2 is implemented by NLNET::CSocket.
-# Layer 3 is implemented by NLNET::CMsgSocket.
-# The class NLNET::CNamingClient allows using the Naming Service. It is used by NLNET::CMsgSocket for service lookup. The addresses are implemented by NLNET::CInetAddress. 
-# The class NLNET::CMessage inherits from NLMISC::IStream.
-# All services inherit from NLNET::IService. It provides the basic functionnalities such as registration to the Naming Service, server start-up and shutdown (see \ref new_service_howto).

\subsection networkusing Using the network engine

Example : I want to ask the "family service" (FMLS) the age of Toto. Let's say the family service
understands a message of type "AGEREQ" and answers back a message of type "AGE" :

-# How to send a synchronous request to a host, using CSocket (layer 2) ?

\code
  uint16 validitytime;
  CSocket client;
  // Connect to the family service
  if ( CNamingClient::lookupAndConnect( "FMLS", client, validitytime ) )
  {
	// Send request
	CMessage msgout( "AGEREQ" );
	msgout.serial( Toto.name() );
	client.send( msgout );

	// Receive answer
	uint16 age;
	CMessage msgin( "", true );
	client.receive( msgin );
	msgin.serial( age );
	Toto.setAge( age );
  }

\endcode

-# How can I send an asynchronous request to a host, using CMsgSocket, the message handling system (layer 3) ?

\code
  // Callback to process the answer
  void cbProcessAge( CMessage& msgin, TSenderId idfrom )
  {
    uint16 age;
    Toto.setAge( age );
  }

  // Callback array
  TCallbackItem ClientCallbacks [] =
  {
    { "AGE", cbProcessEntityStateG }
  };

  void main()
  {
    // Connect to the family service
    CMsgSocket client ( ClientCallbacks, sizeof(ClientCallbacks)/sizeof(TCallbackItem), "FAMS" );

    // Send request
    CMessage msgout ( "AGEREQ" ); // The server should have a callback associated to "AGEREQ"
    msgout.serial( Toto.name() );
    client.send( msgout );

    while ( true )
    {
      client.update(); // tests if a message has been received, and if the associated callback is called back
    }
  }
\endcode

- How can I send a container or an object ?

Symply serialize your container or your object in a message.

Example :
\code
  vector<CMyClass> myvector;
  CMessage msgout ( false );
  msgout.serial( myvector );
  client.send( msgout );
\endcode
This code serializes all objects contained in \e myvector. For this to work, you need to provide a method serial()
in your class MyClass. This is explained in NLMISC::IStream.

*/