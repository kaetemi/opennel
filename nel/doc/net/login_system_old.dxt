/**
\page login_system How the login system works ?

$Id: login_system_old.dxt,v 1.2 2002/09/30 14:03:26 lecroart Exp $

\author Vianney Lecroart

\date 04/25/2001

\subsection old_login_system_intro Introduction

This document is \b deprecated.

This document briefly describes the connection process of a client to a shard
running a NeL-based system.

\subsection old_login_system_abbr Abbreviations

\b Services

- \b LS: Login Service (a single unique LS services the entire shard set), on port 49999.
- \b WS: Welcome Service (one for each shard), on port 49998.
- \b FES: Front-End Service (N per shard), port numbers are dynamically attributed by the naming service.

\b Messages

- \b "VLP":	VerifyLoginPassword
- \b "CS":	ChooseShard
- \b "SCS":	ShardChooseShard (answer of the "CS" message)
- \b "SV":	ShardValidation
- \b "CC":	ClientConnected

\subsection old_login_system_steps Login system steps

\c Sxx is the step number, you can search the code for this step is coded.

- \b S01: In function \p CLoginClient::authenticate() in \p login_client.cpp.

          The client initiates a connection to the LS, using the supplied IP and port
          from the configuration file, with the help of the DNS for IP resolution.

\e Note: DNS spoofing or configuration file modification can lead to LS
spoofing and hacking of the login/password information of the client.
However, DNS is needed for flexibility of the login service location.
It would be possible to supply the client with a range of valid IP address for the LS, and
for the client to test the DNS' response against this range, in order to thwart this.

- \b S02: In function \p CLoginClient::authenticate() in \p login_client.cpp.
          
		  The client sends "VLP" message with login (\p string), password (\p string),
		  client version (\p uint32) and system capabilities (4 \p string) to the LS.

- \b S03: In function \p cbClientVerifyLoginPassword in \p connection_client.cpp of the LS.

          The LS receives "VLP" message from the client and checks the client login/password validity.

		  The LS also generates a single-use cookie to validate the incoming connection with this client.

		  If something fails, the LS sends "VLP" message to the client with the reason why it failed and it
		  disconnects the client.

		  If everything succees, the LS builds a list of all available shards according to account
		  information and current system settings. This list contains shards names (\p string) and the
		  IP (in string format) for the WS of that shard. It sends "VLP" message to client with
		  this list.

- \b S04: In function \p cbVerifyLoginPassword in \p login_client.cpp.

		  The client receives "VLP" message from LS and handles the result.

- \b S05: In function \p CLoginClient::connectToShard() in \p login_client.cpp.

		  The user selected the shard it wants to login to, and the client sends "CS" message with
		  the IP address of its WS (in string format) to the LS.

- \b S06: In function \p cbClientChooseShard() in \p connection_client.cpp of the LS.

		  The LS receives the "CS" message from client.

		  If something goes wrong, the LS sends a "SCS" message to the client with the
		  reason for the problem and disconnects the client.

		  In a normal case, The LS sends "CS" message to the selected WS of the client's connection
          desires with the cookie generated in the step S03 (CLoginCookie).

- \b S07: In function \p cbLSChooseShard() in \p welcome_service.cpp of the WS.

		  The WS receives the "CS" message from LS. The WS selects a FES to accept the client
		  connexion, and sends "CS" message with the cookie to the selected FES.

		  If something goes wrong, the LS sends a "SCS" message to the LS with the
		  reason for the problem.

- \b S08: In function \p cbWSChooseShard in \p login_server.cpp.

		  The FES checks its capacity to accept the client. It stores the cookie
		  and sends a "SCS" message to the WS with reason why it failed with it failed or with
		  the cookie and the listen address (\p string) where the client will try to connect.

- \b S09: In function \p cbFESShardChooseShard() in \p welcome_service.cpp of the WS.

		  The WS receives the "SCS" message from FES and sends it to the LS.

- \b S10: In function \p cbWSShardChooseShard() in \p connection_ws.cpp of the LS.

		  The LS receives "SCS" message from WS and sends "SCS" message to the client
		  and disconnects the client connection.

- \b S11: In function \p cbShardChooseShard() in \p login_client.cpp.

		  The client receives "SCS" message from LS and handles it.

- \b S12: In function \p CLoginClient::connectToShard() in \p login_client.cpp.

		  The client initiates a connection to the indicated FES and sends "SV" message
		  to the FES with the submitted cookie.

- \b S13: In function \p cbShardValidation in \p login_server.cpp.

		  The FES receives the cookie from the client. It checks if the cookie is good.
		  The FES sends "SV" message to the client to say if it accepts the client.
		  
		  If the check failed, the "SV" message contains the reason (\p string) explains what
		  goes wrong and the FES disconnects the client.

		  Otherwise, the "SV" message contains an empty string. In this case, the FES also
		  sends a "CC" message to the WS with the userid (\p uint32) and an \p uint8 saying that the
		  client is connected.

- \b S14: In function \p cbShardValidate() in \p login_client.cpp.

		  The client receives "SV" message saying whether all is ok or not.

- \b S15: In function \p cbFESClientConnected() in \p welcome_service.cpp of the WS.

		  The WS receives "CC" message from FES and sends "CC" message to the LS

- \b S16: In function \p cbWSClientConnected() in \p connection_ws.cpp of the LS.

		  The LS receives "CC" message from WS and handles the message. The LS is now
		  able to see whether the same account is being used to connects 2 different people and
		  know exactly how many people are on each shard.


\subsection old_logout_system_steps Logout system steps


It's similar to steps S13 to S16. The FES receives the disconnection of a client.
It sends "CC" message to the WS with the userid (\p uint32) and an \p uint8 to 0 saying that the client
is disconnected. The WS receives the message and sends the same message to the LS. The LS receives
the message and handles it.


\subsection old_login_system_notes Side notes

Whenever a shard starts, the WS establishes a permanent link with the LS,
using an encrypted link (it is assumed that the LS and WS are located on two
physically and probably geographically distinct networks). A "SHARD" message
serves as authentification, and the WS then updates the LS with its state,
name and IP address. The LS may have a list of valid IP/port addresses for WS
to avoid the occasional pirate server registration.

If the LS detects that a person is trying to connect to an account that is already on use by another person, then
the 2 people will be disconnected. The goal is to discourage people from sharing their accounts and
also to avoid account deadlock in the case of bug. If for an obscur reason the user state in the LS is bad, then
the next time the user tries to connect, they will be disconnected and their account will be reseted to the
offline state and the user will be able to retry with a normal state.

A \e cookie is a class (\p CLoginCookie in \p login_cookie.cpp) that contains the client's IP (\p uint32)
as seen by the LS (to avoid address translation problems) for validation, a unique key (\p uint32) and the user id (\p uint32).

An \e account is a class that contains information about a physical person like their visa card number and their userid.

A \e userid is an unique number associated to an account for life.


*/